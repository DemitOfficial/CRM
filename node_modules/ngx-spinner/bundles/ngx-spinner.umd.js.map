{"version":3,"file":"ngx-spinner.umd.js","sources":["../../../projects/ngx-spinner/src/lib/ngx-spinner.enum.ts","../../../projects/ngx-spinner/src/lib/ngx-spinner.service.ts","../../../projects/ngx-spinner/src/lib/ngx-spinner.component.ts","../../../projects/ngx-spinner/src/lib/safe-html.pipe.ts","../../../projects/ngx-spinner/src/lib/ngx-spinner.module.ts","../../../projects/ngx-spinner/src/public_api.ts","../../../projects/ngx-spinner/src/ngx-spinner.ts"],"names":["BehaviorSubject","filter","Injectable","Subject","takeUntil","Component","ChangeDetectionStrategy","trigger","state","style","transition","animate","ChangeDetectorRef","Input","ViewChild","HostListener","Pipe","DomSanitizer","NgModule","CommonModule"],"mappings":"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","sourcesContent":["export const LOADERS = {\n  'ball-8bits': 16,\n  'ball-atom': 4,\n  'ball-beat': 3,\n  'ball-circus': 5,\n  'ball-climbing-dot': 4,\n  'ball-clip-rotate': 1,\n  'ball-clip-rotate-multiple': 2,\n  'ball-clip-rotate-pulse': 2,\n  'ball-elastic-dots': 5,\n  'ball-fall': 3,\n  'ball-fussion': 4,\n  'ball-grid-beat': 9,\n  'ball-grid-pulse': 9,\n  'ball-newton-cradle': 4,\n  'ball-pulse': 3,\n  'ball-pulse-rise': 5,\n  'ball-pulse-sync': 3,\n  'ball-rotate': 1,\n  'ball-running-dots': 5,\n  'ball-scale': 1,\n  'ball-scale-multiple': 3,\n  'ball-scale-pulse': 2,\n  'ball-scale-ripple': 1,\n  'ball-scale-ripple-multiple': 3,\n  'ball-spin': 8,\n  'ball-spin-clockwise': 8,\n  'ball-spin-clockwise-fade': 8,\n  'ball-spin-clockwise-fade-rotating': 8,\n  'ball-spin-fade': 8,\n  'ball-spin-fade-rotating': 8,\n  'ball-spin-rotate': 2,\n  'ball-square-clockwise-spin': 8,\n  'ball-square-spin': 8,\n  'ball-triangle-path': 3,\n  'ball-zig-zag': 2,\n  'ball-zig-zag-deflect': 2,\n  'cog': 1,\n  'cube-transition': 2,\n  'fire': 3,\n  'line-scale': 5,\n  'line-scale-party': 5,\n  'line-scale-pulse-out': 5,\n  'line-scale-pulse-out-rapid': 5,\n  'line-spin-clockwise-fade': 8,\n  'line-spin-clockwise-fade-rotating': 8,\n  'line-spin-fade': 8,\n  'line-spin-fade-rotating': 8,\n  'pacman': 6,\n  'square-jelly-box': 2,\n  'square-loader': 1,\n  'square-spin': 1,\n  'timer': 1,\n  'triangle-skew-spin': 1\n};\n\nexport const DEFAULTS = {\n  BD_COLOR: 'rgba(51,51,51,0.8)',\n  SPINNER_COLOR: '#fff',\n  SPINNER_TYPE: 'ball-scale-multiple',\n  Z_INDEX: 99999,\n};\n\nexport const PRIMARY_SPINNER = 'primary';\n\nexport type Size = 'default' | 'small' | 'medium' | 'large';\n\nexport interface Spinner {\n  bdColor?: string;\n  size?: Size;\n  color?: string;\n  type?: string;\n  fullScreen?: boolean;\n  zIndex?: number;\n  template?: string;\n  showSpinner?: boolean;\n}\n\nexport class NgxSpinner {\n  name: string;\n  bdColor: string;\n  size: Size;\n  color: string;\n  type: string;\n  class: string;\n  divCount: number;\n  divArray: Array<number>;\n  fullScreen: boolean;\n  show: boolean;\n  zIndex: number;\n  template: string;\n  showSpinner: boolean;\n\n  constructor(init?: Partial<NgxSpinner>) {\n    Object.assign(this, init);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { NgxSpinner, PRIMARY_SPINNER, Spinner } from './ngx-spinner.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxSpinnerService {\n  /**\n   * Spinner observable\n   *\n   * @memberof NgxSpinnerService\n   */\n  // private spinnerObservable = new ReplaySubject<NgxSpinner>(1);\n  public spinnerObservable = new BehaviorSubject<NgxSpinner>(null);\n  /**\n   * Creates an instance of NgxSpinnerService.\n   * @memberof NgxSpinnerService\n   */\n  constructor() { }\n  /**\n  * Get subscription of desired spinner\n  * @memberof NgxSpinnerService\n  **/\n  getSpinner(name: string): Observable<NgxSpinner> {\n    return this.spinnerObservable.asObservable().pipe(filter((x: NgxSpinner) => x && x.name === name));\n  }\n  /**\n   * To show spinner\n   *\n   * @memberof NgxSpinnerService\n   */\n  show(name: string = PRIMARY_SPINNER, spinner?: Spinner) {\n    return new Promise((resolve, _reject) => {\n      setTimeout(() => {\n        if (spinner && Object.keys(spinner).length) {\n          spinner['name'] = name;\n          this.spinnerObservable.next(new NgxSpinner({ ...spinner, show: true }));\n          resolve(true);\n        } else {\n          this.spinnerObservable.next(new NgxSpinner({ name, show: true }));\n          resolve(true);\n        }\n      }, 10);\n    });\n\n  }\n  /**\n  * To hide spinner\n  *\n  * @memberof NgxSpinnerService\n  */\n  hide(name: string = PRIMARY_SPINNER, debounce: number = 10) {\n    return new Promise((resolve, _reject) => {\n      setTimeout(() => {\n        this.spinnerObservable.next(new NgxSpinner({ name, show: false }));\n        resolve(true);\n      }, debounce);\n    });\n  }\n}\n","import {\n  Component,\n  OnDestroy,\n  Input,\n  OnInit,\n  OnChanges,\n  SimpleChange,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  HostListener,\n  ViewChild\n} from '@angular/core';\nimport { NgxSpinnerService } from './ngx-spinner.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { LOADERS, DEFAULTS, Size, NgxSpinner, PRIMARY_SPINNER } from './ngx-spinner.enum';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\n\n@Component({\n  selector: 'ngx-spinner',\n  templateUrl: 'ngx-spinner.component.html',\n  styleUrls: ['ngx-spinner.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('fadeIn', [\n      state('in', style({ opacity: 1 })),\n      transition(':enter', [\n        style({ opacity: 0 }),\n        animate(300)\n      ]),\n      transition(':leave',\n        animate(200, style({ opacity: 0 })))\n    ])\n  ]\n})\nexport class NgxSpinnerComponent implements OnDestroy, OnInit, OnChanges {\n\n  /**\n   * To set backdrop color\n   * Only supports RGBA color format\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() bdColor: string;\n  /**\n   * To set spinner size\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() size: Size;\n  /**\n   * To set spinner color(DEFAULTS.SPINNER_COLOR)\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() color: string;\n  /**\n   * To set type of spinner\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() type: string;\n  /**\n   * To toggle fullscreen mode\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() fullScreen: boolean;\n  /**\n   * Spinner name\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() name: string;\n  /**\n   * z-index value\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() zIndex: number;\n  /**\n   * Custom template for spinner/loader\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() template: string;\n  /**\n   * Show/Hide the spinner\n   *\n   * @type {boolean}\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() showSpinner: boolean;\n\n  /**\n   * To enable/disable animation\n   *\n   * @type {boolean}\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() disableAnimation: boolean = false;\n  /**\n   * Spinner Object\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  spinner: NgxSpinner = new NgxSpinner();\n  /**\n   * Array for spinner's div\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  divArray: Array<number>;\n  /**\n   * Counter for div\n   *\n   * @memberof NgxSpinnerComponent\n   *\n   */\n  divCount: number;\n  /**\n   * Show spinner\n   *\n   * @memberof NgxSpinnerComponent\n  **/\n  show: boolean;\n  /**\n   * Unsubscribe from spinner's observable\n   *\n   * @memberof NgxSpinnerComponent\n  **/\n  ngUnsubscribe: Subject<void> = new Subject();\n  /**\n   * Element Reference\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @ViewChild('overlay') spinnerDOM;\n\n  @HostListener('document:keydown', ['$event'])\n  handleKeyboardEvent(event: KeyboardEvent) {\n    if (this.spinnerDOM && this.spinnerDOM.nativeElement) {\n      event.returnValue = false;\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Creates an instance of NgxSpinnerComponent.\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  constructor(private spinnerService: NgxSpinnerService, private changeDetector: ChangeDetectorRef) {\n    this.bdColor = DEFAULTS.BD_COLOR;\n    this.zIndex = DEFAULTS.Z_INDEX;\n    this.color = DEFAULTS.SPINNER_COLOR;\n    this.type = DEFAULTS.SPINNER_TYPE;\n    this.size = 'large';\n    this.fullScreen = true;\n    this.name = PRIMARY_SPINNER;\n    this.template = null;\n    this.showSpinner = false;\n\n    this.divArray = [];\n    this.divCount = 0;\n    this.show = false;\n  }\n  /**\n   * Initialization method\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnInit() {\n    this.setDefaultOptions();\n    this.spinnerService.getSpinner(this.name)\n      .pipe(\n        takeUntil(this.ngUnsubscribe)\n      )\n      .subscribe((spinner: NgxSpinner) => {\n        this.setDefaultOptions();\n        Object.assign(this.spinner, spinner);\n        if (spinner.show) {\n          this.onInputChange();\n        }\n        this.changeDetector.detectChanges();\n      });\n  }\n  /**\n   * To set default ngx-spinner options\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  setDefaultOptions = () => {\n    this.spinner = new NgxSpinner({\n      name: this.name,\n      bdColor: this.bdColor,\n      size: this.size,\n      color: this.color,\n      type: this.type,\n      fullScreen: this.fullScreen,\n      divArray: this.divArray,\n      divCount: this.divCount,\n      show: this.show,\n      zIndex: this.zIndex,\n      template: this.template,\n      showSpinner: this.showSpinner\n    });\n  }\n  /**\n   * On changes event for input variables\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnChanges(changes: { [propKey: string]: SimpleChange }) {\n    for (const propName in changes) {\n      if (propName) {\n        const changedProp = changes[propName];\n        if (changedProp.isFirstChange()) {\n          return;\n        } else if (typeof changedProp.currentValue !== 'undefined' && changedProp.currentValue !== changedProp.previousValue) {\n          if (changedProp.currentValue !== '') {\n            this.spinner[propName] = changedProp.currentValue;\n            if (propName === 'showSpinner') {\n              if (changedProp.currentValue) {\n                this.spinnerService.show(this.spinner.name, this.spinner);\n              } else {\n                this.spinnerService.hide(this.spinner.name);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\n   * To get class for spinner\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  getClass(type: string, size: Size): string {\n    this.spinner.divCount = LOADERS[type];\n    this.spinner.divArray = Array(this.spinner.divCount).fill(0).map((x, i) => i);\n    let sizeClass = '';\n    switch (size.toLowerCase()) {\n      case 'small':\n        sizeClass = 'la-sm';\n        break;\n      case 'medium':\n        sizeClass = 'la-2x';\n        break;\n      case 'large':\n        sizeClass = 'la-3x';\n        break;\n      default:\n        break;\n    }\n    return 'la-' + type + ' ' + sizeClass;\n  }\n  /**\n   * Check if input variables have changed\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  onInputChange() {\n    this.spinner.class = this.getClass(this.spinner.type, this.spinner.size);\n  }\n  /**\n   * Component destroy event\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnDestroy() {\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n}\n","import { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'safeHtml'\n})\nexport class SafeHtmlPipe implements PipeTransform {\n\n  constructor(private _sanitizer: DomSanitizer) {\n  }\n\n  transform(v: string): SafeHtml {\n    if (v) {\n      return this._sanitizer.bypassSecurityTrustHtml(v);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxSpinnerComponent } from './ngx-spinner.component';\nimport { SafeHtmlPipe } from './safe-html.pipe';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [NgxSpinnerComponent, SafeHtmlPipe],\n  exports: [NgxSpinnerComponent]\n})\nexport class NgxSpinnerModule { }\n","/*\n * Public API Surface of ngx-spinner\n */\nexport * from './lib/ngx-spinner.service';\nexport * from './lib/ngx-spinner.component';\nexport * from './lib/ngx-spinner.module';\nexport * from './lib/ngx-spinner.enum';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {SafeHtmlPipe as ɵa} from './lib/safe-html.pipe';"]}