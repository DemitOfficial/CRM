/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import * as Chartist from 'chartist';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var NgxChartistService = /** @class */ (function () {
    function NgxChartistService() {
    }
    /**
     * @return {?}
     */
    NgxChartistService.prototype.getPrecision = /**
     * @return {?}
     */
    function () {
        return Chartist.precision;
    };
    /**
     * @return {?}
     */
    NgxChartistService.prototype.getEscapingMap = /**
     * @return {?}
     */
    function () {
        return Chartist.escapingMap;
    };
    /**
     * @return {?}
     */
    NgxChartistService.prototype.getPie = /**
     * @return {?}
     */
    function () {
        return Chartist.Pie;
    };
    /**
     * @return {?}
     */
    NgxChartistService.prototype.getBar = /**
     * @return {?}
     */
    function () {
        return Chartist.Bar;
    };
    /**
     * @return {?}
     */
    NgxChartistService.prototype.getLine = /**
     * @return {?}
     */
    function () {
        return Chartist.Line;
    };
    /**
     * @return {?}
     */
    NgxChartistService.prototype.getCandle = /**
     * @return {?}
     */
    function () {
        return Chartist.Candle;
    };
    /**
     * @return {?}
     */
    NgxChartistService.prototype.getFixedScaleAxis = /**
     * @return {?}
     */
    function () {
        return Chartist.FixedScaleAxis;
    };
    /**
     * @return {?}
     */
    NgxChartistService.prototype.getAutoScaleAxis = /**
     * @return {?}
     */
    function () {
        return Chartist.AutoScaleAxis;
    };
    /**
     * @return {?}
     */
    NgxChartistService.prototype.getStepAxis = /**
     * @return {?}
     */
    function () {
        return Chartist.StepAxis;
    };
    /**
     * @return {?}
     */
    NgxChartistService.prototype.getSvg = /**
     * @return {?}
     */
    function () {
        return Chartist.Svg;
    };
    /**
     * @return {?}
     */
    NgxChartistService.prototype.getInterpolation = /**
     * @return {?}
     */
    function () {
        return Chartist.Interpolation;
    };
    /**
     * @return {?}
     */
    NgxChartistService.prototype.getNoop = /**
     * @return {?}
     */
    function () {
        return Chartist.noop;
    };
    /**
     * @return {?}
     */
    NgxChartistService.prototype.getPlugins = /**
     * @return {?}
     */
    function () {
        return Chartist.plugins;
    };
    /**
     * @param {?} n
     * @return {?}
     */
    NgxChartistService.prototype.alphaNumerate = /**
     * @param {?} n
     * @return {?}
     */
    function (n) {
        return Chartist.alphaNumerate(n);
    };
    /**
     * @param {?} target
     * @param {...?} sources
     * @return {?}
     */
    NgxChartistService.prototype.extend = /**
     * @param {?} target
     * @param {...?} sources
     * @return {?}
     */
    function (target) {
        var sources = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            sources[_i - 1] = arguments[_i];
        }
        return Chartist.extend.apply(Chartist, tslib_1.__spread([target], sources));
    };
    /**
     * @param {?} str
     * @param {?} subStr
     * @param {?} newSubStr
     * @return {?}
     */
    NgxChartistService.prototype.replaceAll = /**
     * @param {?} str
     * @param {?} subStr
     * @param {?} newSubStr
     * @return {?}
     */
    function (str, subStr, newSubStr) {
        return Chartist.replaceAll(str, subStr, newSubStr);
    };
    /**
     * @param {?} value
     * @param {?} unit
     * @return {?}
     */
    NgxChartistService.prototype.ensureUnit = /**
     * @param {?} value
     * @param {?} unit
     * @return {?}
     */
    function (value, unit) {
        return Chartist.ensureUnit(value, unit);
    };
    /**
     * @param {?} input
     * @return {?}
     */
    NgxChartistService.prototype.quantity = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        return Chartist.quantity(input);
    };
    /**
     * @param {?} query
     * @return {?}
     */
    NgxChartistService.prototype.query = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        return Chartist.query(query);
    };
    /**
     * @param {?} length
     * @return {?}
     */
    NgxChartistService.prototype.times = /**
     * @param {?} length
     * @return {?}
     */
    function (length) {
        return Chartist.times(length);
    };
    /**
     * @param {?} previous
     * @param {?} current
     * @return {?}
     */
    NgxChartistService.prototype.sum = /**
     * @param {?} previous
     * @param {?} current
     * @return {?}
     */
    function (previous, current) {
        return Chartist.sum(previous, current);
    };
    /**
     * @param {?} factor
     * @return {?}
     */
    NgxChartistService.prototype.mapMultiply = /**
     * @param {?} factor
     * @return {?}
     */
    function (factor) {
        return Chartist.mapMultiply(factor);
    };
    /**
     * @param {?} addend
     * @return {?}
     */
    NgxChartistService.prototype.mapAdd = /**
     * @param {?} addend
     * @return {?}
     */
    function (addend) {
        return Chartist.mapAdd(addend);
    };
    /**
     * @param {?} arr
     * @param {?} cb
     * @return {?}
     */
    NgxChartistService.prototype.serialMap = /**
     * @param {?} arr
     * @param {?} cb
     * @return {?}
     */
    function (arr, cb) {
        return Chartist.serialMap(arr, cb);
    };
    /**
     * @param {?} value
     * @param {?=} digits
     * @return {?}
     */
    NgxChartistService.prototype.roundWithPrecision = /**
     * @param {?} value
     * @param {?=} digits
     * @return {?}
     */
    function (value, digits) {
        return Chartist.roundWithPrecision(value, digits);
    };
    /**
     * @param {?} value
     * @param {?=} dimension
     * @return {?}
     */
    NgxChartistService.prototype.getMultiValue = /**
     * @param {?} value
     * @param {?=} dimension
     * @return {?}
     */
    function (value, dimension) {
        return Chartist.getMultiValue(value, dimension);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    NgxChartistService.prototype.serialize = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        return Chartist.serialize(data);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    NgxChartistService.prototype.deserialize = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        return Chartist.deserialize(data);
    };
    /**
     * @param {?} container
     * @param {?} width
     * @param {?} height
     * @param {?} className
     * @return {?}
     */
    NgxChartistService.prototype.createSvg = /**
     * @param {?} container
     * @param {?} width
     * @param {?} height
     * @param {?} className
     * @return {?}
     */
    function (container, width, height, className) {
        return Chartist.createSvg(container, width, height, className);
    };
    NgxChartistService.ctorParameters = function () { return []; };
    /** @nocollapse */ NgxChartistService.ngInjectableDef = i0.defineInjectable({ factory: function NgxChartistService_Factory() { return new NgxChartistService(); }, token: NgxChartistService, providedIn: "root" });
NgxChartistService.ɵfac = function NgxChartistService_Factory(t) { return new (t || NgxChartistService)(); };
NgxChartistService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxChartistService, factory: function (t) { return NgxChartistService.ɵfac(t); }, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxChartistService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
    return NgxChartistService;
}());
export { NgxChartistService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,