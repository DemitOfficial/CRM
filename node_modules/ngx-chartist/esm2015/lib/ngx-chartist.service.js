/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as Chartist from 'chartist';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class NgxChartistService {
    constructor() { }
    /**
     * @return {?}
     */
    getPrecision() {
        return Chartist.precision;
    }
    /**
     * @return {?}
     */
    getEscapingMap() {
        return Chartist.escapingMap;
    }
    /**
     * @return {?}
     */
    getPie() {
        return Chartist.Pie;
    }
    /**
     * @return {?}
     */
    getBar() {
        return Chartist.Bar;
    }
    /**
     * @return {?}
     */
    getLine() {
        return Chartist.Line;
    }
    /**
     * @return {?}
     */
    getCandle() {
        return Chartist.Candle;
    }
    /**
     * @return {?}
     */
    getFixedScaleAxis() {
        return Chartist.FixedScaleAxis;
    }
    /**
     * @return {?}
     */
    getAutoScaleAxis() {
        return Chartist.AutoScaleAxis;
    }
    /**
     * @return {?}
     */
    getStepAxis() {
        return Chartist.StepAxis;
    }
    /**
     * @return {?}
     */
    getSvg() {
        return Chartist.Svg;
    }
    /**
     * @return {?}
     */
    getInterpolation() {
        return Chartist.Interpolation;
    }
    /**
     * @return {?}
     */
    getNoop() {
        return Chartist.noop;
    }
    /**
     * @return {?}
     */
    getPlugins() {
        return Chartist.plugins;
    }
    /**
     * @param {?} n
     * @return {?}
     */
    alphaNumerate(n) {
        return Chartist.alphaNumerate(n);
    }
    /**
     * @param {?} target
     * @param {...?} sources
     * @return {?}
     */
    extend(target, ...sources) {
        return Chartist.extend(target, ...sources);
    }
    /**
     * @param {?} str
     * @param {?} subStr
     * @param {?} newSubStr
     * @return {?}
     */
    replaceAll(str, subStr, newSubStr) {
        return Chartist.replaceAll(str, subStr, newSubStr);
    }
    /**
     * @param {?} value
     * @param {?} unit
     * @return {?}
     */
    ensureUnit(value, unit) {
        return Chartist.ensureUnit(value, unit);
    }
    /**
     * @param {?} input
     * @return {?}
     */
    quantity(input) {
        return Chartist.quantity(input);
    }
    /**
     * @param {?} query
     * @return {?}
     */
    query(query) {
        return Chartist.query(query);
    }
    /**
     * @param {?} length
     * @return {?}
     */
    times(length) {
        return Chartist.times(length);
    }
    /**
     * @param {?} previous
     * @param {?} current
     * @return {?}
     */
    sum(previous, current) {
        return Chartist.sum(previous, current);
    }
    /**
     * @param {?} factor
     * @return {?}
     */
    mapMultiply(factor) {
        return Chartist.mapMultiply(factor);
    }
    /**
     * @param {?} addend
     * @return {?}
     */
    mapAdd(addend) {
        return Chartist.mapAdd(addend);
    }
    /**
     * @param {?} arr
     * @param {?} cb
     * @return {?}
     */
    serialMap(arr, cb) {
        return Chartist.serialMap(arr, cb);
    }
    /**
     * @param {?} value
     * @param {?=} digits
     * @return {?}
     */
    roundWithPrecision(value, digits) {
        return Chartist.roundWithPrecision(value, digits);
    }
    /**
     * @param {?} value
     * @param {?=} dimension
     * @return {?}
     */
    getMultiValue(value, dimension) {
        return Chartist.getMultiValue(value, dimension);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    serialize(data) {
        return Chartist.serialize(data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    deserialize(data) {
        return Chartist.deserialize(data);
    }
    /**
     * @param {?} container
     * @param {?} width
     * @param {?} height
     * @param {?} className
     * @return {?}
     */
    createSvg(container, width, height, className) {
        return Chartist.createSvg(container, width, height, className);
    }
}
NgxChartistService.ɵfac = function NgxChartistService_Factory(t) { return new (t || NgxChartistService)(); };
NgxChartistService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxChartistService, factory: NgxChartistService.ɵfac, providedIn: 'root' });
NgxChartistService.ctorParameters = () => [];
/** @nocollapse */ NgxChartistService.ngInjectableDef = i0.defineInjectable({ factory: function NgxChartistService_Factory() { return new NgxChartistService(); }, token: NgxChartistService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxChartistService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,