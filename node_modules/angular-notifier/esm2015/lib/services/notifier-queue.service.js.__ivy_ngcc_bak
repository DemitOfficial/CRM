import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
/**
 * Notifier queue service
 *
 * In general, API calls don't get processed right away. Instead, we have to queue them up in order to prevent simultanious API calls
 * interfering with each other. This, at least in theory, is possible at any time. In particular, animations - which potentially overlap -
 * can cause changes in JS classes as well as affect the DOM. Therefore, the queue service takes all actions, puts them in a queue, and
 * processes them at the right time (which is when the previous action has been processed successfully).
 *
 * Technical sidenote:
 * An action looks pretty similar to the ones within the Flux / Redux pattern.
 */
export class NotifierQueueService {
    /**
     * Constructor
     */
    constructor() {
        this.actionStream = new Subject();
        this.actionQueue = [];
        this.isActionInProgress = false;
    }
    /**
     * Push a new action to the queue, and try to run it
     *
     * @param action Action object
     */
    push(action) {
        this.actionQueue.push(action);
        this.tryToRunNextAction();
    }
    /**
     * Continue with the next action (called when the current action is finished)
     */
    continue() {
        this.isActionInProgress = false;
        this.tryToRunNextAction();
    }
    /**
     * Try to run the next action in the queue; we skip if there already is some action in progress, or if there is no action left
     */
    tryToRunNextAction() {
        if (this.isActionInProgress || this.actionQueue.length === 0) {
            return; // Skip (the queue can now go drink a coffee as it has nothing to do anymore)
        }
        this.isActionInProgress = true;
        this.actionStream.next(this.actionQueue.shift()); // Push next action to the stream, and remove the current action from the queue
    }
}
NotifierQueueService.decorators = [
    { type: Injectable }
];
NotifierQueueService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItcXVldWUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItbm90aWZpZXIvc3JjL2xpYi9zZXJ2aWNlcy9ub3RpZmllci1xdWV1ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUkvQjs7Ozs7Ozs7OztHQVVHO0FBRUgsTUFBTSxPQUFPLG9CQUFvQjtJQWdCL0I7O09BRUc7SUFDSDtRQUNFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxPQUFPLEVBQWtCLENBQUM7UUFDbEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQztJQUNsQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLElBQUksQ0FBQyxNQUFzQjtRQUNoQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQ7O09BRUc7SUFDSSxRQUFRO1FBQ2IsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQztRQUNoQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQ7O09BRUc7SUFDSyxrQkFBa0I7UUFDeEIsSUFBSSxJQUFJLENBQUMsa0JBQWtCLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzVELE9BQU8sQ0FBQyw2RUFBNkU7U0FDdEY7UUFDRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDO1FBQy9CLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLCtFQUErRTtJQUNuSSxDQUFDOzs7WUFyREYsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgTm90aWZpZXJBY3Rpb24gfSBmcm9tICcuLi9tb2RlbHMvbm90aWZpZXItYWN0aW9uLm1vZGVsJztcblxuLyoqXG4gKiBOb3RpZmllciBxdWV1ZSBzZXJ2aWNlXG4gKlxuICogSW4gZ2VuZXJhbCwgQVBJIGNhbGxzIGRvbid0IGdldCBwcm9jZXNzZWQgcmlnaHQgYXdheS4gSW5zdGVhZCwgd2UgaGF2ZSB0byBxdWV1ZSB0aGVtIHVwIGluIG9yZGVyIHRvIHByZXZlbnQgc2ltdWx0YW5pb3VzIEFQSSBjYWxsc1xuICogaW50ZXJmZXJpbmcgd2l0aCBlYWNoIG90aGVyLiBUaGlzLCBhdCBsZWFzdCBpbiB0aGVvcnksIGlzIHBvc3NpYmxlIGF0IGFueSB0aW1lLiBJbiBwYXJ0aWN1bGFyLCBhbmltYXRpb25zIC0gd2hpY2ggcG90ZW50aWFsbHkgb3ZlcmxhcCAtXG4gKiBjYW4gY2F1c2UgY2hhbmdlcyBpbiBKUyBjbGFzc2VzIGFzIHdlbGwgYXMgYWZmZWN0IHRoZSBET00uIFRoZXJlZm9yZSwgdGhlIHF1ZXVlIHNlcnZpY2UgdGFrZXMgYWxsIGFjdGlvbnMsIHB1dHMgdGhlbSBpbiBhIHF1ZXVlLCBhbmRcbiAqIHByb2Nlc3NlcyB0aGVtIGF0IHRoZSByaWdodCB0aW1lICh3aGljaCBpcyB3aGVuIHRoZSBwcmV2aW91cyBhY3Rpb24gaGFzIGJlZW4gcHJvY2Vzc2VkIHN1Y2Nlc3NmdWxseSkuXG4gKlxuICogVGVjaG5pY2FsIHNpZGVub3RlOlxuICogQW4gYWN0aW9uIGxvb2tzIHByZXR0eSBzaW1pbGFyIHRvIHRoZSBvbmVzIHdpdGhpbiB0aGUgRmx1eCAvIFJlZHV4IHBhdHRlcm4uXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOb3RpZmllclF1ZXVlU2VydmljZSB7XG4gIC8qKlxuICAgKiBTdHJlYW0gb2YgYWN0aW9ucywgc3Vic2NyaWJhYmxlIGZyb20gb3V0c2lkZVxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGFjdGlvblN0cmVhbTogU3ViamVjdDxOb3RpZmllckFjdGlvbj47XG5cbiAgLyoqXG4gICAqIFF1ZXVlIG9mIGFjdGlvbnNcbiAgICovXG4gIHByaXZhdGUgYWN0aW9uUXVldWU6IEFycmF5PE5vdGlmaWVyQWN0aW9uPjtcblxuICAvKipcbiAgICogRmxhZywgdHJ1ZSBpZiBzb21lIGFjdGlvbiBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3NcbiAgICovXG4gIHByaXZhdGUgaXNBY3Rpb25JblByb2dyZXNzOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYWN0aW9uU3RyZWFtID0gbmV3IFN1YmplY3Q8Tm90aWZpZXJBY3Rpb24+KCk7XG4gICAgdGhpcy5hY3Rpb25RdWV1ZSA9IFtdO1xuICAgIHRoaXMuaXNBY3Rpb25JblByb2dyZXNzID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogUHVzaCBhIG5ldyBhY3Rpb24gdG8gdGhlIHF1ZXVlLCBhbmQgdHJ5IHRvIHJ1biBpdFxuICAgKlxuICAgKiBAcGFyYW0gYWN0aW9uIEFjdGlvbiBvYmplY3RcbiAgICovXG4gIHB1YmxpYyBwdXNoKGFjdGlvbjogTm90aWZpZXJBY3Rpb24pOiB2b2lkIHtcbiAgICB0aGlzLmFjdGlvblF1ZXVlLnB1c2goYWN0aW9uKTtcbiAgICB0aGlzLnRyeVRvUnVuTmV4dEFjdGlvbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnRpbnVlIHdpdGggdGhlIG5leHQgYWN0aW9uIChjYWxsZWQgd2hlbiB0aGUgY3VycmVudCBhY3Rpb24gaXMgZmluaXNoZWQpXG4gICAqL1xuICBwdWJsaWMgY29udGludWUoKTogdm9pZCB7XG4gICAgdGhpcy5pc0FjdGlvbkluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICB0aGlzLnRyeVRvUnVuTmV4dEFjdGlvbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyeSB0byBydW4gdGhlIG5leHQgYWN0aW9uIGluIHRoZSBxdWV1ZTsgd2Ugc2tpcCBpZiB0aGVyZSBhbHJlYWR5IGlzIHNvbWUgYWN0aW9uIGluIHByb2dyZXNzLCBvciBpZiB0aGVyZSBpcyBubyBhY3Rpb24gbGVmdFxuICAgKi9cbiAgcHJpdmF0ZSB0cnlUb1J1bk5leHRBY3Rpb24oKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNBY3Rpb25JblByb2dyZXNzIHx8IHRoaXMuYWN0aW9uUXVldWUubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47IC8vIFNraXAgKHRoZSBxdWV1ZSBjYW4gbm93IGdvIGRyaW5rIGEgY29mZmVlIGFzIGl0IGhhcyBub3RoaW5nIHRvIGRvIGFueW1vcmUpXG4gICAgfVxuICAgIHRoaXMuaXNBY3Rpb25JblByb2dyZXNzID0gdHJ1ZTtcbiAgICB0aGlzLmFjdGlvblN0cmVhbS5uZXh0KHRoaXMuYWN0aW9uUXVldWUuc2hpZnQoKSk7IC8vIFB1c2ggbmV4dCBhY3Rpb24gdG8gdGhlIHN0cmVhbSwgYW5kIHJlbW92ZSB0aGUgY3VycmVudCBhY3Rpb24gZnJvbSB0aGUgcXVldWVcbiAgfVxufVxuIl19