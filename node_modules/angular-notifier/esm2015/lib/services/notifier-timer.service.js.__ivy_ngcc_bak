import { Injectable } from '@angular/core';
/**
 * Notifier timer service
 *
 * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a
 * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.
 */
export class NotifierTimerService {
    /**
     * Constructor
     */
    constructor() {
        this.now = 0;
        this.remaining = 0;
    }
    /**
     * Start (or resume) the timer
     *
     * @param   duration Timer duration, in ms
     * @returns          Promise, resolved once the timer finishes
     */
    start(duration) {
        return new Promise((resolve) => {
            // For the first run ...
            this.remaining = duration;
            // Setup, then start the timer
            this.finishPromiseResolver = resolve;
            this.continue();
        });
    }
    /**
     * Pause the timer
     */
    pause() {
        clearTimeout(this.timerId);
        this.remaining -= new Date().getTime() - this.now;
    }
    /**
     * Continue the timer
     */
    continue() {
        this.now = new Date().getTime();
        this.timerId = window.setTimeout(() => {
            this.finish();
        }, this.remaining);
    }
    /**
     * Stop the timer
     */
    stop() {
        clearTimeout(this.timerId);
        this.remaining = 0;
    }
    /**
     * Finish up the timeout by resolving the timer promise
     */
    finish() {
        this.finishPromiseResolver();
    }
}
NotifierTimerService.decorators = [
    { type: Injectable }
];
NotifierTimerService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItdGltZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItbm90aWZpZXIvc3JjL2xpYi9zZXJ2aWNlcy9ub3RpZmllci10aW1lci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0M7Ozs7O0dBS0c7QUFFSCxNQUFNLE9BQU8sb0JBQW9CO0lBcUIvQjs7T0FFRztJQUNIO1FBQ0UsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDYixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxLQUFLLENBQUMsUUFBZ0I7UUFDM0IsT0FBTyxJQUFJLE9BQU8sQ0FBTyxDQUFDLE9BQW1CLEVBQUUsRUFBRTtZQUMvQyx3QkFBd0I7WUFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7WUFFMUIsOEJBQThCO1lBQzlCLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxPQUFPLENBQUM7WUFDckMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2xCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0ksS0FBSztRQUNWLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDcEQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksUUFBUTtRQUNiLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ3BDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNoQixDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7T0FFRztJQUNJLElBQUk7UUFDVCxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7T0FFRztJQUNLLE1BQU07UUFDWixJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUMvQixDQUFDOzs7WUE5RUYsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBOb3RpZmllciB0aW1lciBzZXJ2aWNlXG4gKlxuICogVGhpcyBzZXJ2aWNlIGFjdHMgYXMgYSB0aW1lciwgbmVlZGVkIGR1ZSB0byB0aGUgc3RpbGwgcmF0aGVyIGxpbWl0ZWQgc2V0VGltZW91dCBKYXZhU2NyaXB0IEFQSS4gVGhlIHRpbWVyIHNlcnZpY2UgY2FuIHN0YXJ0IGFuZCBzdG9wIGFcbiAqIHRpbWVyLiBGdXJ0aGVybW9yZSwgaXQgY2FuIGFsc28gcGF1c2UgdGhlIHRpbWVyIGF0IGFueSB0aW1lLCBhbmQgcmVzdW1lIGxhdGVyIG9uLiBUaGUgdGltZXIgQVBJIHdvcmtkIHByb21pc2UtYmFzZWQuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOb3RpZmllclRpbWVyU2VydmljZSB7XG4gIC8qKlxuICAgKiBUaW1lc3RhbXAgKGluIG1zKSwgY3JlYXRlZCBpbiB0aGUgbW9tZW50IHRoZSB0aW1lciBzdGFydHNcbiAgICovXG4gIHByaXZhdGUgbm93OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFJlbWFpbmluZyB0aW1lIChpbiBtcylcbiAgICovXG4gIHByaXZhdGUgcmVtYWluaW5nOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRpbWVvdXQgSUQsIHVzZWQgZm9yIGNsZWFyaW5nIHRoZSB0aW1lb3V0IGxhdGVyIG9uXG4gICAqL1xuICBwcml2YXRlIHRpbWVySWQ6IG51bWJlcjtcblxuICAvKipcbiAgICogUHJvbWlzZSByZXNvbHZlIGZ1bmN0aW9uLCBldmVudHVhbGx5IGdldHRpbmcgY2FsbGVkIG9uY2UgdGhlIHRpbWVyIGZpbmlzaGVzXG4gICAqL1xuICBwcml2YXRlIGZpbmlzaFByb21pc2VSZXNvbHZlcjogKCkgPT4gdm9pZDtcblxuICAvKipcbiAgICogQ29uc3RydWN0b3JcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm5vdyA9IDA7XG4gICAgdGhpcy5yZW1haW5pbmcgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IChvciByZXN1bWUpIHRoZSB0aW1lclxuICAgKlxuICAgKiBAcGFyYW0gICBkdXJhdGlvbiBUaW1lciBkdXJhdGlvbiwgaW4gbXNcbiAgICogQHJldHVybnMgICAgICAgICAgUHJvbWlzZSwgcmVzb2x2ZWQgb25jZSB0aGUgdGltZXIgZmluaXNoZXNcbiAgICovXG4gIHB1YmxpYyBzdGFydChkdXJhdGlvbjogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlOiAoKSA9PiB2b2lkKSA9PiB7XG4gICAgICAvLyBGb3IgdGhlIGZpcnN0IHJ1biAuLi5cbiAgICAgIHRoaXMucmVtYWluaW5nID0gZHVyYXRpb247XG5cbiAgICAgIC8vIFNldHVwLCB0aGVuIHN0YXJ0IHRoZSB0aW1lclxuICAgICAgdGhpcy5maW5pc2hQcm9taXNlUmVzb2x2ZXIgPSByZXNvbHZlO1xuICAgICAgdGhpcy5jb250aW51ZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhdXNlIHRoZSB0aW1lclxuICAgKi9cbiAgcHVibGljIHBhdXNlKCk6IHZvaWQge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVySWQpO1xuICAgIHRoaXMucmVtYWluaW5nIC09IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gdGhpcy5ub3c7XG4gIH1cblxuICAvKipcbiAgICogQ29udGludWUgdGhlIHRpbWVyXG4gICAqL1xuICBwdWJsaWMgY29udGludWUoKTogdm9pZCB7XG4gICAgdGhpcy5ub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICB0aGlzLnRpbWVySWQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmZpbmlzaCgpO1xuICAgIH0sIHRoaXMucmVtYWluaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wIHRoZSB0aW1lclxuICAgKi9cbiAgcHVibGljIHN0b3AoKTogdm9pZCB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXJJZCk7XG4gICAgdGhpcy5yZW1haW5pbmcgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmlzaCB1cCB0aGUgdGltZW91dCBieSByZXNvbHZpbmcgdGhlIHRpbWVyIHByb21pc2VcbiAgICovXG4gIHByaXZhdGUgZmluaXNoKCk6IHZvaWQge1xuICAgIHRoaXMuZmluaXNoUHJvbWlzZVJlc29sdmVyKCk7XG4gIH1cbn1cbiJdfQ==