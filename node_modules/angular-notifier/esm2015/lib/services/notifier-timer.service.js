import { Injectable } from '@angular/core';
/**
 * Notifier timer service
 *
 * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a
 * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.
 */
import * as ɵngcc0 from '@angular/core';
export class NotifierTimerService {
    /**
     * Constructor
     */
    constructor() {
        this.now = 0;
        this.remaining = 0;
    }
    /**
     * Start (or resume) the timer
     *
     * @param   duration Timer duration, in ms
     * @returns          Promise, resolved once the timer finishes
     */
    start(duration) {
        return new Promise((resolve) => {
            // For the first run ...
            this.remaining = duration;
            // Setup, then start the timer
            this.finishPromiseResolver = resolve;
            this.continue();
        });
    }
    /**
     * Pause the timer
     */
    pause() {
        clearTimeout(this.timerId);
        this.remaining -= new Date().getTime() - this.now;
    }
    /**
     * Continue the timer
     */
    continue() {
        this.now = new Date().getTime();
        this.timerId = window.setTimeout(() => {
            this.finish();
        }, this.remaining);
    }
    /**
     * Stop the timer
     */
    stop() {
        clearTimeout(this.timerId);
        this.remaining = 0;
    }
    /**
     * Finish up the timeout by resolving the timer promise
     */
    finish() {
        this.finishPromiseResolver();
    }
}
NotifierTimerService.ɵfac = function NotifierTimerService_Factory(t) { return new (t || NotifierTimerService)(); };
NotifierTimerService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NotifierTimerService, factory: NotifierTimerService.ɵfac });
NotifierTimerService.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NotifierTimerService, [{
        type: Injectable
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItdGltZXIuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1ub3RpZmllci9zcmMvbGliL3NlcnZpY2VzL25vdGlmaWVyLXRpbWVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSCxNQUFNLE9BQU8sb0JBQW9CO0FBQ2pDLElBb0JFO0FBQ0Y7QUFDRSxPQUFHO0FBQ0wsSUFBRTtBQUFnQixRQUNkLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQ2pCLFFBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7QUFDdkIsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0U7QUFDRTtBQUNFO0FBRUosT0FERztBQUNMLElBQVMsS0FBSyxDQUFDLFFBQWdCO0FBQUksUUFDL0IsT0FBTyxJQUFJLE9BQU8sQ0FBTyxDQUFDLE9BQW1CLEVBQUUsRUFBRTtBQUNyRCxZQUFNLHdCQUF3QjtBQUM5QixZQUFNLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO0FBQ2hDLFlBQ00sOEJBQThCO0FBQ3BDLFlBQU0sSUFBSSxDQUFDLHFCQUFxQixHQUFHLE9BQU8sQ0FBQztBQUMzQyxZQUFNLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUN0QixRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0UsT0FBRztBQUNMLElBQVMsS0FBSztBQUFLLFFBQ2YsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMvQixRQUFJLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO0FBQ3RELElBQUUsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUFTLFFBQVE7QUFBSyxRQUNsQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDcEMsUUFBSSxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFO0FBQzFDLFlBQU0sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ3BCLFFBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN2QixJQUFFLENBQUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRSxPQUFHO0FBQ0wsSUFBUyxJQUFJO0FBQUssUUFDZCxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQy9CLFFBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7QUFDdkIsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0UsT0FBRztBQUNMLElBQVUsTUFBTTtBQUFLLFFBQ2pCLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0FBQ2pDLElBQUUsQ0FBQztBQUNIO2dEQS9FQyxVQUFVOzRIQUNUO0FBQUM7OztnREFFSztBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIE5vdGlmaWVyIHRpbWVyIHNlcnZpY2VcbiAqXG4gKiBUaGlzIHNlcnZpY2UgYWN0cyBhcyBhIHRpbWVyLCBuZWVkZWQgZHVlIHRvIHRoZSBzdGlsbCByYXRoZXIgbGltaXRlZCBzZXRUaW1lb3V0IEphdmFTY3JpcHQgQVBJLiBUaGUgdGltZXIgc2VydmljZSBjYW4gc3RhcnQgYW5kIHN0b3AgYVxuICogdGltZXIuIEZ1cnRoZXJtb3JlLCBpdCBjYW4gYWxzbyBwYXVzZSB0aGUgdGltZXIgYXQgYW55IHRpbWUsIGFuZCByZXN1bWUgbGF0ZXIgb24uIFRoZSB0aW1lciBBUEkgd29ya2QgcHJvbWlzZS1iYXNlZC5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5vdGlmaWVyVGltZXJTZXJ2aWNlIHtcbiAgLyoqXG4gICAqIFRpbWVzdGFtcCAoaW4gbXMpLCBjcmVhdGVkIGluIHRoZSBtb21lbnQgdGhlIHRpbWVyIHN0YXJ0c1xuICAgKi9cbiAgcHJpdmF0ZSBub3c6IG51bWJlcjtcblxuICAvKipcbiAgICogUmVtYWluaW5nIHRpbWUgKGluIG1zKVxuICAgKi9cbiAgcHJpdmF0ZSByZW1haW5pbmc6IG51bWJlcjtcblxuICAvKipcbiAgICogVGltZW91dCBJRCwgdXNlZCBmb3IgY2xlYXJpbmcgdGhlIHRpbWVvdXQgbGF0ZXIgb25cbiAgICovXG4gIHByaXZhdGUgdGltZXJJZDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBQcm9taXNlIHJlc29sdmUgZnVuY3Rpb24sIGV2ZW50dWFsbHkgZ2V0dGluZyBjYWxsZWQgb25jZSB0aGUgdGltZXIgZmluaXNoZXNcbiAgICovXG4gIHByaXZhdGUgZmluaXNoUHJvbWlzZVJlc29sdmVyOiAoKSA9PiB2b2lkO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubm93ID0gMDtcbiAgICB0aGlzLnJlbWFpbmluZyA9IDA7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgKG9yIHJlc3VtZSkgdGhlIHRpbWVyXG4gICAqXG4gICAqIEBwYXJhbSAgIGR1cmF0aW9uIFRpbWVyIGR1cmF0aW9uLCBpbiBtc1xuICAgKiBAcmV0dXJucyAgICAgICAgICBQcm9taXNlLCByZXNvbHZlZCBvbmNlIHRoZSB0aW1lciBmaW5pc2hlc1xuICAgKi9cbiAgcHVibGljIHN0YXJ0KGR1cmF0aW9uOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmU6ICgpID0+IHZvaWQpID0+IHtcbiAgICAgIC8vIEZvciB0aGUgZmlyc3QgcnVuIC4uLlxuICAgICAgdGhpcy5yZW1haW5pbmcgPSBkdXJhdGlvbjtcblxuICAgICAgLy8gU2V0dXAsIHRoZW4gc3RhcnQgdGhlIHRpbWVyXG4gICAgICB0aGlzLmZpbmlzaFByb21pc2VSZXNvbHZlciA9IHJlc29sdmU7XG4gICAgICB0aGlzLmNvbnRpbnVlKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUGF1c2UgdGhlIHRpbWVyXG4gICAqL1xuICBwdWJsaWMgcGF1c2UoKTogdm9pZCB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXJJZCk7XG4gICAgdGhpcy5yZW1haW5pbmcgLT0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSB0aGlzLm5vdztcbiAgfVxuXG4gIC8qKlxuICAgKiBDb250aW51ZSB0aGUgdGltZXJcbiAgICovXG4gIHB1YmxpYyBjb250aW51ZSgpOiB2b2lkIHtcbiAgICB0aGlzLm5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIHRoaXMudGltZXJJZCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuZmluaXNoKCk7XG4gICAgfSwgdGhpcy5yZW1haW5pbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3AgdGhlIHRpbWVyXG4gICAqL1xuICBwdWJsaWMgc3RvcCgpOiB2b2lkIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcklkKTtcbiAgICB0aGlzLnJlbWFpbmluZyA9IDA7XG4gIH1cblxuICAvKipcbiAgICogRmluaXNoIHVwIHRoZSB0aW1lb3V0IGJ5IHJlc29sdmluZyB0aGUgdGltZXIgcHJvbWlzZVxuICAgKi9cbiAgcHJpdmF0ZSBmaW5pc2goKTogdm9pZCB7XG4gICAgdGhpcy5maW5pc2hQcm9taXNlUmVzb2x2ZXIoKTtcbiAgfVxufVxuIl19