import { Injectable } from '@angular/core';
import { fade } from '../animation-presets/fade.animation-preset';
import { slide } from '../animation-presets/slide.animation-preset';
/**
 * Notifier animation service
 */
export class NotifierAnimationService {
    /**
     * Constructor
     */
    constructor() {
        this.animationPresets = {
            fade,
            slide,
        };
    }
    /**
     * Get animation data
     *
     * This method generates all data the Web Animations API needs to animate our notification. The result depends on both the animation
     * direction (either in or out) as well as the notifications (and its attributes) itself.
     *
     * @param   direction    Animation direction, either in or out
     * @param   notification Notification the animation data should be generated for
     * @returns Animation information
     */
    getAnimationData(direction, notification) {
        // Get all necessary animation data
        let keyframes;
        let duration;
        let easing;
        if (direction === 'show') {
            keyframes = this.animationPresets[notification.component.getConfig().animations.show.preset].show(notification);
            duration = notification.component.getConfig().animations.show.speed;
            easing = notification.component.getConfig().animations.show.easing;
        }
        else {
            keyframes = this.animationPresets[notification.component.getConfig().animations.hide.preset].hide(notification);
            duration = notification.component.getConfig().animations.hide.speed;
            easing = notification.component.getConfig().animations.hide.easing;
        }
        // Build and return animation data
        return {
            keyframes: [keyframes.from, keyframes.to],
            options: {
                duration,
                easing,
                fill: 'forwards',
            },
        };
    }
}
NotifierAnimationService.decorators = [
    { type: Injectable }
];
NotifierAnimationService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItYW5pbWF0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLW5vdGlmaWVyL3NyYy9saWIvc2VydmljZXMvbm90aWZpZXItYW5pbWF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDbEUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBSXBFOztHQUVHO0FBRUgsTUFBTSxPQUFPLHdCQUF3QjtJQVFuQzs7T0FFRztJQUNIO1FBQ0UsSUFBSSxDQUFDLGdCQUFnQixHQUFHO1lBQ3RCLElBQUk7WUFDSixLQUFLO1NBQ04sQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7Ozs7O09BU0c7SUFDSSxnQkFBZ0IsQ0FBQyxTQUEwQixFQUFFLFlBQWtDO1FBQ3BGLG1DQUFtQztRQUNuQyxJQUFJLFNBQTJDLENBQUM7UUFDaEQsSUFBSSxRQUFnQixDQUFDO1FBQ3JCLElBQUksTUFBYyxDQUFDO1FBQ25CLElBQUksU0FBUyxLQUFLLE1BQU0sRUFBRTtZQUN4QixTQUFTLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDaEgsUUFBUSxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDcEUsTUFBTSxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDcEU7YUFBTTtZQUNMLFNBQVMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUNoSCxRQUFRLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUNwRSxNQUFNLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUNwRTtRQUVELGtDQUFrQztRQUNsQyxPQUFPO1lBQ0wsU0FBUyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsRUFBRSxDQUFDO1lBQ3pDLE9BQU8sRUFBRTtnQkFDUCxRQUFRO2dCQUNSLE1BQU07Z0JBQ04sSUFBSSxFQUFFLFVBQVU7YUFDakI7U0FDRixDQUFDO0lBQ0osQ0FBQzs7O1lBckRGLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGZhZGUgfSBmcm9tICcuLi9hbmltYXRpb24tcHJlc2V0cy9mYWRlLmFuaW1hdGlvbi1wcmVzZXQnO1xuaW1wb3J0IHsgc2xpZGUgfSBmcm9tICcuLi9hbmltYXRpb24tcHJlc2V0cy9zbGlkZS5hbmltYXRpb24tcHJlc2V0JztcbmltcG9ydCB7IE5vdGlmaWVyQW5pbWF0aW9uRGF0YSwgTm90aWZpZXJBbmltYXRpb25QcmVzZXQsIE5vdGlmaWVyQW5pbWF0aW9uUHJlc2V0S2V5ZnJhbWVzIH0gZnJvbSAnLi4vbW9kZWxzL25vdGlmaWVyLWFuaW1hdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBOb3RpZmllck5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL21vZGVscy9ub3RpZmllci1ub3RpZmljYXRpb24ubW9kZWwnO1xuXG4vKipcbiAqIE5vdGlmaWVyIGFuaW1hdGlvbiBzZXJ2aWNlXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOb3RpZmllckFuaW1hdGlvblNlcnZpY2Uge1xuICAvKipcbiAgICogTGlzdCBvZiBhbmltYXRpb24gcHJlc2V0cyAoY3VycmVudGx5IHN0YXRpYylcbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgYW5pbWF0aW9uUHJlc2V0czoge1xuICAgIFthbmltYXRpb25QcmVzZXROYW1lOiBzdHJpbmddOiBOb3RpZmllckFuaW1hdGlvblByZXNldDtcbiAgfTtcblxuICAvKipcbiAgICogQ29uc3RydWN0b3JcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmFuaW1hdGlvblByZXNldHMgPSB7XG4gICAgICBmYWRlLFxuICAgICAgc2xpZGUsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYW5pbWF0aW9uIGRhdGFcbiAgICpcbiAgICogVGhpcyBtZXRob2QgZ2VuZXJhdGVzIGFsbCBkYXRhIHRoZSBXZWIgQW5pbWF0aW9ucyBBUEkgbmVlZHMgdG8gYW5pbWF0ZSBvdXIgbm90aWZpY2F0aW9uLiBUaGUgcmVzdWx0IGRlcGVuZHMgb24gYm90aCB0aGUgYW5pbWF0aW9uXG4gICAqIGRpcmVjdGlvbiAoZWl0aGVyIGluIG9yIG91dCkgYXMgd2VsbCBhcyB0aGUgbm90aWZpY2F0aW9ucyAoYW5kIGl0cyBhdHRyaWJ1dGVzKSBpdHNlbGYuXG4gICAqXG4gICAqIEBwYXJhbSAgIGRpcmVjdGlvbiAgICBBbmltYXRpb24gZGlyZWN0aW9uLCBlaXRoZXIgaW4gb3Igb3V0XG4gICAqIEBwYXJhbSAgIG5vdGlmaWNhdGlvbiBOb3RpZmljYXRpb24gdGhlIGFuaW1hdGlvbiBkYXRhIHNob3VsZCBiZSBnZW5lcmF0ZWQgZm9yXG4gICAqIEByZXR1cm5zIEFuaW1hdGlvbiBpbmZvcm1hdGlvblxuICAgKi9cbiAgcHVibGljIGdldEFuaW1hdGlvbkRhdGEoZGlyZWN0aW9uOiAnc2hvdycgfCAnaGlkZScsIG5vdGlmaWNhdGlvbjogTm90aWZpZXJOb3RpZmljYXRpb24pOiBOb3RpZmllckFuaW1hdGlvbkRhdGEge1xuICAgIC8vIEdldCBhbGwgbmVjZXNzYXJ5IGFuaW1hdGlvbiBkYXRhXG4gICAgbGV0IGtleWZyYW1lczogTm90aWZpZXJBbmltYXRpb25QcmVzZXRLZXlmcmFtZXM7XG4gICAgbGV0IGR1cmF0aW9uOiBudW1iZXI7XG4gICAgbGV0IGVhc2luZzogc3RyaW5nO1xuICAgIGlmIChkaXJlY3Rpb24gPT09ICdzaG93Jykge1xuICAgICAga2V5ZnJhbWVzID0gdGhpcy5hbmltYXRpb25QcmVzZXRzW25vdGlmaWNhdGlvbi5jb21wb25lbnQuZ2V0Q29uZmlnKCkuYW5pbWF0aW9ucy5zaG93LnByZXNldF0uc2hvdyhub3RpZmljYXRpb24pO1xuICAgICAgZHVyYXRpb24gPSBub3RpZmljYXRpb24uY29tcG9uZW50LmdldENvbmZpZygpLmFuaW1hdGlvbnMuc2hvdy5zcGVlZDtcbiAgICAgIGVhc2luZyA9IG5vdGlmaWNhdGlvbi5jb21wb25lbnQuZ2V0Q29uZmlnKCkuYW5pbWF0aW9ucy5zaG93LmVhc2luZztcbiAgICB9IGVsc2Uge1xuICAgICAga2V5ZnJhbWVzID0gdGhpcy5hbmltYXRpb25QcmVzZXRzW25vdGlmaWNhdGlvbi5jb21wb25lbnQuZ2V0Q29uZmlnKCkuYW5pbWF0aW9ucy5oaWRlLnByZXNldF0uaGlkZShub3RpZmljYXRpb24pO1xuICAgICAgZHVyYXRpb24gPSBub3RpZmljYXRpb24uY29tcG9uZW50LmdldENvbmZpZygpLmFuaW1hdGlvbnMuaGlkZS5zcGVlZDtcbiAgICAgIGVhc2luZyA9IG5vdGlmaWNhdGlvbi5jb21wb25lbnQuZ2V0Q29uZmlnKCkuYW5pbWF0aW9ucy5oaWRlLmVhc2luZztcbiAgICB9XG5cbiAgICAvLyBCdWlsZCBhbmQgcmV0dXJuIGFuaW1hdGlvbiBkYXRhXG4gICAgcmV0dXJuIHtcbiAgICAgIGtleWZyYW1lczogW2tleWZyYW1lcy5mcm9tLCBrZXlmcmFtZXMudG9dLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgZWFzaW5nLFxuICAgICAgICBmaWxsOiAnZm9yd2FyZHMnLCAvLyBLZWVwIHRoZSBuZXdseSBwYWludGVkIHN0YXRlIGFmdGVyIHRoZSBhbmltYXRpb24gZmluaXNoZWRcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxufVxuIl19