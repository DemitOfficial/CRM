import { Inject, Injectable } from '@angular/core';
import { NotifierConfig } from '../models/notifier-config.model';
import { NotifierConfigToken } from '../notifier.tokens';
import { NotifierQueueService } from './notifier-queue.service';
/**
 * Notifier service
 *
 * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building
 * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into
 * actions, which then get thrown into the action queue - eventually being processed at the right moment.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './notifier-queue.service';
import * as ɵngcc2 from '../models/notifier-config.model';
export class NotifierService {
    /**
     * Constructor
     *
     * @param notifierQueueService Notifier queue service
     * @param config               Notifier configuration, optionally injected as a dependency
     */
    constructor(notifierQueueService, config) {
        this.queueService = notifierQueueService;
        this.config = config;
    }
    /**
     * Get the notifier configuration
     *
     * @returns Notifier configuration
     */
    getConfig() {
        return this.config;
    }
    /**
     * API: Show a new notification
     *
     * @param notificationOptions Notification options
     */
    show(notificationOptions) {
        this.queueService.push({
            payload: notificationOptions,
            type: 'SHOW',
        });
    }
    /**
     * API: Hide a specific notification, given its ID
     *
     * @param notificationId ID of the notification to hide
     */
    hide(notificationId) {
        this.queueService.push({
            payload: notificationId,
            type: 'HIDE',
        });
    }
    /**
     * API: Hide the newest notification
     */
    hideNewest() {
        this.queueService.push({
            type: 'HIDE_NEWEST',
        });
    }
    /**
     * API: Hide the oldest notification
     */
    hideOldest() {
        this.queueService.push({
            type: 'HIDE_OLDEST',
        });
    }
    /**
     * API: Hide all notifications at once
     */
    hideAll() {
        this.queueService.push({
            type: 'HIDE_ALL',
        });
    }
    /**
     * API: Shortcut for showing a new notification
     *
     * @param type             Type of the notification
     * @param message          Message of the notification
     * @param [notificationId] Unique ID for the notification (optional)
     */
    notify(type, message, notificationId) {
        const notificationOptions = {
            message,
            type,
        };
        if (notificationId !== undefined) {
            notificationOptions.id = notificationId;
        }
        this.show(notificationOptions);
    }
}
NotifierService.ɵfac = function NotifierService_Factory(t) { return new (t || NotifierService)(ɵngcc0.ɵɵinject(ɵngcc1.NotifierQueueService), ɵngcc0.ɵɵinject(NotifierConfigToken)); };
NotifierService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NotifierService, factory: NotifierService.ɵfac });
NotifierService.ctorParameters = () => [
    { type: NotifierQueueService },
    { type: NotifierConfig, decorators: [{ type: Inject, args: [NotifierConfigToken,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NotifierService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.NotifierQueueService }, { type: ɵngcc2.NotifierConfig, decorators: [{
                type: Inject,
                args: [NotifierConfigToken]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXIuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1ub3RpZmllci9zcmMvbGliL3NlcnZpY2VzL25vdGlmaWVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRWpFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRWhFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7Ozs7QUFFSCxNQUFNLE9BQU8sZUFBZTtBQUM1QixJQVVFO0FBQ0Y7QUFDRTtBQUNFO0FBQ0U7QUFFSixPQURHO0FBQ0wsSUFBRSxZQUFtQixvQkFBMEMsRUFBK0IsTUFBc0I7QUFDcEgsUUFBSSxJQUFJLENBQUMsWUFBWSxHQUFHLG9CQUFvQixDQUFDO0FBQzdDLFFBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDekIsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0U7QUFDRTtBQUVKLE9BREs7QUFDTCxJQUFTLFNBQVM7QUFBSyxRQUNuQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDdkIsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0U7QUFDRTtBQUVKLE9BREs7QUFDTCxJQUFTLElBQUksQ0FBQyxtQkFBZ0Q7QUFBSSxRQUM5RCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztBQUMzQixZQUFNLE9BQU8sRUFBRSxtQkFBbUI7QUFDbEMsWUFBTSxJQUFJLEVBQUUsTUFBTTtBQUNsQixTQUFLLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFO0FBQ0U7QUFFSixPQURLO0FBQ0wsSUFBUyxJQUFJLENBQUMsY0FBc0I7QUFBSSxRQUNwQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztBQUMzQixZQUFNLE9BQU8sRUFBRSxjQUFjO0FBQzdCLFlBQU0sSUFBSSxFQUFFLE1BQU07QUFDbEIsU0FBSyxDQUFDLENBQUM7QUFDUCxJQUFFLENBQUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRSxPQUFHO0FBQ0wsSUFBUyxVQUFVO0FBQUssUUFDcEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7QUFDM0IsWUFBTSxJQUFJLEVBQUUsYUFBYTtBQUN6QixTQUFLLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUFTLFVBQVU7QUFBSyxRQUNwQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztBQUMzQixZQUFNLElBQUksRUFBRSxhQUFhO0FBQ3pCLFNBQUssQ0FBQyxDQUFDO0FBQ1AsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0UsT0FBRztBQUNMLElBQVMsT0FBTztBQUFLLFFBQ2pCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO0FBQzNCLFlBQU0sSUFBSSxFQUFFLFVBQVU7QUFDdEIsU0FBSyxDQUFDLENBQUM7QUFDUCxJQUFFLENBQUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRTtBQUNFO0FBQ0U7QUFDRTtBQUVKLE9BREM7QUFDTCxJQUFTLE1BQU0sQ0FBQyxJQUFZLEVBQUUsT0FBZSxFQUFFLGNBQXVCO0FBQUksUUFDdEUsTUFBTSxtQkFBbUIsR0FBZ0M7QUFDN0QsWUFBTSxPQUFPO0FBQ2IsWUFBTSxJQUFJO0FBQ1YsU0FBSyxDQUFDO0FBQ04sUUFBSSxJQUFJLGNBQWMsS0FBSyxTQUFTLEVBQUU7QUFDdEMsWUFBTSxtQkFBbUIsQ0FBQyxFQUFFLEdBQUcsY0FBYyxDQUFDO0FBQzlDLFNBQUs7QUFDTCxRQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUNuQyxJQUFFLENBQUM7QUFDSDsyQ0FwR0MsVUFBVTs2R0FDVDtBQUFDO0FBRUksWUFaRSxvQkFBb0I7QUFBSSxZQUh4QixjQUFjLHVCQThCMkMsTUFBTSxTQUFDLG1CQUFtQjtBQUFROzs7Ozs7a0NBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOb3RpZmllckNvbmZpZyB9IGZyb20gJy4uL21vZGVscy9ub3RpZmllci1jb25maWcubW9kZWwnO1xuaW1wb3J0IHsgTm90aWZpZXJOb3RpZmljYXRpb25PcHRpb25zIH0gZnJvbSAnLi4vbW9kZWxzL25vdGlmaWVyLW5vdGlmaWNhdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBOb3RpZmllckNvbmZpZ1Rva2VuIH0gZnJvbSAnLi4vbm90aWZpZXIudG9rZW5zJztcbmltcG9ydCB7IE5vdGlmaWVyUXVldWVTZXJ2aWNlIH0gZnJvbSAnLi9ub3RpZmllci1xdWV1ZS5zZXJ2aWNlJztcblxuLyoqXG4gKiBOb3RpZmllciBzZXJ2aWNlXG4gKlxuICogVGhpcyBzZXJ2aWNlIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgcHVibGljIG5vdGlmaWVyIEFQSS4gT25jZSBpbmplY3RlZCBpbnRvIGEgY29tcG9uZW50LCBkaXJlY3RpdmUsIHBpcGUsIHNlcnZpY2UsIG9yIGFueSBvdGhlciBidWlsZGluZ1xuICogYmxvY2sgb2YgYW4gYXBwbGljYXRpb25zLCBpdCBjYW4gYmUgdXNlZCB0byBzaG93IG5ldyBub3RpZmljYXRpb25zLCBhbmQgaGlkZSBleGlzdGluZyBvbmVzLiBJbnRlcm5hbGx5LCBpdCB0cmFuc2Zvcm1zIEFQSSBjYWxscyBpbnRvXG4gKiBhY3Rpb25zLCB3aGljaCB0aGVuIGdldCB0aHJvd24gaW50byB0aGUgYWN0aW9uIHF1ZXVlIC0gZXZlbnR1YWxseSBiZWluZyBwcm9jZXNzZWQgYXQgdGhlIHJpZ2h0IG1vbWVudC5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5vdGlmaWVyU2VydmljZSB7XG4gIC8qKlxuICAgKiBOb3RpZmllciBxdWV1ZSBzZXJ2aWNlXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IHF1ZXVlU2VydmljZTogTm90aWZpZXJRdWV1ZVNlcnZpY2U7XG5cbiAgLyoqXG4gICAqIE5vdGlmaWVyIGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgY29uZmlnOiBOb3RpZmllckNvbmZpZztcblxuICAvKipcbiAgICogQ29uc3RydWN0b3JcbiAgICpcbiAgICogQHBhcmFtIG5vdGlmaWVyUXVldWVTZXJ2aWNlIE5vdGlmaWVyIHF1ZXVlIHNlcnZpY2VcbiAgICogQHBhcmFtIGNvbmZpZyAgICAgICAgICAgICAgIE5vdGlmaWVyIGNvbmZpZ3VyYXRpb24sIG9wdGlvbmFsbHkgaW5qZWN0ZWQgYXMgYSBkZXBlbmRlbmN5XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3Iobm90aWZpZXJRdWV1ZVNlcnZpY2U6IE5vdGlmaWVyUXVldWVTZXJ2aWNlLCBASW5qZWN0KE5vdGlmaWVyQ29uZmlnVG9rZW4pIGNvbmZpZzogTm90aWZpZXJDb25maWcpIHtcbiAgICB0aGlzLnF1ZXVlU2VydmljZSA9IG5vdGlmaWVyUXVldWVTZXJ2aWNlO1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbm90aWZpZXIgY29uZmlndXJhdGlvblxuICAgKlxuICAgKiBAcmV0dXJucyBOb3RpZmllciBjb25maWd1cmF0aW9uXG4gICAqL1xuICBwdWJsaWMgZ2V0Q29uZmlnKCk6IE5vdGlmaWVyQ29uZmlnIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWc7XG4gIH1cblxuICAvKipcbiAgICogQVBJOiBTaG93IGEgbmV3IG5vdGlmaWNhdGlvblxuICAgKlxuICAgKiBAcGFyYW0gbm90aWZpY2F0aW9uT3B0aW9ucyBOb3RpZmljYXRpb24gb3B0aW9uc1xuICAgKi9cbiAgcHVibGljIHNob3cobm90aWZpY2F0aW9uT3B0aW9uczogTm90aWZpZXJOb3RpZmljYXRpb25PcHRpb25zKTogdm9pZCB7XG4gICAgdGhpcy5xdWV1ZVNlcnZpY2UucHVzaCh7XG4gICAgICBwYXlsb2FkOiBub3RpZmljYXRpb25PcHRpb25zLFxuICAgICAgdHlwZTogJ1NIT1cnLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFQSTogSGlkZSBhIHNwZWNpZmljIG5vdGlmaWNhdGlvbiwgZ2l2ZW4gaXRzIElEXG4gICAqXG4gICAqIEBwYXJhbSBub3RpZmljYXRpb25JZCBJRCBvZiB0aGUgbm90aWZpY2F0aW9uIHRvIGhpZGVcbiAgICovXG4gIHB1YmxpYyBoaWRlKG5vdGlmaWNhdGlvbklkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnF1ZXVlU2VydmljZS5wdXNoKHtcbiAgICAgIHBheWxvYWQ6IG5vdGlmaWNhdGlvbklkLFxuICAgICAgdHlwZTogJ0hJREUnLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFQSTogSGlkZSB0aGUgbmV3ZXN0IG5vdGlmaWNhdGlvblxuICAgKi9cbiAgcHVibGljIGhpZGVOZXdlc3QoKTogdm9pZCB7XG4gICAgdGhpcy5xdWV1ZVNlcnZpY2UucHVzaCh7XG4gICAgICB0eXBlOiAnSElERV9ORVdFU1QnLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFQSTogSGlkZSB0aGUgb2xkZXN0IG5vdGlmaWNhdGlvblxuICAgKi9cbiAgcHVibGljIGhpZGVPbGRlc3QoKTogdm9pZCB7XG4gICAgdGhpcy5xdWV1ZVNlcnZpY2UucHVzaCh7XG4gICAgICB0eXBlOiAnSElERV9PTERFU1QnLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFQSTogSGlkZSBhbGwgbm90aWZpY2F0aW9ucyBhdCBvbmNlXG4gICAqL1xuICBwdWJsaWMgaGlkZUFsbCgpOiB2b2lkIHtcbiAgICB0aGlzLnF1ZXVlU2VydmljZS5wdXNoKHtcbiAgICAgIHR5cGU6ICdISURFX0FMTCcsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQVBJOiBTaG9ydGN1dCBmb3Igc2hvd2luZyBhIG5ldyBub3RpZmljYXRpb25cbiAgICpcbiAgICogQHBhcmFtIHR5cGUgICAgICAgICAgICAgVHlwZSBvZiB0aGUgbm90aWZpY2F0aW9uXG4gICAqIEBwYXJhbSBtZXNzYWdlICAgICAgICAgIE1lc3NhZ2Ugb2YgdGhlIG5vdGlmaWNhdGlvblxuICAgKiBAcGFyYW0gW25vdGlmaWNhdGlvbklkXSBVbmlxdWUgSUQgZm9yIHRoZSBub3RpZmljYXRpb24gKG9wdGlvbmFsKVxuICAgKi9cbiAgcHVibGljIG5vdGlmeSh0eXBlOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgbm90aWZpY2F0aW9uSWQ/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCBub3RpZmljYXRpb25PcHRpb25zOiBOb3RpZmllck5vdGlmaWNhdGlvbk9wdGlvbnMgPSB7XG4gICAgICBtZXNzYWdlLFxuICAgICAgdHlwZSxcbiAgICB9O1xuICAgIGlmIChub3RpZmljYXRpb25JZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBub3RpZmljYXRpb25PcHRpb25zLmlkID0gbm90aWZpY2F0aW9uSWQ7XG4gICAgfVxuICAgIHRoaXMuc2hvdyhub3RpZmljYXRpb25PcHRpb25zKTtcbiAgfVxufVxuIl19