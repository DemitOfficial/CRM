import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, Renderer2 } from '@angular/core';
import { NotifierService } from '../services/notifier.service';
import { NotifierAnimationService } from '../services/notifier-animation.service';
import { NotifierTimerService } from '../services/notifier-timer.service';
/**
 * Notifier notification component
 * -------------------------------
 * This component is responsible for actually displaying the notification on screen. In addition, it's able to show and hide this
 * notification, in particular to animate this notification in and out, as well as shift (move) this notification vertically around.
 * Furthermore, the notification component handles all interactions the user has with this notification / component, such as clicks and
 * mouse movements.
 */
export class NotifierNotificationComponent {
    /**
     * Constructor
     *
     * @param elementRef               Reference to the component's element
     * @param renderer                 Angular renderer
     * @param notifierService          Notifier service
     * @param notifierTimerService     Notifier timer service
     * @param notifierAnimationService Notifier animation service
     */
    constructor(elementRef, renderer, notifierService, notifierTimerService, notifierAnimationService) {
        this.config = notifierService.getConfig();
        this.ready = new EventEmitter();
        this.dismiss = new EventEmitter();
        this.timerService = notifierTimerService;
        this.animationService = notifierAnimationService;
        this.renderer = renderer;
        this.element = elementRef.nativeElement;
        this.elementShift = 0;
    }
    /**
     * Component after view init lifecycle hook, setts up the component and then emits the ready event
     */
    ngAfterViewInit() {
        this.setup();
        this.elementHeight = this.element.offsetHeight;
        this.elementWidth = this.element.offsetWidth;
        this.ready.emit(this);
    }
    /**
     * Get the notifier config
     *
     * @returns Notifier configuration
     */
    getConfig() {
        return this.config;
    }
    /**
     * Get notification element height (in px)
     *
     * @returns Notification element height (in px)
     */
    getHeight() {
        return this.elementHeight;
    }
    /**
     * Get notification element width (in px)
     *
     * @returns Notification element height (in px)
     */
    getWidth() {
        return this.elementWidth;
    }
    /**
     * Get notification shift offset (in px)
     *
     * @returns Notification element shift offset (in px)
     */
    getShift() {
        return this.elementShift;
    }
    /**
     * Show (animate in) this notification
     *
     * @returns Promise, resolved when done
     */
    show() {
        return new Promise((resolve) => {
            // Are animations enabled?
            if (this.config.animations.enabled && this.config.animations.show.speed > 0) {
                // Get animation data
                const animationData = this.animationService.getAnimationData('show', this.notification);
                // Set initial styles (styles before animation), prevents quick flicker when animation starts
                const animatedProperties = Object.keys(animationData.keyframes[0]);
                for (let i = animatedProperties.length - 1; i >= 0; i--) {
                    this.renderer.setStyle(this.element, animatedProperties[i], animationData.keyframes[0][animatedProperties[i]]);
                }
                // Animate notification in
                this.renderer.setStyle(this.element, 'visibility', 'visible');
                const animation = this.element.animate(animationData.keyframes, animationData.options);
                animation.onfinish = () => {
                    this.startAutoHideTimer();
                    resolve(); // Done
                };
            }
            else {
                // Show notification
                this.renderer.setStyle(this.element, 'visibility', 'visible');
                this.startAutoHideTimer();
                resolve(); // Done
            }
        });
    }
    /**
     * Hide (animate out) this notification
     *
     * @returns Promise, resolved when done
     */
    hide() {
        return new Promise((resolve) => {
            this.stopAutoHideTimer();
            // Are animations enabled?
            if (this.config.animations.enabled && this.config.animations.hide.speed > 0) {
                const animationData = this.animationService.getAnimationData('hide', this.notification);
                const animation = this.element.animate(animationData.keyframes, animationData.options);
                animation.onfinish = () => {
                    resolve(); // Done
                };
            }
            else {
                resolve(); // Done
            }
        });
    }
    /**
     * Shift (move) this notification
     *
     * @param   distance         Distance to shift (in px)
     * @param   shiftToMakePlace Flag, defining in which direction to shift
     * @returns Promise, resolved when done
     */
    shift(distance, shiftToMakePlace) {
        return new Promise((resolve) => {
            // Calculate new position (position after the shift)
            let newElementShift;
            if ((this.config.position.vertical.position === 'top' && shiftToMakePlace) ||
                (this.config.position.vertical.position === 'bottom' && !shiftToMakePlace)) {
                newElementShift = this.elementShift + distance + this.config.position.vertical.gap;
            }
            else {
                newElementShift = this.elementShift - distance - this.config.position.vertical.gap;
            }
            const horizontalPosition = this.config.position.horizontal.position === 'middle' ? '-50%' : '0';
            // Are animations enabled?
            if (this.config.animations.enabled && this.config.animations.shift.speed > 0) {
                const animationData = {
                    // TODO: Extract into animation service
                    keyframes: [
                        {
                            transform: `translate3d( ${horizontalPosition}, ${this.elementShift}px, 0 )`,
                        },
                        {
                            transform: `translate3d( ${horizontalPosition}, ${newElementShift}px, 0 )`,
                        },
                    ],
                    options: {
                        duration: this.config.animations.shift.speed,
                        easing: this.config.animations.shift.easing,
                        fill: 'forwards',
                    },
                };
                this.elementShift = newElementShift;
                const animation = this.element.animate(animationData.keyframes, animationData.options);
                animation.onfinish = () => {
                    resolve(); // Done
                };
            }
            else {
                this.renderer.setStyle(this.element, 'transform', `translate3d( ${horizontalPosition}, ${newElementShift}px, 0 )`);
                this.elementShift = newElementShift;
                resolve(); // Done
            }
        });
    }
    /**
     * Handle click on dismiss button
     */
    onClickDismiss() {
        this.dismiss.emit(this.notification.id);
    }
    /**
     * Handle mouseover over notification area
     */
    onNotificationMouseover() {
        if (this.config.behaviour.onMouseover === 'pauseAutoHide') {
            this.pauseAutoHideTimer();
        }
        else if (this.config.behaviour.onMouseover === 'resetAutoHide') {
            this.stopAutoHideTimer();
        }
    }
    /**
     * Handle mouseout from notification area
     */
    onNotificationMouseout() {
        if (this.config.behaviour.onMouseover === 'pauseAutoHide') {
            this.continueAutoHideTimer();
        }
        else if (this.config.behaviour.onMouseover === 'resetAutoHide') {
            this.startAutoHideTimer();
        }
    }
    /**
     * Handle click on notification area
     */
    onNotificationClick() {
        if (this.config.behaviour.onClick === 'hide') {
            this.onClickDismiss();
        }
    }
    /**
     * Start the auto hide timer (if enabled)
     */
    startAutoHideTimer() {
        if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {
            this.timerService.start(this.config.behaviour.autoHide).then(() => {
                this.onClickDismiss();
            });
        }
    }
    /**
     * Pause the auto hide timer (if enabled)
     */
    pauseAutoHideTimer() {
        if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {
            this.timerService.pause();
        }
    }
    /**
     * Continue the auto hide timer (if enabled)
     */
    continueAutoHideTimer() {
        if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {
            this.timerService.continue();
        }
    }
    /**
     * Stop the auto hide timer (if enabled)
     */
    stopAutoHideTimer() {
        if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {
            this.timerService.stop();
        }
    }
    /**
     * Initial notification setup
     */
    setup() {
        // Set start position (initially the exact same for every new notification)
        if (this.config.position.horizontal.position === 'left') {
            this.renderer.setStyle(this.element, 'left', `${this.config.position.horizontal.distance}px`);
        }
        else if (this.config.position.horizontal.position === 'right') {
            this.renderer.setStyle(this.element, 'right', `${this.config.position.horizontal.distance}px`);
        }
        else {
            this.renderer.setStyle(this.element, 'left', '50%');
            // Let's get the GPU handle some work as well (#perfmatters)
            this.renderer.setStyle(this.element, 'transform', 'translate3d( -50%, 0, 0 )');
        }
        if (this.config.position.vertical.position === 'top') {
            this.renderer.setStyle(this.element, 'top', `${this.config.position.vertical.distance}px`);
        }
        else {
            this.renderer.setStyle(this.element, 'bottom', `${this.config.position.vertical.distance}px`);
        }
        // Add classes (responsible for visual design)
        this.renderer.addClass(this.element, `notifier__notification--${this.notification.type}`);
        this.renderer.addClass(this.element, `notifier__notification--${this.config.theme}`);
    }
}
NotifierNotificationComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '(click)': 'onNotificationClick()',
                    '(mouseout)': 'onNotificationMouseout()',
                    '(mouseover)': 'onNotificationMouseover()',
                    class: 'notifier__notification',
                },
                providers: [
                    // We provide the timer to the component's local injector, so that every notification components gets its own
                    // instance of the timer service, thus running their timers independently from each other
                    NotifierTimerService,
                ],
                selector: 'notifier-notification',
                template: "<ng-container\n  *ngIf=\"notification.template; else predefinedNotification\"\n  [ngTemplateOutlet]=\"notification.template\"\n  [ngTemplateOutletContext]=\"{ notification: notification }\"\n>\n</ng-container>\n\n<ng-template #predefinedNotification>\n  <p class=\"notifier__notification-message\">{{ notification.message }}</p>\n  <button\n    class=\"notifier__notification-button\"\n    type=\"button\"\n    title=\"dismiss\"\n    *ngIf=\"config.behaviour.showDismissButton\"\n    (click)=\"onClickDismiss()\"\n  >\n    <svg class=\"notifier__notification-button-icon\" viewBox=\"0 0 24 24\" width=\"20\" height=\"20\">\n      <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\n    </svg>\n  </button>\n</ng-template>\n"
            },] }
];
NotifierNotificationComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NotifierService },
    { type: NotifierTimerService },
    { type: NotifierAnimationService }
];
NotifierNotificationComponent.propDecorators = {
    notification: [{ type: Input }],
    ready: [{ type: Output }],
    dismiss: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItbm90aWZpY2F0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItbm90aWZpZXIvc3JjL2xpYi9jb21wb25lbnRzL25vdGlmaWVyLW5vdGlmaWNhdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFpQix1QkFBdUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUt0SSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDL0QsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDbEYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFFMUU7Ozs7Ozs7R0FPRztBQWlCSCxNQUFNLE9BQU8sNkJBQTZCO0lBMkR4Qzs7Ozs7Ozs7T0FRRztJQUNILFlBQ0UsVUFBc0IsRUFDdEIsUUFBbUIsRUFDbkIsZUFBZ0MsRUFDaEMsb0JBQTBDLEVBQzFDLHdCQUFrRDtRQUVsRCxJQUFJLENBQUMsTUFBTSxHQUFHLGVBQWUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUMxQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksWUFBWSxFQUFpQyxDQUFDO1FBQy9ELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUMxQyxJQUFJLENBQUMsWUFBWSxHQUFHLG9CQUFvQixDQUFDO1FBQ3pDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyx3QkFBd0IsQ0FBQztRQUNqRCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFDeEMsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFD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RSxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxJQUFJLENBQUMsQ0FBQztTQUMvRjtRQUVELDhDQUE4QztRQUM5QyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLDJCQUEyQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDMUYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSwyQkFBMkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7OztZQWxXRixTQUFTLFNBQUM7Z0JBQ1QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLElBQUksRUFBRTtvQkFDSixTQUFTLEVBQUUsdUJBQXVCO29CQUNsQyxZQUFZLEVBQUUsMEJBQTBCO29CQUN4QyxhQUFhLEVBQUUsMkJBQTJCO29CQUMxQyxLQUFLLEVBQUUsd0JBQXdCO2lCQUNoQztnQkFDRCxTQUFTLEVBQUU7b0JBQ1QsNkdBQTZHO29CQUM3Ryx5RkFBeUY7b0JBQ3pGLG9CQUFvQjtpQkFDckI7Z0JBQ0QsUUFBUSxFQUFFLHVCQUF1QjtnQkFDakMsaXlCQUFxRDthQUN0RDs7O1lBaEMyRCxVQUFVO1lBQStCLFNBQVM7WUFLckcsZUFBZTtZQUVmLG9CQUFvQjtZQURwQix3QkFBd0I7OzsyQkErQjlCLEtBQUs7b0JBTUwsTUFBTTtzQkFNTixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTm90aWZpZXJBbmltYXRpb25EYXRhIH0gZnJvbSAnLi4vbW9kZWxzL25vdGlmaWVyLWFuaW1hdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBOb3RpZmllckNvbmZpZyB9IGZyb20gJy4uL21vZGVscy9ub3RpZmllci1jb25maWcubW9kZWwnO1xuaW1wb3J0IHsgTm90aWZpZXJOb3RpZmljYXRpb24gfSBmcm9tICcuLi9tb2RlbHMvbm90aWZpZXItbm90aWZpY2F0aW9uLm1vZGVsJztcbmltcG9ydCB7IE5vdGlmaWVyU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL25vdGlmaWVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTm90aWZpZXJBbmltYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvbm90aWZpZXItYW5pbWF0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgTm90aWZpZXJUaW1lclNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9ub3RpZmllci10aW1lci5zZXJ2aWNlJztcblxuLyoqXG4gKiBOb3RpZmllciBub3RpZmljYXRpb24gY29tcG9uZW50XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUaGlzIGNvbXBvbmVudCBpcyByZXNwb25zaWJsZSBmb3IgYWN0dWFsbHkgZGlzcGxheWluZyB0aGUgbm90aWZpY2F0aW9uIG9uIHNjcmVlbi4gSW4gYWRkaXRpb24sIGl0J3MgYWJsZSB0byBzaG93IGFuZCBoaWRlIHRoaXNcbiAqIG5vdGlmaWNhdGlvbiwgaW4gcGFydGljdWxhciB0byBhbmltYXRlIHRoaXMgbm90aWZpY2F0aW9uIGluIGFuZCBvdXQsIGFzIHdlbGwgYXMgc2hpZnQgKG1vdmUpIHRoaXMgbm90aWZpY2F0aW9uIHZlcnRpY2FsbHkgYXJvdW5kLlxuICogRnVydGhlcm1vcmUsIHRoZSBub3RpZmljYXRpb24gY29tcG9uZW50IGhhbmRsZXMgYWxsIGludGVyYWN0aW9ucyB0aGUgdXNlciBoYXMgd2l0aCB0aGlzIG5vdGlmaWNhdGlvbiAvIGNvbXBvbmVudCwgc3VjaCBhcyBjbGlja3MgYW5kXG4gKiBtb3VzZSBtb3ZlbWVudHMuXG4gKi9cbkBDb21wb25lbnQoe1xuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCwgLy8gKCNwZXJmbWF0dGVycylcbiAgaG9zdDoge1xuICAgICcoY2xpY2spJzogJ29uTm90aWZpY2F0aW9uQ2xpY2soKScsXG4gICAgJyhtb3VzZW91dCknOiAnb25Ob3RpZmljYXRpb25Nb3VzZW91dCgpJyxcbiAgICAnKG1vdXNlb3ZlciknOiAnb25Ob3RpZmljYXRpb25Nb3VzZW92ZXIoKScsXG4gICAgY2xhc3M6ICdub3RpZmllcl9fbm90aWZpY2F0aW9uJyxcbiAgfSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgLy8gV2UgcHJvdmlkZSB0aGUgdGltZXIgdG8gdGhlIGNvbXBvbmVudCdzIGxvY2FsIGluamVjdG9yLCBzbyB0aGF0IGV2ZXJ5IG5vdGlmaWNhdGlvbiBjb21wb25lbnRzIGdldHMgaXRzIG93blxuICAgIC8vIGluc3RhbmNlIG9mIHRoZSB0aW1lciBzZXJ2aWNlLCB0aHVzIHJ1bm5pbmcgdGhlaXIgdGltZXJzIGluZGVwZW5kZW50bHkgZnJvbSBlYWNoIG90aGVyXG4gICAgTm90aWZpZXJUaW1lclNlcnZpY2UsXG4gIF0sXG4gIHNlbGVjdG9yOiAnbm90aWZpZXItbm90aWZpY2F0aW9uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL25vdGlmaWVyLW5vdGlmaWNhdGlvbi5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIE5vdGlmaWVyTm90aWZpY2F0aW9uQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gIC8qKlxuICAgKiBJbnB1dDogTm90aWZpY2F0aW9uIG9iamVjdCwgY29udGFpbnMgYWxsIGRldGFpbHMgbmVjZXNzYXJ5IHRvIGNvbnN0cnVjdCB0aGUgbm90aWZpY2F0aW9uXG4gICAqL1xuICBASW5wdXQoKVxuICBwdWJsaWMgbm90aWZpY2F0aW9uOiBOb3RpZmllck5vdGlmaWNhdGlvbjtcblxuICAvKipcbiAgICogT3V0cHV0OiBSZWFkeSBldmVudCwgaGFuZGxlcyB0aGUgaW5pdGlhbGl6YXRpb24gc3VjY2VzcyBieSBlbWl0dGluZyBhIHJlZmVyZW5jZSB0byB0aGlzIG5vdGlmaWNhdGlvbiBjb21wb25lbnRcbiAgICovXG4gIEBPdXRwdXQoKVxuICBwdWJsaWMgcmVhZHk6IEV2ZW50RW1pdHRlcjxOb3RpZmllck5vdGlmaWNhdGlvbkNvbXBvbmVudD47XG5cbiAgLyoqXG4gICAqIE91dHB1dDogRGlzbWlzcyBldmVudCwgaGFuZGxlcyB0aGUgY2xpY2sgb24gdGhlIGRpc21pc3MgYnV0dG9uIGJ5IGVtaXR0aW5nIHRoZSBub3RpZmljYXRpb24gSUQgb2YgdGhpcyBub3RpZmljYXRpb24gY29tcG9uZW50XG4gICAqL1xuICBAT3V0cHV0KClcbiAgcHVibGljIGRpc21pc3M6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBOb3RpZmllciBjb25maWd1cmF0aW9uXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgY29uZmlnOiBOb3RpZmllckNvbmZpZztcblxuICAvKipcbiAgICogTm90aWZpZXIgdGltZXIgc2VydmljZVxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSB0aW1lclNlcnZpY2U6IE5vdGlmaWVyVGltZXJTZXJ2aWNlO1xuXG4gIC8qKlxuICAgKiBOb3RpZmllciBhbmltYXRpb24gc2VydmljZVxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBhbmltYXRpb25TZXJ2aWNlOiBOb3RpZmllckFuaW1hdGlvblNlcnZpY2U7XG5cbiAgLyoqXG4gICAqIEFuZ3VsYXIgcmVuZGVyZXIsIHVzZWQgdG8gcHJlc2VydmUgdGhlIG92ZXJhbGwgRE9NIGFic3RyYWN0aW9uICYgaW5kZXBlbmRlbmNlXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IHJlbmRlcmVyOiBSZW5kZXJlcjI7XG5cbiAgLyoqXG4gICAqIE5hdGl2ZSBlbGVtZW50IHJlZmVyZW5jZSwgdXNlZCBmb3IgbWFuaXB1bGF0aW5nIERPTSBwcm9wZXJ0aWVzXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuXG4gIC8qKlxuICAgKiBDdXJyZW50IG5vdGlmaWNhdGlvbiBoZWlnaHQsIGNhbGN1bGF0ZWQgYW5kIGNhY2hlZCBoZXJlICgjcGVyZm1hdHRlcnMpXG4gICAqL1xuICBwcml2YXRlIGVsZW1lbnRIZWlnaHQ6IG51bWJlcjtcblxuICAvKipcbiAgICogQ3VycmVudCBub3RpZmljYXRpb24gd2lkdGgsIGNhbGN1bGF0ZWQgYW5kIGNhY2hlZCBoZXJlICgjcGVyZm1hdHRlcnMpXG4gICAqL1xuICBwcml2YXRlIGVsZW1lbnRXaWR0aDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBDdXJyZW50IG5vdGlmaWNhdGlvbiBzaGlmdCwgY2FsY3VsYXRlZCBhbmQgY2FjaGVkIGhlcmUgKCNwZXJmbWF0dGVycylcbiAgICovXG4gIHByaXZhdGUgZWxlbWVudFNoaWZ0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSBlbGVtZW50UmVmICAgICAgICAgICAgICAgUmVmZXJlbmNlIHRvIHRoZSBjb21wb25lbnQncyBlbGVtZW50XG4gICAqIEBwYXJhbSByZW5kZXJlciAgICAgICAgICAgICAgICAgQW5ndWxhciByZW5kZXJlclxuICAgKiBAcGFyYW0gbm90aWZpZXJTZXJ2aWNlICAgICAgICAgIE5vdGlmaWVyIHNlcnZpY2VcbiAgICogQHBhcmFtIG5vdGlmaWVyVGltZXJTZXJ2aWNlICAgICBOb3RpZmllciB0aW1lciBzZXJ2aWNlXG4gICAqIEBwYXJhbSBub3RpZmllckFuaW1hdGlvblNlcnZpY2UgTm90aWZpZXIgYW5pbWF0aW9uIHNlcnZpY2VcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgbm90aWZpZXJTZXJ2aWNlOiBOb3RpZmllclNlcnZpY2UsXG4gICAgbm90aWZpZXJUaW1lclNlcnZpY2U6IE5vdGlmaWVyVGltZXJTZXJ2aWNlLFxuICAgIG5vdGlmaWVyQW5pbWF0aW9uU2VydmljZTogTm90aWZpZXJBbmltYXRpb25TZXJ2aWNlLFxuICApIHtcbiAgICB0aGlzLmNvbmZpZyA9IG5vdGlmaWVyU2VydmljZS5nZXRDb25maWcoKTtcbiAgICB0aGlzLnJlYWR5ID0gbmV3IEV2ZW50RW1pdHRlcjxOb3RpZmllck5vdGlmaWNhdGlvbkNvbXBvbmVudD4oKTtcbiAgICB0aGlzLmRpc21pc3MgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcbiAgICB0aGlzLnRpbWVyU2VydmljZSA9IG5vdGlmaWVyVGltZXJTZXJ2aWNlO1xuICAgIHRoaXMuYW5pbWF0aW9uU2VydmljZSA9IG5vdGlmaWVyQW5pbWF0aW9uU2VydmljZTtcbiAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICAgIHRoaXMuZWxlbWVudFNoaWZ0ID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wb25lbnQgYWZ0ZXIgdmlldyBpbml0IGxpZmVjeWNsZSBob29rLCBzZXR0cyB1cCB0aGUgY29tcG9uZW50IGFuZCB0aGVuIGVtaXRzIHRoZSByZWFkeSBldmVudFxuICAgKi9cbiAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnNldHVwKCk7XG4gICAgdGhpcy5lbGVtZW50SGVpZ2h0ID0gdGhpcy5lbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICB0aGlzLmVsZW1lbnRXaWR0aCA9IHRoaXMuZWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICB0aGlzLnJlYWR5LmVtaXQodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBub3RpZmllciBjb25maWdcbiAgICpcbiAgICogQHJldHVybnMgTm90aWZpZXIgY29uZmlndXJhdGlvblxuICAgKi9cbiAgcHVibGljIGdldENvbmZpZygpOiBOb3RpZmllckNvbmZpZyB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBub3RpZmljYXRpb24gZWxlbWVudCBoZWlnaHQgKGluIHB4KVxuICAgKlxuICAgKiBAcmV0dXJucyBOb3RpZmljYXRpb24gZWxlbWVudCBoZWlnaHQgKGluIHB4KVxuICAgKi9cbiAgcHVibGljIGdldEhlaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRIZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICogR2V0IG5vdGlmaWNhdGlvbiBlbGVtZW50IHdpZHRoIChpbiBweClcbiAgICpcbiAgICogQHJldHVybnMgTm90aWZpY2F0aW9uIGVsZW1lbnQgaGVpZ2h0IChpbiBweClcbiAgICovXG4gIHB1YmxpYyBnZXRXaWR0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRXaWR0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgbm90aWZpY2F0aW9uIHNoaWZ0IG9mZnNldCAoaW4gcHgpXG4gICAqXG4gICAqIEByZXR1cm5zIE5vdGlmaWNhdGlvbiBlbGVtZW50IHNoaWZ0IG9mZnNldCAoaW4gcHgpXG4gICAqL1xuICBwdWJsaWMgZ2V0U2hpZnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50U2hpZnQ7XG4gIH1cblxuICAvKipcbiAgICogU2hvdyAoYW5pbWF0ZSBpbikgdGhpcyBub3RpZmljYXRpb25cbiAgICpcbiAgICogQHJldHVybnMgUHJvbWlzZSwgcmVzb2x2ZWQgd2hlbiBkb25lXG4gICAqL1xuICBwdWJsaWMgc2hvdygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmU6ICgpID0+IHZvaWQpID0+IHtcbiAgICAgIC8vIEFyZSBhbmltYXRpb25zIGVuYWJsZWQ/XG4gICAgICBpZiAodGhpcy5jb25maWcuYW5pbWF0aW9ucy5lbmFibGVkICYmIHRoaXMuY29uZmlnLmFuaW1hdGlvbnMuc2hvdy5zcGVlZCA+IDApIHtcbiAgICAgICAgLy8gR2V0IGFuaW1hdGlvbiBkYXRhXG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbkRhdGE6IE5vdGlmaWVyQW5pbWF0aW9uRGF0YSA9IHRoaXMuYW5pbWF0aW9uU2VydmljZS5nZXRBbmltYXRpb25EYXRhKCdzaG93JywgdGhpcy5ub3RpZmljYXRpb24pO1xuXG4gICAgICAgIC8vIFNldCBpbml0aWFsIHN0eWxlcyAoc3R5bGVzIGJlZm9yZSBhbmltYXRpb24pLCBwcmV2ZW50cyBxdWljayBmbGlja2VyIHdoZW4gYW5pbWF0aW9uIHN0YXJ0c1xuICAgICAgICBjb25zdCBhbmltYXRlZFByb3BlcnRpZXM6IEFycmF5PHN0cmluZz4gPSBPYmplY3Qua2V5cyhhbmltYXRpb25EYXRhLmtleWZyYW1lc1swXSk7XG4gICAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IGFuaW1hdGVkUHJvcGVydGllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbGVtZW50LCBhbmltYXRlZFByb3BlcnRpZXNbaV0sIGFuaW1hdGlvbkRhdGEua2V5ZnJhbWVzWzBdW2FuaW1hdGVkUHJvcGVydGllc1tpXV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQW5pbWF0ZSBub3RpZmljYXRpb24gaW5cbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsZW1lbnQsICd2aXNpYmlsaXR5JywgJ3Zpc2libGUnKTtcbiAgICAgICAgY29uc3QgYW5pbWF0aW9uOiBBbmltYXRpb24gPSB0aGlzLmVsZW1lbnQuYW5pbWF0ZShhbmltYXRpb25EYXRhLmtleWZyYW1lcywgYW5pbWF0aW9uRGF0YS5vcHRpb25zKTtcbiAgICAgICAgYW5pbWF0aW9uLm9uZmluaXNoID0gKCkgPT4ge1xuICAgICAgICAgIHRoaXMuc3RhcnRBdXRvSGlkZVRpbWVyKCk7XG4gICAgICAgICAgcmVzb2x2ZSgpOyAvLyBEb25lXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTaG93IG5vdGlmaWNhdGlvblxuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWxlbWVudCwgJ3Zpc2liaWxpdHknLCAndmlzaWJsZScpO1xuICAgICAgICB0aGlzLnN0YXJ0QXV0b0hpZGVUaW1lcigpO1xuICAgICAgICByZXNvbHZlKCk7IC8vIERvbmVcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIaWRlIChhbmltYXRlIG91dCkgdGhpcyBub3RpZmljYXRpb25cbiAgICpcbiAgICogQHJldHVybnMgUHJvbWlzZSwgcmVzb2x2ZWQgd2hlbiBkb25lXG4gICAqL1xuICBwdWJsaWMgaGlkZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmU6ICgpID0+IHZvaWQpID0+IHtcbiAgICAgIHRoaXMuc3RvcEF1dG9IaWRlVGltZXIoKTtcblxuICAgICAgLy8gQXJlIGFuaW1hdGlvbnMgZW5hYmxlZD9cbiAgICAgIGlmICh0aGlzLmNvbmZpZy5hbmltYXRpb25zLmVuYWJsZWQgJiYgdGhpcy5jb25maWcuYW5pbWF0aW9ucy5oaWRlLnNwZWVkID4gMCkge1xuICAgICAgICBjb25zdCBhbmltYXRpb25EYXRhOiBOb3RpZmllckFuaW1hdGlvbkRhdGEgPSB0aGlzLmFuaW1hdGlvblNlcnZpY2UuZ2V0QW5pbWF0aW9uRGF0YSgnaGlkZScsIHRoaXMubm90aWZpY2F0aW9uKTtcbiAgICAgICAgY29uc3QgYW5pbWF0aW9uOiBBbmltYXRpb24gPSB0aGlzLmVsZW1lbnQuYW5pbWF0ZShhbmltYXRpb25EYXRhLmtleWZyYW1lcywgYW5pbWF0aW9uRGF0YS5vcHRpb25zKTtcbiAgICAgICAgYW5pbWF0aW9uLm9uZmluaXNoID0gKCkgPT4ge1xuICAgICAgICAgIHJlc29sdmUoKTsgLy8gRG9uZVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZSgpOyAvLyBEb25lXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2hpZnQgKG1vdmUpIHRoaXMgbm90aWZpY2F0aW9uXG4gICAqXG4gICAqIEBwYXJhbSAgIGRpc3RhbmNlICAgICAgICAgRGlzdGFuY2UgdG8gc2hpZnQgKGluIHB4KVxuICAgKiBAcGFyYW0gICBzaGlmdFRvTWFrZVBsYWNlIEZsYWcsIGRlZmluaW5nIGluIHdoaWNoIGRpcmVjdGlvbiB0byBzaGlmdFxuICAgKiBAcmV0dXJucyBQcm9taXNlLCByZXNvbHZlZCB3aGVuIGRvbmVcbiAgICovXG4gIHB1YmxpYyBzaGlmdChkaXN0YW5jZTogbnVtYmVyLCBzaGlmdFRvTWFrZVBsYWNlOiBib29sZWFuKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlOiAoKSA9PiB2b2lkKSA9PiB7XG4gICAgICAvLyBDYWxjdWxhdGUgbmV3IHBvc2l0aW9uIChwb3NpdGlvbiBhZnRlciB0aGUgc2hpZnQpXG4gICAgICBsZXQgbmV3RWxlbWVudFNoaWZ0OiBudW1iZXI7XG4gICAgICBpZiAoXG4gICAgICAgICh0aGlzLmNvbmZpZy5wb3NpdGlvbi52ZXJ0aWNhbC5wb3NpdGlvbiA9PT0gJ3RvcCcgJiYgc2hpZnRUb01ha2VQbGFjZSkgfHxcbiAgICAgICAgKHRoaXMuY29uZmlnLnBvc2l0aW9uLnZlcnRpY2FsLnBvc2l0aW9uID09PSAnYm90dG9tJyAmJiAhc2hpZnRUb01ha2VQbGFjZSlcbiAgICAgICkge1xuICAgICAgICBuZXdFbGVtZW50U2hpZnQgPSB0aGlzLmVsZW1lbnRTaGlmdCArIGRpc3RhbmNlICsgdGhpcy5jb25maWcucG9zaXRpb24udmVydGljYWwuZ2FwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3RWxlbWVudFNoaWZ0ID0gdGhpcy5lbGVtZW50U2hpZnQgLSBkaXN0YW5jZSAtIHRoaXMuY29uZmlnLnBvc2l0aW9uLnZlcnRpY2FsLmdhcDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGhvcml6b250YWxQb3NpdGlvbjogc3RyaW5nID0gdGhpcy5jb25maWcucG9zaXRpb24uaG9yaXpvbnRhbC5wb3NpdGlvbiA9PT0gJ21pZGRsZScgPyAnLTUwJScgOiAnMCc7XG5cbiAgICAgIC8vIEFyZSBhbmltYXRpb25zIGVuYWJsZWQ/XG4gICAgICBpZiAodGhpcy5jb25maWcuYW5pbWF0aW9ucy5lbmFibGVkICYmIHRoaXMuY29uZmlnLmFuaW1hdGlvbnMuc2hpZnQuc3BlZWQgPiAwKSB7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbkRhdGE6IE5vdGlmaWVyQW5pbWF0aW9uRGF0YSA9IHtcbiAgICAgICAgICAvLyBUT0RPOiBFeHRyYWN0IGludG8gYW5pbWF0aW9uIHNlcnZpY2VcbiAgICAgICAgICBrZXlmcmFtZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlM2QoICR7aG9yaXpvbnRhbFBvc2l0aW9ufSwgJHt0aGlzLmVsZW1lbnRTaGlmdH1weCwgMCApYCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZTNkKCAke2hvcml6b250YWxQb3NpdGlvbn0sICR7bmV3RWxlbWVudFNoaWZ0fXB4LCAwIClgLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIGR1cmF0aW9uOiB0aGlzLmNvbmZpZy5hbmltYXRpb25zLnNoaWZ0LnNwZWVkLFxuICAgICAgICAgICAgZWFzaW5nOiB0aGlzLmNvbmZpZy5hbmltYXRpb25zLnNoaWZ0LmVhc2luZyxcbiAgICAgICAgICAgIGZpbGw6ICdmb3J3YXJkcycsXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5lbGVtZW50U2hpZnQgPSBuZXdFbGVtZW50U2hpZnQ7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbjogQW5pbWF0aW9uID0gdGhpcy5lbGVtZW50LmFuaW1hdGUoYW5pbWF0aW9uRGF0YS5rZXlmcmFtZXMsIGFuaW1hdGlvbkRhdGEub3B0aW9ucyk7XG4gICAgICAgIGFuaW1hdGlvbi5vbmZpbmlzaCA9ICgpID0+IHtcbiAgICAgICAgICByZXNvbHZlKCk7IC8vIERvbmVcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbGVtZW50LCAndHJhbnNmb3JtJywgYHRyYW5zbGF0ZTNkKCAke2hvcml6b250YWxQb3NpdGlvbn0sICR7bmV3RWxlbWVudFNoaWZ0fXB4LCAwIClgKTtcbiAgICAgICAgdGhpcy5lbGVtZW50U2hpZnQgPSBuZXdFbGVtZW50U2hpZnQ7XG4gICAgICAgIHJlc29sdmUoKTsgLy8gRG9uZVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBjbGljayBvbiBkaXNtaXNzIGJ1dHRvblxuICAgKi9cbiAgcHVibGljIG9uQ2xpY2tEaXNtaXNzKCk6IHZvaWQge1xuICAgIHRoaXMuZGlzbWlzcy5lbWl0KHRoaXMubm90aWZpY2F0aW9uLmlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgbW91c2VvdmVyIG92ZXIgbm90aWZpY2F0aW9uIGFyZWFcbiAgICovXG4gIHB1YmxpYyBvbk5vdGlmaWNhdGlvbk1vdXNlb3ZlcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jb25maWcuYmVoYXZpb3VyLm9uTW91c2VvdmVyID09PSAncGF1c2VBdXRvSGlkZScpIHtcbiAgICAgIHRoaXMucGF1c2VBdXRvSGlkZVRpbWVyKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmNvbmZpZy5iZWhhdmlvdXIub25Nb3VzZW92ZXIgPT09ICdyZXNldEF1dG9IaWRlJykge1xuICAgICAgdGhpcy5zdG9wQXV0b0hpZGVUaW1lcigpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgbW91c2VvdXQgZnJvbSBub3RpZmljYXRpb24gYXJlYVxuICAgKi9cbiAgcHVibGljIG9uTm90aWZpY2F0aW9uTW91c2VvdXQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuY29uZmlnLmJlaGF2aW91ci5vbk1vdXNlb3ZlciA9PT0gJ3BhdXNlQXV0b0hpZGUnKSB7XG4gICAgICB0aGlzLmNvbnRpbnVlQXV0b0hpZGVUaW1lcigpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jb25maWcuYmVoYXZpb3VyLm9uTW91c2VvdmVyID09PSAncmVzZXRBdXRvSGlkZScpIHtcbiAgICAgIHRoaXMuc3RhcnRBdXRvSGlkZVRpbWVyKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBjbGljayBvbiBub3RpZmljYXRpb24gYXJlYVxuICAgKi9cbiAgcHVibGljIG9uTm90aWZpY2F0aW9uQ2xpY2soKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuY29uZmlnLmJlaGF2aW91ci5vbkNsaWNrID09PSAnaGlkZScpIHtcbiAgICAgIHRoaXMub25DbGlja0Rpc21pc3MoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgdGhlIGF1dG8gaGlkZSB0aW1lciAoaWYgZW5hYmxlZClcbiAgICovXG4gIHByaXZhdGUgc3RhcnRBdXRvSGlkZVRpbWVyKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNvbmZpZy5iZWhhdmlvdXIuYXV0b0hpZGUgIT09IGZhbHNlICYmIHRoaXMuY29uZmlnLmJlaGF2aW91ci5hdXRvSGlkZSA+IDApIHtcbiAgICAgIHRoaXMudGltZXJTZXJ2aWNlLnN0YXJ0KHRoaXMuY29uZmlnLmJlaGF2aW91ci5hdXRvSGlkZSkudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMub25DbGlja0Rpc21pc3MoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQYXVzZSB0aGUgYXV0byBoaWRlIHRpbWVyIChpZiBlbmFibGVkKVxuICAgKi9cbiAgcHJpdmF0ZSBwYXVzZUF1dG9IaWRlVGltZXIoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuY29uZmlnLmJlaGF2aW91ci5hdXRvSGlkZSAhPT0gZmFsc2UgJiYgdGhpcy5jb25maWcuYmVoYXZpb3VyLmF1dG9IaWRlID4gMCkge1xuICAgICAgdGhpcy50aW1lclNlcnZpY2UucGF1c2UoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29udGludWUgdGhlIGF1dG8gaGlkZSB0aW1lciAoaWYgZW5hYmxlZClcbiAgICovXG4gIHByaXZhdGUgY29udGludWVBdXRvSGlkZVRpbWVyKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNvbmZpZy5iZWhhdmlvdXIuYXV0b0hpZGUgIT09IGZhbHNlICYmIHRoaXMuY29uZmlnLmJlaGF2aW91ci5hdXRvSGlkZSA+IDApIHtcbiAgICAgIHRoaXMudGltZXJTZXJ2aWNlLmNvbnRpbnVlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN0b3AgdGhlIGF1dG8gaGlkZSB0aW1lciAoaWYgZW5hYmxlZClcbiAgICovXG4gIHByaXZhdGUgc3RvcEF1dG9IaWRlVGltZXIoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuY29uZmlnLmJlaGF2aW91ci5hdXRvSGlkZSAhPT0gZmFsc2UgJiYgdGhpcy5jb25maWcuYmVoYXZpb3VyLmF1dG9IaWRlID4gMCkge1xuICAgICAgdGhpcy50aW1lclNlcnZpY2Uuc3RvcCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsIG5vdGlmaWNhdGlvbiBzZXR1cFxuICAgKi9cbiAgcHJpdmF0ZSBzZXR1cCgpOiB2b2lkIHtcbiAgICAvLyBTZXQgc3RhcnQgcG9zaXRpb24gKGluaXRpYWxseSB0aGUgZXhhY3Qgc2FtZSBmb3IgZXZlcnkgbmV3IG5vdGlmaWNhdGlvbilcbiAgICBpZiAodGhpcy5jb25maWcucG9zaXRpb24uaG9yaXpvbnRhbC5wb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWxlbWVudCwgJ2xlZnQnLCBgJHt0aGlzLmNvbmZpZy5wb3NpdGlvbi5ob3Jpem9udGFsLmRpc3RhbmNlfXB4YCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmNvbmZpZy5wb3NpdGlvbi5ob3Jpem9udGFsLnBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWxlbWVudCwgJ3JpZ2h0JywgYCR7dGhpcy5jb25maWcucG9zaXRpb24uaG9yaXpvbnRhbC5kaXN0YW5jZX1weGApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWxlbWVudCwgJ2xlZnQnLCAnNTAlJyk7XG4gICAgICAvLyBMZXQncyBnZXQgdGhlIEdQVSBoYW5kbGUgc29tZSB3b3JrIGFzIHdlbGwgKCNwZXJmbWF0dGVycylcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbGVtZW50LCAndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZTNkKCAtNTAlLCAwLCAwICknKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuY29uZmlnLnBvc2l0aW9uLnZlcnRpY2FsLnBvc2l0aW9uID09PSAndG9wJykge1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsZW1lbnQsICd0b3AnLCBgJHt0aGlzLmNvbmZpZy5wb3NpdGlvbi52ZXJ0aWNhbC5kaXN0YW5jZX1weGApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWxlbWVudCwgJ2JvdHRvbScsIGAke3RoaXMuY29uZmlnLnBvc2l0aW9uLnZlcnRpY2FsLmRpc3RhbmNlfXB4YCk7XG4gICAgfVxuXG4gICAgLy8gQWRkIGNsYXNzZXMgKHJlc3BvbnNpYmxlIGZvciB2aXN1YWwgZGVzaWduKVxuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbGVtZW50LCBgbm90aWZpZXJfX25vdGlmaWNhdGlvbi0tJHt0aGlzLm5vdGlmaWNhdGlvbi50eXBlfWApO1xuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbGVtZW50LCBgbm90aWZpZXJfX25vdGlmaWNhdGlvbi0tJHt0aGlzLmNvbmZpZy50aGVtZX1gKTtcbiAgfVxufVxuIl19