const ɵ0 = (notification) => {
    // Prepare variables
    const config = notification.component.getConfig();
    const shift = notification.component.getShift();
    let from;
    let to;
    // Configure variables, depending on configuration and component
    if (config.position.horizontal.position === 'left') {
        from = {
            transform: `translate3d( 0, ${shift}px, 0 )`,
        };
        to = {
            transform: `translate3d( calc( -100% - ${config.position.horizontal.distance}px - 10px ), ${shift}px, 0 )`,
        };
    }
    else if (config.position.horizontal.position === 'right') {
        from = {
            transform: `translate3d( 0, ${shift}px, 0 )`,
        };
        to = {
            transform: `translate3d( calc( 100% + ${config.position.horizontal.distance}px + 10px ), ${shift}px, 0 )`,
        };
    }
    else {
        let horizontalPosition;
        if (config.position.vertical.position === 'top') {
            horizontalPosition = `calc( -100% - ${config.position.horizontal.distance}px - 10px )`;
        }
        else {
            horizontalPosition = `calc( 100% + ${config.position.horizontal.distance}px + 10px )`;
        }
        from = {
            transform: `translate3d( -50%, ${shift}px, 0 )`,
        };
        to = {
            transform: `translate3d( -50%, ${horizontalPosition}, 0 )`,
        };
    }
    // Done
    return {
        from,
        to,
    };
}, ɵ1 = (notification) => {
    // Prepare variables
    const config = notification.component.getConfig();
    let from;
    let to;
    // Configure variables, depending on configuration and component
    if (config.position.horizontal.position === 'left') {
        from = {
            transform: `translate3d( calc( -100% - ${config.position.horizontal.distance}px - 10px ), 0, 0 )`,
        };
        to = {
            transform: 'translate3d( 0, 0, 0 )',
        };
    }
    else if (config.position.horizontal.position === 'right') {
        from = {
            transform: `translate3d( calc( 100% + ${config.position.horizontal.distance}px + 10px ), 0, 0 )`,
        };
        to = {
            transform: 'translate3d( 0, 0, 0 )',
        };
    }
    else {
        let horizontalPosition;
        if (config.position.vertical.position === 'top') {
            horizontalPosition = `calc( -100% - ${config.position.horizontal.distance}px - 10px )`;
        }
        else {
            horizontalPosition = `calc( 100% + ${config.position.horizontal.distance}px + 10px )`;
        }
        from = {
            transform: `translate3d( -50%, ${horizontalPosition}, 0 )`,
        };
        to = {
            transform: 'translate3d( -50%, 0, 0 )',
        };
    }
    // Done
    return {
        from,
        to,
    };
};
/**
 * Slide animation preset
 */
export const slide = {
    hide: ɵ0,
    show: ɵ1,
};
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGUuYW5pbWF0aW9uLXByZXNldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItbm90aWZpZXIvc3JjL2xpYi9hbmltYXRpb24tcHJlc2V0cy9zbGlkZS5hbmltYXRpb24tcHJlc2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJXQVFRLENBQUMsWUFBa0MsRUFBb0MsRUFBRTtJQUM3RSxvQkFBb0I7SUFDcEIsTUFBTSxNQUFNLEdBQW1CLFlBQVksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDbEUsTUFBTSxLQUFLLEdBQVcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN4RCxJQUFJLElBRUgsQ0FBQztJQUNGLElBQUksRUFFSCxDQUFDO0lBRUYsZ0VBQWdFO0lBQ2hFLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFBUSxLQUFLLE1BQU0sRUFBRTtRQUNsRCxJQUFJLEdBQUc7WUFDTCxTQUFTLEVBQUUsbUJBQW1CLEtBQUssU0FBUztTQUM3QyxDQUFDO1FBQ0YsRUFBRSxHQUFHO1lBQ0gsU0FBUyxFQUFFLDhCQUE4QixNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxRQUFRLGdCQUFnQixLQUFLLFNBQVM7U0FDM0csQ0FBQztLQUNIO1NBQU0sSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEtBQUssT0FBTyxFQUFFO1FBQzFELElBQUksR0FBRztZQUNMLFNBQVMsRUFBRSxtQkFBbUIsS0FBSyxTQUFTO1NBQzdDLENBQUM7UUFDRixFQUFFLEdBQUc7WUFDSCxTQUFTLEVBQUUsNkJBQTZCLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFFBQVEsZ0JBQWdCLEtBQUssU0FBUztTQUMxRyxDQUFDO0tBQ0g7U0FBTTtRQUNMLElBQUksa0JBQTBCLENBQUM7UUFDL0IsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEtBQUssS0FBSyxFQUFFO1lBQy9DLGtCQUFrQixHQUFHLGlCQUFpQixNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxRQUFRLGFBQWEsQ0FBQztTQUN4RjthQUFNO1lBQ0wsa0JBQWtCLEdBQUcsZ0JBQWdCLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFFBQVEsYUFBYSxDQUFDO1NBQ3ZGO1FBQ0QsSUFBSSxHQUFHO1lBQ0wsU0FBUyxFQUFFLHNCQUFzQixLQUFLLFNBQVM7U0FDaEQsQ0FBQztRQUNGLEVBQUUsR0FBRztZQUNILFNBQVMsRUFBRSxzQkFBc0Isa0JBQWtCLE9BQU87U0FDM0QsQ0FBQztLQUNIO0lBRUQsT0FBTztJQUNQLE9BQU87UUFDTCxJQUFJO1FBQ0osRUFBRTtLQUNILENBQUM7QUFDSixDQUFDLE9BQ0ssQ0FBQyxZQUFrQyxFQUFvQyxFQUFFO0lBQzdFLG9CQUFvQjtJQUNwQixNQUFNLE1BQU0sR0FBbUIsWUFBWSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNsRSxJQUFJLElBRUgsQ0FBQztJQUNGLElBQUksRUFFSCxDQUFDO0lBRUYsZ0VBQWdFO0lBQ2hFLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFBUSxLQUFLLE1BQU0sRUFBRTtRQUNsRCxJQUFJLEdBQUc7WUFDTCxTQUFTLEVBQUUsOEJBQThCLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFFBQVEscUJBQXFCO1NBQ2xHLENBQUM7UUFDRixFQUFFLEdBQUc7WUFDSCxTQUFTLEVBQUUsd0JBQXdCO1NBQ3BDLENBQUM7S0FDSDtTQUFNLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFBUSxLQUFLLE9BQU8sRUFBRTtRQUMxRCxJQUFJLEdBQUc7WUFDTCxTQUFTLEVBQUUsNkJBQTZCLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFFBQVEscUJBQXFCO1NBQ2pHLENBQUM7UUFDRixFQUFFLEdBQUc7WUFDSCxTQUFTLEVBQUUsd0JBQXdCO1NBQ3BDLENBQUM7S0FDSDtTQUFNO1FBQ0wsSUFBSSxrQkFBMEIsQ0FBQztRQUMvQixJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsS0FBSyxLQUFLLEVBQUU7WUFDL0Msa0JBQWtCLEdBQUcsaUJBQWlCLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFFBQVEsYUFBYSxDQUFDO1NBQ3hGO2FBQU07WUFDTCxrQkFBa0IsR0FBRyxnQkFBZ0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFBUSxhQUFhLENBQUM7U0FDdkY7UUFDRCxJQUFJLEdBQUc7WUFDTCxTQUFTLEVBQUUsc0JBQXNCLGtCQUFrQixPQUFPO1NBQzNELENBQUM7UUFDRixFQUFFLEdBQUc7WUFDSCxTQUFTLEVBQUUsMkJBQTJCO1NBQ3ZDLENBQUM7S0FDSDtJQUVELE9BQU87SUFDUCxPQUFPO1FBQ0wsSUFBSTtRQUNKLEVBQUU7S0FDSCxDQUFDO0FBQ0osQ0FBQztBQWhHSDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBNEI7SUFDNUMsSUFBSSxJQThDSDtJQUNELElBQUksSUE2Q0g7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm90aWZpZXJBbmltYXRpb25QcmVzZXQsIE5vdGlmaWVyQW5pbWF0aW9uUHJlc2V0S2V5ZnJhbWVzIH0gZnJvbSAnLi4vbW9kZWxzL25vdGlmaWVyLWFuaW1hdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBOb3RpZmllckNvbmZpZyB9IGZyb20gJy4uL21vZGVscy9ub3RpZmllci1jb25maWcubW9kZWwnO1xuaW1wb3J0IHsgTm90aWZpZXJOb3RpZmljYXRpb24gfSBmcm9tICcuLi9tb2RlbHMvbm90aWZpZXItbm90aWZpY2F0aW9uLm1vZGVsJztcblxuLyoqXG4gKiBTbGlkZSBhbmltYXRpb24gcHJlc2V0XG4gKi9cbmV4cG9ydCBjb25zdCBzbGlkZTogTm90aWZpZXJBbmltYXRpb25QcmVzZXQgPSB7XG4gIGhpZGU6IChub3RpZmljYXRpb246IE5vdGlmaWVyTm90aWZpY2F0aW9uKTogTm90aWZpZXJBbmltYXRpb25QcmVzZXRLZXlmcmFtZXMgPT4ge1xuICAgIC8vIFByZXBhcmUgdmFyaWFibGVzXG4gICAgY29uc3QgY29uZmlnOiBOb3RpZmllckNvbmZpZyA9IG5vdGlmaWNhdGlvbi5jb21wb25lbnQuZ2V0Q29uZmlnKCk7XG4gICAgY29uc3Qgc2hpZnQ6IG51bWJlciA9IG5vdGlmaWNhdGlvbi5jb21wb25lbnQuZ2V0U2hpZnQoKTtcbiAgICBsZXQgZnJvbToge1xuICAgICAgW2FuaW1hdGFibGVQcm9wZXJ0eU5hbWU6IHN0cmluZ106IHN0cmluZztcbiAgICB9O1xuICAgIGxldCB0bzoge1xuICAgICAgW2FuaW1hdGFibGVQcm9wZXJ0eU5hbWU6IHN0cmluZ106IHN0cmluZztcbiAgICB9O1xuXG4gICAgLy8gQ29uZmlndXJlIHZhcmlhYmxlcywgZGVwZW5kaW5nIG9uIGNvbmZpZ3VyYXRpb24gYW5kIGNvbXBvbmVudFxuICAgIGlmIChjb25maWcucG9zaXRpb24uaG9yaXpvbnRhbC5wb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICBmcm9tID0ge1xuICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUzZCggMCwgJHtzaGlmdH1weCwgMCApYCxcbiAgICAgIH07XG4gICAgICB0byA9IHtcbiAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlM2QoIGNhbGMoIC0xMDAlIC0gJHtjb25maWcucG9zaXRpb24uaG9yaXpvbnRhbC5kaXN0YW5jZX1weCAtIDEwcHggKSwgJHtzaGlmdH1weCwgMCApYCxcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChjb25maWcucG9zaXRpb24uaG9yaXpvbnRhbC5wb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgZnJvbSA9IHtcbiAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlM2QoIDAsICR7c2hpZnR9cHgsIDAgKWAsXG4gICAgICB9O1xuICAgICAgdG8gPSB7XG4gICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZTNkKCBjYWxjKCAxMDAlICsgJHtjb25maWcucG9zaXRpb24uaG9yaXpvbnRhbC5kaXN0YW5jZX1weCArIDEwcHggKSwgJHtzaGlmdH1weCwgMCApYCxcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBob3Jpem9udGFsUG9zaXRpb246IHN0cmluZztcbiAgICAgIGlmIChjb25maWcucG9zaXRpb24udmVydGljYWwucG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICAgIGhvcml6b250YWxQb3NpdGlvbiA9IGBjYWxjKCAtMTAwJSAtICR7Y29uZmlnLnBvc2l0aW9uLmhvcml6b250YWwuZGlzdGFuY2V9cHggLSAxMHB4IClgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaG9yaXpvbnRhbFBvc2l0aW9uID0gYGNhbGMoIDEwMCUgKyAke2NvbmZpZy5wb3NpdGlvbi5ob3Jpem9udGFsLmRpc3RhbmNlfXB4ICsgMTBweCApYDtcbiAgICAgIH1cbiAgICAgIGZyb20gPSB7XG4gICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZTNkKCAtNTAlLCAke3NoaWZ0fXB4LCAwIClgLFxuICAgICAgfTtcbiAgICAgIHRvID0ge1xuICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUzZCggLTUwJSwgJHtob3Jpem9udGFsUG9zaXRpb259LCAwIClgLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBEb25lXG4gICAgcmV0dXJuIHtcbiAgICAgIGZyb20sXG4gICAgICB0byxcbiAgICB9O1xuICB9LFxuICBzaG93OiAobm90aWZpY2F0aW9uOiBOb3RpZmllck5vdGlmaWNhdGlvbik6IE5vdGlmaWVyQW5pbWF0aW9uUHJlc2V0S2V5ZnJhbWVzID0+IHtcbiAgICAvLyBQcmVwYXJlIHZhcmlhYmxlc1xuICAgIGNvbnN0IGNvbmZpZzogTm90aWZpZXJDb25maWcgPSBub3RpZmljYXRpb24uY29tcG9uZW50LmdldENvbmZpZygpO1xuICAgIGxldCBmcm9tOiB7XG4gICAgICBbYW5pbWF0YWJsZVByb3BlcnR5TmFtZTogc3RyaW5nXTogc3RyaW5nO1xuICAgIH07XG4gICAgbGV0IHRvOiB7XG4gICAgICBbYW5pbWF0YWJsZVByb3BlcnR5TmFtZTogc3RyaW5nXTogc3RyaW5nO1xuICAgIH07XG5cbiAgICAvLyBDb25maWd1cmUgdmFyaWFibGVzLCBkZXBlbmRpbmcgb24gY29uZmlndXJhdGlvbiBhbmQgY29tcG9uZW50XG4gICAgaWYgKGNvbmZpZy5wb3NpdGlvbi5ob3Jpem9udGFsLnBvc2l0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgIGZyb20gPSB7XG4gICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZTNkKCBjYWxjKCAtMTAwJSAtICR7Y29uZmlnLnBvc2l0aW9uLmhvcml6b250YWwuZGlzdGFuY2V9cHggLSAxMHB4ICksIDAsIDAgKWAsXG4gICAgICB9O1xuICAgICAgdG8gPSB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKCAwLCAwLCAwICknLFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGNvbmZpZy5wb3NpdGlvbi5ob3Jpem9udGFsLnBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICBmcm9tID0ge1xuICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUzZCggY2FsYyggMTAwJSArICR7Y29uZmlnLnBvc2l0aW9uLmhvcml6b250YWwuZGlzdGFuY2V9cHggKyAxMHB4ICksIDAsIDAgKWAsXG4gICAgICB9O1xuICAgICAgdG8gPSB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKCAwLCAwLCAwICknLFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGhvcml6b250YWxQb3NpdGlvbjogc3RyaW5nO1xuICAgICAgaWYgKGNvbmZpZy5wb3NpdGlvbi52ZXJ0aWNhbC5wb3NpdGlvbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgaG9yaXpvbnRhbFBvc2l0aW9uID0gYGNhbGMoIC0xMDAlIC0gJHtjb25maWcucG9zaXRpb24uaG9yaXpvbnRhbC5kaXN0YW5jZX1weCAtIDEwcHggKWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBob3Jpem9udGFsUG9zaXRpb24gPSBgY2FsYyggMTAwJSArICR7Y29uZmlnLnBvc2l0aW9uLmhvcml6b250YWwuZGlzdGFuY2V9cHggKyAxMHB4IClgO1xuICAgICAgfVxuICAgICAgZnJvbSA9IHtcbiAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlM2QoIC01MCUsICR7aG9yaXpvbnRhbFBvc2l0aW9ufSwgMCApYCxcbiAgICAgIH07XG4gICAgICB0byA9IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoIC01MCUsIDAsIDAgKScsXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIERvbmVcbiAgICByZXR1cm4ge1xuICAgICAgZnJvbSxcbiAgICAgIHRvLFxuICAgIH07XG4gIH0sXG59O1xuIl19