{"version":3,"file":"notifier-notification.component.d.ts","sources":["notifier-notification.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ElementRef, EventEmitter, Renderer2 } from '@angular/core';\nimport { NotifierConfig } from '../models/notifier-config.model';\nimport { NotifierNotification } from '../models/notifier-notification.model';\nimport { NotifierService } from '../services/notifier.service';\nimport { NotifierAnimationService } from '../services/notifier-animation.service';\nimport { NotifierTimerService } from '../services/notifier-timer.service';\n/**\n * Notifier notification component\n * -------------------------------\n * This component is responsible for actually displaying the notification on screen. In addition, it's able to show and hide this\n * notification, in particular to animate this notification in and out, as well as shift (move) this notification vertically around.\n * Furthermore, the notification component handles all interactions the user has with this notification / component, such as clicks and\n * mouse movements.\n */\nexport declare class NotifierNotificationComponent implements AfterViewInit {\n    /**\n     * Input: Notification object, contains all details necessary to construct the notification\n     */\n    notification: NotifierNotification;\n    /**\n     * Output: Ready event, handles the initialization success by emitting a reference to this notification component\n     */\n    ready: EventEmitter<NotifierNotificationComponent>;\n    /**\n     * Output: Dismiss event, handles the click on the dismiss button by emitting the notification ID of this notification component\n     */\n    dismiss: EventEmitter<string>;\n    /**\n     * Notifier configuration\n     */\n    readonly config: NotifierConfig;\n    /**\n     * Notifier timer service\n     */\n    private readonly timerService;\n    /**\n     * Notifier animation service\n     */\n    private readonly animationService;\n    /**\n     * Angular renderer, used to preserve the overall DOM abstraction & independence\n     */\n    private readonly renderer;\n    /**\n     * Native element reference, used for manipulating DOM properties\n     */\n    private readonly element;\n    /**\n     * Current notification height, calculated and cached here (#perfmatters)\n     */\n    private elementHeight;\n    /**\n     * Current notification width, calculated and cached here (#perfmatters)\n     */\n    private elementWidth;\n    /**\n     * Current notification shift, calculated and cached here (#perfmatters)\n     */\n    private elementShift;\n    /**\n     * Constructor\n     *\n     * @param elementRef               Reference to the component's element\n     * @param renderer                 Angular renderer\n     * @param notifierService          Notifier service\n     * @param notifierTimerService     Notifier timer service\n     * @param notifierAnimationService Notifier animation service\n     */\n    constructor(elementRef: ElementRef, renderer: Renderer2, notifierService: NotifierService, notifierTimerService: NotifierTimerService, notifierAnimationService: NotifierAnimationService);\n    /**\n     * Component after view init lifecycle hook, setts up the component and then emits the ready event\n     */\n    ngAfterViewInit(): void;\n    /**\n     * Get the notifier config\n     *\n     * @returns Notifier configuration\n     */\n    getConfig(): NotifierConfig;\n    /**\n     * Get notification element height (in px)\n     *\n     * @returns Notification element height (in px)\n     */\n    getHeight(): number;\n    /**\n     * Get notification element width (in px)\n     *\n     * @returns Notification element height (in px)\n     */\n    getWidth(): number;\n    /**\n     * Get notification shift offset (in px)\n     *\n     * @returns Notification element shift offset (in px)\n     */\n    getShift(): number;\n    /**\n     * Show (animate in) this notification\n     *\n     * @returns Promise, resolved when done\n     */\n    show(): Promise<void>;\n    /**\n     * Hide (animate out) this notification\n     *\n     * @returns Promise, resolved when done\n     */\n    hide(): Promise<void>;\n    /**\n     * Shift (move) this notification\n     *\n     * @param   distance         Distance to shift (in px)\n     * @param   shiftToMakePlace Flag, defining in which direction to shift\n     * @returns Promise, resolved when done\n     */\n    shift(distance: number, shiftToMakePlace: boolean): Promise<void>;\n    /**\n     * Handle click on dismiss button\n     */\n    onClickDismiss(): void;\n    /**\n     * Handle mouseover over notification area\n     */\n    onNotificationMouseover(): void;\n    /**\n     * Handle mouseout from notification area\n     */\n    onNotificationMouseout(): void;\n    /**\n     * Handle click on notification area\n     */\n    onNotificationClick(): void;\n    /**\n     * Start the auto hide timer (if enabled)\n     */\n    private startAutoHideTimer;\n    /**\n     * Pause the auto hide timer (if enabled)\n     */\n    private pauseAutoHideTimer;\n    /**\n     * Continue the auto hide timer (if enabled)\n     */\n    private continueAutoHideTimer;\n    /**\n     * Stop the auto hide timer (if enabled)\n     */\n    private stopAutoHideTimer;\n    /**\n     * Initial notification setup\n     */\n    private setup;\n}\n"]}