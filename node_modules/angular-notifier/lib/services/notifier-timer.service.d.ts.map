{"version":3,"file":"notifier-timer.service.d.ts","sources":["notifier-timer.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * Notifier timer service\n *\n * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a\n * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.\n */\nexport declare class NotifierTimerService {\n    /**\n     * Timestamp (in ms), created in the moment the timer starts\n     */\n    private now;\n    /**\n     * Remaining time (in ms)\n     */\n    private remaining;\n    /**\n     * Timeout ID, used for clearing the timeout later on\n     */\n    private timerId;\n    /**\n     * Promise resolve function, eventually getting called once the timer finishes\n     */\n    private finishPromiseResolver;\n    /**\n     * Constructor\n     */\n    constructor();\n    /**\n     * Start (or resume) the timer\n     *\n     * @param   duration Timer duration, in ms\n     * @returns          Promise, resolved once the timer finishes\n     */\n    start(duration: number): Promise<void>;\n    /**\n     * Pause the timer\n     */\n    pause(): void;\n    /**\n     * Continue the timer\n     */\n    continue(): void;\n    /**\n     * Stop the timer\n     */\n    stop(): void;\n    /**\n     * Finish up the timeout by resolving the timer promise\n     */\n    private finish;\n}\n"]}