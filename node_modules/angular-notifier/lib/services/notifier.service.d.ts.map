{"version":3,"file":"notifier.service.d.ts","sources":["notifier.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { NotifierConfig } from '../models/notifier-config.model';\nimport { NotifierNotificationOptions } from '../models/notifier-notification.model';\nimport { NotifierQueueService } from './notifier-queue.service';\n/**\n * Notifier service\n *\n * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building\n * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into\n * actions, which then get thrown into the action queue - eventually being processed at the right moment.\n */\nexport declare class NotifierService {\n    /**\n     * Notifier queue service\n     */\n    private readonly queueService;\n    /**\n     * Notifier configuration\n     */\n    private readonly config;\n    /**\n     * Constructor\n     *\n     * @param notifierQueueService Notifier queue service\n     * @param config               Notifier configuration, optionally injected as a dependency\n     */\n    constructor(notifierQueueService: NotifierQueueService, config: NotifierConfig);\n    /**\n     * Get the notifier configuration\n     *\n     * @returns Notifier configuration\n     */\n    getConfig(): NotifierConfig;\n    /**\n     * API: Show a new notification\n     *\n     * @param notificationOptions Notification options\n     */\n    show(notificationOptions: NotifierNotificationOptions): void;\n    /**\n     * API: Hide a specific notification, given its ID\n     *\n     * @param notificationId ID of the notification to hide\n     */\n    hide(notificationId: string): void;\n    /**\n     * API: Hide the newest notification\n     */\n    hideNewest(): void;\n    /**\n     * API: Hide the oldest notification\n     */\n    hideOldest(): void;\n    /**\n     * API: Hide all notifications at once\n     */\n    hideAll(): void;\n    /**\n     * API: Shortcut for showing a new notification\n     *\n     * @param type             Type of the notification\n     * @param message          Message of the notification\n     * @param [notificationId] Unique ID for the notification (optional)\n     */\n    notify(type: string, message: string, notificationId?: string): void;\n}\n"]}