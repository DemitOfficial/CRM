{"version":3,"file":"angular-notifier.js","sources":["../../../projects/angular-notifier/src/lib/models/notifier-notification.model.ts","../../../projects/angular-notifier/src/lib/models/notifier-config.model.ts","../../../projects/angular-notifier/src/lib/notifier.tokens.ts","../../../projects/angular-notifier/src/lib/services/notifier-queue.service.ts","../../../projects/angular-notifier/src/lib/services/notifier.service.ts","../../../projects/angular-notifier/src/lib/components/notifier-container.component.ts","../../../projects/angular-notifier/src/lib/animation-presets/fade.animation-preset.ts","../../../projects/angular-notifier/src/lib/animation-presets/slide.animation-preset.ts","../../../projects/angular-notifier/src/lib/services/notifier-animation.service.ts","../../../projects/angular-notifier/src/lib/services/notifier-timer.service.ts","../../../projects/angular-notifier/src/lib/components/notifier-notification.component.ts","../../../projects/angular-notifier/src/lib/notifier.module.ts","../../../projects/angular-notifier/src/angular-notifier.ts"],"names":[],"mappings":"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","sourcesContent":["import { TemplateRef } from '@angular/core';\n\nimport { NotifierNotificationComponent } from '../components/notifier-notification.component';\n\n/**\n * Notification\n *\n * This class describes the structure of a notifiction, including all information it needs to live, and everyone else needs to work with it.\n */\nexport class NotifierNotification {\n  /**\n   * Unique notification ID, can be set manually to control the notification from outside later on\n   */\n  public id: string;\n\n  /**\n   * Notification type, will be used for constructing an appropriate class name\n   */\n  public type: string;\n\n  /**\n   * Notification message\n   */\n  public message: string;\n\n  /**\n   * The template to customize\n   * the appearance of the notification\n   */\n  public template?: TemplateRef<any> = null;\n\n  /**\n   * Component reference of this notification, created and set during creation time\n   */\n  public component: NotifierNotificationComponent;\n\n  /**\n   * Constructor\n   *\n   * @param options Notifier options\n   */\n  public constructor(options: NotifierNotificationOptions) {\n    Object.assign(this, options);\n\n    // If not set manually, we have to create a unique notification ID by ourselves. The ID generation relies on the current browser\n    // datetime in ms, in praticular the moment this notification gets constructed. Concurrency, and thus two IDs being the exact same,\n    // is not possible due to the action queue concept.\n    if (options.id === undefined) {\n      this.id = `ID_${new Date().getTime()}`;\n    }\n  }\n}\n\n/**\n * Notifiction options\n *\n * This interface describes which information are needed to create a new notification, or in other words, which information the external API\n * call must provide.\n */\nexport interface NotifierNotificationOptions {\n  /**\n   * Notification ID, optional\n   */\n  id?: string;\n\n  /**\n   * Notification type\n   */\n  type: string;\n\n  /**\n   * Notificatin message\n   */\n  message: string;\n\n  /**\n   * The template to customize\n   * the appearance of the notification\n   */\n  template?: TemplateRef<any>;\n}\n","/**\n * Notifier options\n */\nexport interface NotifierOptions {\n  animations?: {\n    enabled?: boolean;\n    hide?: {\n      easing?: string;\n      offset?: number | false;\n      preset?: string;\n      speed?: number;\n    };\n    overlap?: number | false;\n    shift?: {\n      easing?: string;\n      speed?: number;\n    };\n    show?: {\n      easing?: string;\n      preset?: string;\n      speed?: number;\n    };\n  };\n  behaviour?: {\n    autoHide?: number | false;\n    onClick?: 'hide' | false;\n    onMouseover?: 'pauseAutoHide' | 'resetAutoHide' | false;\n    showDismissButton?: boolean;\n    stacking?: number | false;\n  };\n  position?: {\n    horizontal?: {\n      distance?: number;\n      position?: 'left' | 'middle' | 'right';\n    };\n    vertical?: {\n      distance?: number;\n      gap?: number;\n      position?: 'top' | 'bottom';\n    };\n  };\n  theme?: string;\n}\n\n/**\n * Notifier configuration\n *\n * The notifier configuration defines what notifications look like, how they behave, and how they get animated. It is a global\n * configuration, which means that it only can be set once (at the beginning), and cannot be changed afterwards. Aligning to the world of\n * Angular, this configuration can be provided in the root app module - alternatively, a meaningful default configuration will be used.\n */\nexport class NotifierConfig implements NotifierOptions {\n  /**\n   * Customize animations\n   */\n  public animations: {\n    enabled: boolean;\n    hide: {\n      easing: string;\n      offset: number | false;\n      preset: string;\n      speed: number;\n    };\n    overlap: number | false;\n    shift: {\n      easing: string;\n      speed: number;\n    };\n    show: {\n      easing: string;\n      preset: string;\n      speed: number;\n    };\n  };\n\n  /**\n   * Customize behaviour\n   */\n  public behaviour: {\n    autoHide: number | false;\n    onClick: 'hide' | false;\n    onMouseover: 'pauseAutoHide' | 'resetAutoHide' | false;\n    showDismissButton: boolean;\n    stacking: number | false;\n  };\n\n  /**\n   * Customize positioning\n   */\n  public position: {\n    horizontal: {\n      distance: number;\n      position: 'left' | 'middle' | 'right';\n    };\n    vertical: {\n      distance: number;\n      gap: number;\n      position: 'top' | 'bottom';\n    };\n  };\n\n  /**\n   * Customize theming\n   */\n  public theme: string;\n\n  /**\n   * Constructor\n   *\n   * @param [customOptions={}] Custom notifier options, optional\n   */\n  public constructor(customOptions: NotifierOptions = {}) {\n    // Set default values\n    this.animations = {\n      enabled: true,\n      hide: {\n        easing: 'ease',\n        offset: 50,\n        preset: 'fade',\n        speed: 300,\n      },\n      overlap: 150,\n      shift: {\n        easing: 'ease',\n        speed: 300,\n      },\n      show: {\n        easing: 'ease',\n        preset: 'slide',\n        speed: 300,\n      },\n    };\n    this.behaviour = {\n      autoHide: 7000,\n      onClick: false,\n      onMouseover: 'pauseAutoHide',\n      showDismissButton: true,\n      stacking: 4,\n    };\n    this.position = {\n      horizontal: {\n        distance: 12,\n        position: 'left',\n      },\n      vertical: {\n        distance: 12,\n        gap: 10,\n        position: 'bottom',\n      },\n    };\n    this.theme = 'material';\n\n    // The following merges the custom options into the notifier config, respecting the already set default values\n    // This linear, more explicit and code-sizy workflow is preferred here over a recursive one (because we know the object structure)\n    // Technical sidenote: Objects are merged, other types of values simply overwritten / copied\n    if (customOptions.theme !== undefined) {\n      this.theme = customOptions.theme;\n    }\n    if (customOptions.animations !== undefined) {\n      if (customOptions.animations.enabled !== undefined) {\n        this.animations.enabled = customOptions.animations.enabled;\n      }\n      if (customOptions.animations.overlap !== undefined) {\n        this.animations.overlap = customOptions.animations.overlap;\n      }\n      if (customOptions.animations.hide !== undefined) {\n        Object.assign(this.animations.hide, customOptions.animations.hide);\n      }\n      if (customOptions.animations.shift !== undefined) {\n        Object.assign(this.animations.shift, customOptions.animations.shift);\n      }\n      if (customOptions.animations.show !== undefined) {\n        Object.assign(this.animations.show, customOptions.animations.show);\n      }\n    }\n    if (customOptions.behaviour !== undefined) {\n      Object.assign(this.behaviour, customOptions.behaviour);\n    }\n    if (customOptions.position !== undefined) {\n      if (customOptions.position.horizontal !== undefined) {\n        Object.assign(this.position.horizontal, customOptions.position.horizontal);\n      }\n      if (customOptions.position.vertical !== undefined) {\n        Object.assign(this.position.vertical, customOptions.position.vertical);\n      }\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { NotifierConfig, NotifierOptions } from './models/notifier-config.model';\n\n/**\n * Injection Token for notifier options\n */\nexport const NotifierOptionsToken: InjectionToken<NotifierOptions> = new InjectionToken<NotifierOptions>(\n  '[angular-notifier] Notifier Options',\n);\n\n/**\n * Injection Token for notifier configuration\n */\nexport const NotifierConfigToken: InjectionToken<NotifierConfig> = new InjectionToken<NotifierConfig>('[anuglar-notifier] Notifier Config');\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { NotifierAction } from '../models/notifier-action.model';\n\n/**\n * Notifier queue service\n *\n * In general, API calls don't get processed right away. Instead, we have to queue them up in order to prevent simultanious API calls\n * interfering with each other. This, at least in theory, is possible at any time. In particular, animations - which potentially overlap -\n * can cause changes in JS classes as well as affect the DOM. Therefore, the queue service takes all actions, puts them in a queue, and\n * processes them at the right time (which is when the previous action has been processed successfully).\n *\n * Technical sidenote:\n * An action looks pretty similar to the ones within the Flux / Redux pattern.\n */\n@Injectable()\nexport class NotifierQueueService {\n  /**\n   * Stream of actions, subscribable from outside\n   */\n  public readonly actionStream: Subject<NotifierAction>;\n\n  /**\n   * Queue of actions\n   */\n  private actionQueue: Array<NotifierAction>;\n\n  /**\n   * Flag, true if some action is currently in progress\n   */\n  private isActionInProgress: boolean;\n\n  /**\n   * Constructor\n   */\n  public constructor() {\n    this.actionStream = new Subject<NotifierAction>();\n    this.actionQueue = [];\n    this.isActionInProgress = false;\n  }\n\n  /**\n   * Push a new action to the queue, and try to run it\n   *\n   * @param action Action object\n   */\n  public push(action: NotifierAction): void {\n    this.actionQueue.push(action);\n    this.tryToRunNextAction();\n  }\n\n  /**\n   * Continue with the next action (called when the current action is finished)\n   */\n  public continue(): void {\n    this.isActionInProgress = false;\n    this.tryToRunNextAction();\n  }\n\n  /**\n   * Try to run the next action in the queue; we skip if there already is some action in progress, or if there is no action left\n   */\n  private tryToRunNextAction(): void {\n    if (this.isActionInProgress || this.actionQueue.length === 0) {\n      return; // Skip (the queue can now go drink a coffee as it has nothing to do anymore)\n    }\n    this.isActionInProgress = true;\n    this.actionStream.next(this.actionQueue.shift()); // Push next action to the stream, and remove the current action from the queue\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\n\nimport { NotifierConfig } from '../models/notifier-config.model';\nimport { NotifierNotificationOptions } from '../models/notifier-notification.model';\nimport { NotifierConfigToken } from '../notifier.tokens';\nimport { NotifierQueueService } from './notifier-queue.service';\n\n/**\n * Notifier service\n *\n * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building\n * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into\n * actions, which then get thrown into the action queue - eventually being processed at the right moment.\n */\n@Injectable()\nexport class NotifierService {\n  /**\n   * Notifier queue service\n   */\n  private readonly queueService: NotifierQueueService;\n\n  /**\n   * Notifier configuration\n   */\n  private readonly config: NotifierConfig;\n\n  /**\n   * Constructor\n   *\n   * @param notifierQueueService Notifier queue service\n   * @param config               Notifier configuration, optionally injected as a dependency\n   */\n  public constructor(notifierQueueService: NotifierQueueService, @Inject(NotifierConfigToken) config: NotifierConfig) {\n    this.queueService = notifierQueueService;\n    this.config = config;\n  }\n\n  /**\n   * Get the notifier configuration\n   *\n   * @returns Notifier configuration\n   */\n  public getConfig(): NotifierConfig {\n    return this.config;\n  }\n\n  /**\n   * API: Show a new notification\n   *\n   * @param notificationOptions Notification options\n   */\n  public show(notificationOptions: NotifierNotificationOptions): void {\n    this.queueService.push({\n      payload: notificationOptions,\n      type: 'SHOW',\n    });\n  }\n\n  /**\n   * API: Hide a specific notification, given its ID\n   *\n   * @param notificationId ID of the notification to hide\n   */\n  public hide(notificationId: string): void {\n    this.queueService.push({\n      payload: notificationId,\n      type: 'HIDE',\n    });\n  }\n\n  /**\n   * API: Hide the newest notification\n   */\n  public hideNewest(): void {\n    this.queueService.push({\n      type: 'HIDE_NEWEST',\n    });\n  }\n\n  /**\n   * API: Hide the oldest notification\n   */\n  public hideOldest(): void {\n    this.queueService.push({\n      type: 'HIDE_OLDEST',\n    });\n  }\n\n  /**\n   * API: Hide all notifications at once\n   */\n  public hideAll(): void {\n    this.queueService.push({\n      type: 'HIDE_ALL',\n    });\n  }\n\n  /**\n   * API: Shortcut for showing a new notification\n   *\n   * @param type             Type of the notification\n   * @param message          Message of the notification\n   * @param [notificationId] Unique ID for the notification (optional)\n   */\n  public notify(type: string, message: string, notificationId?: string): void {\n    const notificationOptions: NotifierNotificationOptions = {\n      message,\n      type,\n    };\n    if (notificationId !== undefined) {\n      notificationOptions.id = notificationId;\n    }\n    this.show(notificationOptions);\n  }\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { NotifierAction } from '../models/notifier-action.model';\nimport { NotifierConfig } from '../models/notifier-config.model';\nimport { NotifierNotification } from '../models/notifier-notification.model';\nimport { NotifierService } from '../services/notifier.service';\nimport { NotifierQueueService } from '../services/notifier-queue.service';\nimport { NotifierNotificationComponent } from './notifier-notification.component';\n\n/**\n * Notifier container component\n * ----------------------------\n * This component acts as a wrapper for all notification components; consequently, it is responsible for creating a new notification\n * component and removing an existing notification component. Being more precicely, it also handles side effects of those actions, such as\n * shifting or even completely removing other notifications as well. Overall, this components handles actions coming from the queue service\n * by subscribing to its action stream.\n *\n * Technical sidenote:\n * This component has to be used somewhere in an application to work; it will not inject and create itself automatically, primarily in order\n * to not break the Angular AoT compilation. Moreover, this component (and also the notification components) set their change detection\n * strategy onPush, which means that we handle change detection manually in order to get the best performance. (#perfmatters)\n */\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush, // (#perfmatters)\n  host: {\n    class: 'notifier__container',\n  },\n  selector: 'notifier-container',\n  templateUrl: './notifier-container.component.html',\n})\nexport class NotifierContainerComponent implements OnDestroy {\n  /**\n   * List of currently somewhat active notifications\n   */\n  public notifications: Array<NotifierNotification>;\n\n  /**\n   * Change detector\n   */\n  private readonly changeDetector: ChangeDetectorRef;\n\n  /**\n   * Notifier queue service\n   */\n  private readonly queueService: NotifierQueueService;\n\n  /**\n   * Notifier configuration\n   */\n  private readonly config: NotifierConfig;\n\n  /**\n   * Queue service observable subscription (saved for cleanup)\n   */\n  private queueServiceSubscription: Subscription;\n\n  /**\n   * Promise resolve function reference, temporarily used while the notification child component gets created\n   */\n  private tempPromiseResolver: () => void;\n\n  /**\n   * Constructor\n   *\n   * @param changeDetector       Change detector, used for manually triggering change detection runs\n   * @param notifierQueueService Notifier queue service\n   * @param notifierService      Notifier service\n   */\n  public constructor(changeDetector: ChangeDetectorRef, notifierQueueService: NotifierQueueService, notifierService: NotifierService) {\n    this.changeDetector = changeDetector;\n    this.queueService = notifierQueueService;\n    this.config = notifierService.getConfig();\n    this.notifications = [];\n\n    // Connects this component up to the action queue, then handle incoming actions\n    this.queueServiceSubscription = this.queueService.actionStream.subscribe((action: NotifierAction) => {\n      this.handleAction(action).then(() => {\n        this.queueService.continue();\n      });\n    });\n  }\n\n  /**\n   * Component destroyment lifecycle hook, cleans up the observable subsciption\n   */\n  public ngOnDestroy(): void {\n    if (this.queueServiceSubscription) {\n      this.queueServiceSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Notification identifier, used as the ngFor trackby function\n   *\n   * @param   index        Index\n   * @param   notification Notifier notification\n   * @returns Notification ID as the unique identnfier\n   */\n  public identifyNotification(index: number, notification: NotifierNotification): string {\n    return notification.id;\n  }\n\n  /**\n   * Event handler, handles clicks on notification dismiss buttons\n   *\n   * @param notificationId ID of the notification to dismiss\n   */\n  public onNotificationDismiss(notificationId: string): void {\n    this.queueService.push({\n      payload: notificationId,\n      type: 'HIDE',\n    });\n  }\n\n  /**\n   * Event handler, handles notification ready events\n   *\n   * @param notificationComponent Notification component reference\n   */\n  public onNotificationReady(notificationComponent: NotifierNotificationComponent): void {\n    const currentNotification: NotifierNotification = this.notifications[this.notifications.length - 1]; // Get the latest notification\n    currentNotification.component = notificationComponent; // Save the new omponent reference\n    this.continueHandleShowAction(currentNotification); // Continue with handling the show action\n  }\n\n  /**\n   * Handle incoming actions by mapping action types to methods, and then running them\n   *\n   * @param   action Action object\n   * @returns Promise, resolved when done\n   */\n  private handleAction(action: NotifierAction): Promise<void> {\n    switch (\n      action.type // TODO: Maybe a map (actionType -> class method) is a cleaner solution here?\n    ) {\n      case 'SHOW':\n        return this.handleShowAction(action);\n      case 'HIDE':\n        return this.handleHideAction(action);\n      case 'HIDE_OLDEST':\n        return this.handleHideOldestAction(action);\n      case 'HIDE_NEWEST':\n        return this.handleHideNewestAction(action);\n      case 'HIDE_ALL':\n        return this.handleHideAllAction();\n      default:\n        return new Promise<void>((resolve: () => void) => {\n          resolve(); // Ignore unknown action types\n        });\n    }\n  }\n\n  /**\n   * Show a new notification\n   *\n   * We simply add the notification to the list, and then wait until its properly initialized / created / rendered.\n   *\n   * @param   action Action object\n   * @returns Promise, resolved when done\n   */\n  private handleShowAction(action: NotifierAction): Promise<void> {\n    return new Promise<void>((resolve: () => void) => {\n      this.tempPromiseResolver = resolve; // Save the promise resolve function so that it can be called later on by another method\n      this.addNotificationToList(new NotifierNotification(action.payload));\n    });\n  }\n\n  /**\n   * Continue to show a new notification (after the notification components is initialized / created / rendered).\n   *\n   * If this is the first (and thus only) notification, we can simply show it. Otherwhise, if stacking is disabled (or a low value), we\n   * switch out notifications, in particular we hide the existing one, and then show our new one. Yet, if stacking is enabled, we first\n   * shift all older notifications, and then show our new notification. In addition, if there are too many notification on the screen,\n   * we hide the oldest one first. Furthermore, if configured, animation overlapping is applied.\n   *\n   * @param notification New notification to show\n   */\n  private continueHandleShowAction(notification: NotifierNotification): void {\n    // First (which means only one) notification in the list?\n    const numberOfNotifications: number = this.notifications.length;\n    if (numberOfNotifications === 1) {\n      notification.component.show().then(this.tempPromiseResolver); // Done\n    } else {\n      const implicitStackingLimit = 2;\n\n      // Stacking enabled? (stacking value below 2 means stacking is disabled)\n      if (this.config.behaviour.stacking === false || this.config.behaviour.stacking < implicitStackingLimit) {\n        this.notifications[0].component.hide().then(() => {\n          this.removeNotificationFromList(this.notifications[0]);\n          notification.component.show().then(this.tempPromiseResolver); // Done\n        });\n      } else {\n        const stepPromises: Array<Promise<void>> = [];\n\n        // Are there now too many notifications?\n        if (numberOfNotifications > this.config.behaviour.stacking) {\n          const oldNotifications: Array<NotifierNotification> = this.notifications.slice(1, numberOfNotifications - 1);\n\n          // Are animations enabled?\n          if (this.config.animations.enabled) {\n            // Is animation overlap enabled?\n            if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n              stepPromises.push(this.notifications[0].component.hide());\n              setTimeout(() => {\n                stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n              }, this.config.animations.hide.speed - this.config.animations.overlap);\n              setTimeout(() => {\n                stepPromises.push(notification.component.show());\n              }, this.config.animations.hide.speed + this.config.animations.shift.speed - this.config.animations.overlap);\n            } else {\n              stepPromises.push(\n                new Promise<void>((resolve: () => void) => {\n                  this.notifications[0].component.hide().then(() => {\n                    this.shiftNotifications(oldNotifications, notification.component.getHeight(), true).then(() => {\n                      notification.component.show().then(resolve);\n                    });\n                  });\n                }),\n              );\n            }\n          } else {\n            stepPromises.push(this.notifications[0].component.hide());\n            stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n            stepPromises.push(notification.component.show());\n          }\n        } else {\n          const oldNotifications: Array<NotifierNotification> = this.notifications.slice(0, numberOfNotifications - 1);\n\n          // Are animations enabled?\n          if (this.config.animations.enabled) {\n            // Is animation overlap enabled?\n            if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n              stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n              setTimeout(() => {\n                stepPromises.push(notification.component.show());\n              }, this.config.animations.shift.speed - this.config.animations.overlap);\n            } else {\n              stepPromises.push(\n                new Promise<void>((resolve: () => void) => {\n                  this.shiftNotifications(oldNotifications, notification.component.getHeight(), true).then(() => {\n                    notification.component.show().then(resolve);\n                  });\n                }),\n              );\n            }\n          } else {\n            stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n            stepPromises.push(notification.component.show());\n          }\n        }\n\n        Promise.all(stepPromises).then(() => {\n          if (numberOfNotifications > this.config.behaviour.stacking) {\n            this.removeNotificationFromList(this.notifications[0]);\n          }\n          this.tempPromiseResolver();\n        }); // Done\n      }\n    }\n  }\n\n  /**\n   * Hide an existing notification\n   *\n   * Fist, we skip everything if there are no notifications at all, or the given notification does not exist. Then, we hide the given\n   * notification. If there exist older notifications, we then shift them around to fill the gap. Once both hiding the given notification\n   * and shifting the older notificaitons is done, the given notification gets finally removed (from the DOM).\n   *\n   * @param   action Action object, payload contains the notification ID\n   * @returns Promise, resolved when done\n   */\n  private handleHideAction(action: NotifierAction): Promise<void> {\n    return new Promise<void>((resolve: () => void) => {\n      const stepPromises: Array<Promise<void>> = [];\n\n      // Does the notification exist / are there even any notifications? (let's prevent accidential errors)\n      const notification: NotifierNotification | undefined = this.findNotificationById(action.payload);\n      if (notification === undefined) {\n        resolve();\n        return;\n      }\n\n      // Get older notifications\n      const notificationIndex: number | undefined = this.findNotificationIndexById(action.payload);\n      if (notificationIndex === undefined) {\n        resolve();\n        return;\n      }\n      const oldNotifications: Array<NotifierNotification> = this.notifications.slice(0, notificationIndex);\n\n      // Do older notifications exist, and thus do we need to shift other notifications as a consequence?\n      if (oldNotifications.length > 0) {\n        // Are animations enabled?\n        if (this.config.animations.enabled && this.config.animations.hide.speed > 0) {\n          // Is animation overlap enabled?\n          if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n            stepPromises.push(notification.component.hide());\n            setTimeout(() => {\n              stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n            }, this.config.animations.hide.speed - this.config.animations.overlap);\n          } else {\n            notification.component.hide().then(() => {\n              stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n            });\n          }\n        } else {\n          stepPromises.push(notification.component.hide());\n          stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n        }\n      } else {\n        stepPromises.push(notification.component.hide());\n      }\n\n      // Wait until both hiding and shifting is done, then remove the notification from the list\n      Promise.all(stepPromises).then(() => {\n        this.removeNotificationFromList(notification);\n        resolve(); // Done\n      });\n    });\n  }\n\n  /**\n   * Hide the oldest notification (bridge to handleHideAction)\n   *\n   * @param   action Action object\n   * @returns Promise, resolved when done\n   */\n  private handleHideOldestAction(action: NotifierAction): Promise<void> {\n    // Are there any notifications? (prevent accidential errors)\n    if (this.notifications.length === 0) {\n      return new Promise<void>((resolve: () => void) => {\n        resolve();\n      }); // Done\n    } else {\n      action.payload = this.notifications[0].id;\n      return this.handleHideAction(action);\n    }\n  }\n\n  /**\n   * Hide the newest notification (bridge to handleHideAction)\n   *\n   * @param   action Action object\n   * @returns Promise, resolved when done\n   */\n  private handleHideNewestAction(action: NotifierAction): Promise<void> {\n    // Are there any notifications? (prevent accidential errors)\n    if (this.notifications.length === 0) {\n      return new Promise<void>((resolve: () => void) => {\n        resolve();\n      }); // Done\n    } else {\n      action.payload = this.notifications[this.notifications.length - 1].id;\n      return this.handleHideAction(action);\n    }\n  }\n\n  /**\n   * Hide all notifications at once\n   *\n   * @returns Promise, resolved when done\n   */\n  private handleHideAllAction(): Promise<void> {\n    return new Promise<void>((resolve: () => void) => {\n      // Are there any notifications? (prevent accidential errors)\n      const numberOfNotifications: number = this.notifications.length;\n      if (numberOfNotifications === 0) {\n        resolve(); // Done\n        return;\n      }\n\n      // Are animations enabled?\n      if (\n        this.config.animations.enabled &&\n        this.config.animations.hide.speed > 0 &&\n        this.config.animations.hide.offset !== false &&\n        this.config.animations.hide.offset > 0\n      ) {\n        for (let i: number = numberOfNotifications - 1; i >= 0; i--) {\n          const animationOffset: number = this.config.position.vertical.position === 'top' ? numberOfNotifications - 1 : i;\n          setTimeout(() => {\n            this.notifications[i].component.hide().then(() => {\n              // Are we done here, was this the last notification to be hidden?\n              if (\n                (this.config.position.vertical.position === 'top' && i === 0) ||\n                (this.config.position.vertical.position === 'bottom' && i === numberOfNotifications - 1)\n              ) {\n                this.removeAllNotificationsFromList();\n                resolve(); // Done\n              }\n            });\n          }, this.config.animations.hide.offset * animationOffset);\n        }\n      } else {\n        const stepPromises: Array<Promise<void>> = [];\n        for (let i: number = numberOfNotifications - 1; i >= 0; i--) {\n          stepPromises.push(this.notifications[i].component.hide());\n        }\n        Promise.all(stepPromises).then(() => {\n          this.removeAllNotificationsFromList();\n          resolve(); // Done\n        });\n      }\n    });\n  }\n\n  /**\n   * Shift multiple notifications at once\n   *\n   * @param   notifications List containing the notifications to be shifted\n   * @param   distance      Distance to shift (in px)\n   * @param   toMakePlace   Flag, defining in which direciton to shift\n   * @returns Promise, resolved when done\n   */\n  private shiftNotifications(notifications: Array<NotifierNotification>, distance: number, toMakePlace: boolean): Promise<void> {\n    return new Promise<void>((resolve: () => void) => {\n      // Are there any notifications to shift?\n      if (notifications.length === 0) {\n        resolve();\n        return;\n      }\n\n      const notificationPromises: Array<Promise<void>> = [];\n      for (let i: number = notifications.length - 1; i >= 0; i--) {\n        notificationPromises.push(notifications[i].component.shift(distance, toMakePlace));\n      }\n      Promise.all(notificationPromises).then(resolve); // Done\n    });\n  }\n\n  /**\n   * Add a new notification to the list of notifications (triggers change detection)\n   *\n   * @param notification Notification to add to the list of notifications\n   */\n  private addNotificationToList(notification: NotifierNotification): void {\n    this.notifications.push(notification);\n    this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n  }\n\n  /**\n   * Remove an existing notification from the list of notifications (triggers change detection)\n   *\n   * @param notification Notification to be removed from the list of notifications\n   */\n  private removeNotificationFromList(notification: NotifierNotification): void {\n    this.notifications = this.notifications.filter((item: NotifierNotification) => item.component !== notification.component);\n    this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n  }\n\n  /**\n   * Remove all notifications from the list (triggers change detection)\n   */\n  private removeAllNotificationsFromList(): void {\n    this.notifications = [];\n    this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n  }\n\n  /**\n   * Helper: Find a notification in the notification list by a given notification ID\n   *\n   * @param   notificationId Notification ID, used for finding notification\n   * @returns Notification, undefined if not found\n   */\n  private findNotificationById(notificationId: string): NotifierNotification | undefined {\n    return this.notifications.find((currentNotification: NotifierNotification) => currentNotification.id === notificationId);\n  }\n\n  /**\n   * Helper: Find a notification's index by a given notification ID\n   *\n   * @param   notificationId Notification ID, used for finding a notification's index\n   * @returns Notification index, undefined if not found\n   */\n  private findNotificationIndexById(notificationId: string): number | undefined {\n    const notificationIndex: number = this.notifications.findIndex(\n      (currentNotification: NotifierNotification) => currentNotification.id === notificationId,\n    );\n    return notificationIndex !== -1 ? notificationIndex : undefined;\n  }\n}\n","import { NotifierAnimationPreset, NotifierAnimationPresetKeyframes } from '../models/notifier-animation.model';\n\n/**\n * Fade animation preset\n */\nexport const fade: NotifierAnimationPreset = {\n  hide: (): NotifierAnimationPresetKeyframes => {\n    return {\n      from: {\n        opacity: '1',\n      },\n      to: {\n        opacity: '0',\n      },\n    };\n  },\n  show: (): NotifierAnimationPresetKeyframes => {\n    return {\n      from: {\n        opacity: '0',\n      },\n      to: {\n        opacity: '1',\n      },\n    };\n  },\n};\n","import { NotifierAnimationPreset, NotifierAnimationPresetKeyframes } from '../models/notifier-animation.model';\nimport { NotifierConfig } from '../models/notifier-config.model';\nimport { NotifierNotification } from '../models/notifier-notification.model';\n\n/**\n * Slide animation preset\n */\nexport const slide: NotifierAnimationPreset = {\n  hide: (notification: NotifierNotification): NotifierAnimationPresetKeyframes => {\n    // Prepare variables\n    const config: NotifierConfig = notification.component.getConfig();\n    const shift: number = notification.component.getShift();\n    let from: {\n      [animatablePropertyName: string]: string;\n    };\n    let to: {\n      [animatablePropertyName: string]: string;\n    };\n\n    // Configure variables, depending on configuration and component\n    if (config.position.horizontal.position === 'left') {\n      from = {\n        transform: `translate3d( 0, ${shift}px, 0 )`,\n      };\n      to = {\n        transform: `translate3d( calc( -100% - ${config.position.horizontal.distance}px - 10px ), ${shift}px, 0 )`,\n      };\n    } else if (config.position.horizontal.position === 'right') {\n      from = {\n        transform: `translate3d( 0, ${shift}px, 0 )`,\n      };\n      to = {\n        transform: `translate3d( calc( 100% + ${config.position.horizontal.distance}px + 10px ), ${shift}px, 0 )`,\n      };\n    } else {\n      let horizontalPosition: string;\n      if (config.position.vertical.position === 'top') {\n        horizontalPosition = `calc( -100% - ${config.position.horizontal.distance}px - 10px )`;\n      } else {\n        horizontalPosition = `calc( 100% + ${config.position.horizontal.distance}px + 10px )`;\n      }\n      from = {\n        transform: `translate3d( -50%, ${shift}px, 0 )`,\n      };\n      to = {\n        transform: `translate3d( -50%, ${horizontalPosition}, 0 )`,\n      };\n    }\n\n    // Done\n    return {\n      from,\n      to,\n    };\n  },\n  show: (notification: NotifierNotification): NotifierAnimationPresetKeyframes => {\n    // Prepare variables\n    const config: NotifierConfig = notification.component.getConfig();\n    let from: {\n      [animatablePropertyName: string]: string;\n    };\n    let to: {\n      [animatablePropertyName: string]: string;\n    };\n\n    // Configure variables, depending on configuration and component\n    if (config.position.horizontal.position === 'left') {\n      from = {\n        transform: `translate3d( calc( -100% - ${config.position.horizontal.distance}px - 10px ), 0, 0 )`,\n      };\n      to = {\n        transform: 'translate3d( 0, 0, 0 )',\n      };\n    } else if (config.position.horizontal.position === 'right') {\n      from = {\n        transform: `translate3d( calc( 100% + ${config.position.horizontal.distance}px + 10px ), 0, 0 )`,\n      };\n      to = {\n        transform: 'translate3d( 0, 0, 0 )',\n      };\n    } else {\n      let horizontalPosition: string;\n      if (config.position.vertical.position === 'top') {\n        horizontalPosition = `calc( -100% - ${config.position.horizontal.distance}px - 10px )`;\n      } else {\n        horizontalPosition = `calc( 100% + ${config.position.horizontal.distance}px + 10px )`;\n      }\n      from = {\n        transform: `translate3d( -50%, ${horizontalPosition}, 0 )`,\n      };\n      to = {\n        transform: 'translate3d( -50%, 0, 0 )',\n      };\n    }\n\n    // Done\n    return {\n      from,\n      to,\n    };\n  },\n};\n","import { Injectable } from '@angular/core';\n\nimport { fade } from '../animation-presets/fade.animation-preset';\nimport { slide } from '../animation-presets/slide.animation-preset';\nimport { NotifierAnimationData, NotifierAnimationPreset, NotifierAnimationPresetKeyframes } from '../models/notifier-animation.model';\nimport { NotifierNotification } from '../models/notifier-notification.model';\n\n/**\n * Notifier animation service\n */\n@Injectable()\nexport class NotifierAnimationService {\n  /**\n   * List of animation presets (currently static)\n   */\n  private readonly animationPresets: {\n    [animationPresetName: string]: NotifierAnimationPreset;\n  };\n\n  /**\n   * Constructor\n   */\n  public constructor() {\n    this.animationPresets = {\n      fade,\n      slide,\n    };\n  }\n\n  /**\n   * Get animation data\n   *\n   * This method generates all data the Web Animations API needs to animate our notification. The result depends on both the animation\n   * direction (either in or out) as well as the notifications (and its attributes) itself.\n   *\n   * @param   direction    Animation direction, either in or out\n   * @param   notification Notification the animation data should be generated for\n   * @returns Animation information\n   */\n  public getAnimationData(direction: 'show' | 'hide', notification: NotifierNotification): NotifierAnimationData {\n    // Get all necessary animation data\n    let keyframes: NotifierAnimationPresetKeyframes;\n    let duration: number;\n    let easing: string;\n    if (direction === 'show') {\n      keyframes = this.animationPresets[notification.component.getConfig().animations.show.preset].show(notification);\n      duration = notification.component.getConfig().animations.show.speed;\n      easing = notification.component.getConfig().animations.show.easing;\n    } else {\n      keyframes = this.animationPresets[notification.component.getConfig().animations.hide.preset].hide(notification);\n      duration = notification.component.getConfig().animations.hide.speed;\n      easing = notification.component.getConfig().animations.hide.easing;\n    }\n\n    // Build and return animation data\n    return {\n      keyframes: [keyframes.from, keyframes.to],\n      options: {\n        duration,\n        easing,\n        fill: 'forwards', // Keep the newly painted state after the animation finished\n      },\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * Notifier timer service\n *\n * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a\n * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.\n */\n@Injectable()\nexport class NotifierTimerService {\n  /**\n   * Timestamp (in ms), created in the moment the timer starts\n   */\n  private now: number;\n\n  /**\n   * Remaining time (in ms)\n   */\n  private remaining: number;\n\n  /**\n   * Timeout ID, used for clearing the timeout later on\n   */\n  private timerId: number;\n\n  /**\n   * Promise resolve function, eventually getting called once the timer finishes\n   */\n  private finishPromiseResolver: () => void;\n\n  /**\n   * Constructor\n   */\n  public constructor() {\n    this.now = 0;\n    this.remaining = 0;\n  }\n\n  /**\n   * Start (or resume) the timer\n   *\n   * @param   duration Timer duration, in ms\n   * @returns          Promise, resolved once the timer finishes\n   */\n  public start(duration: number): Promise<void> {\n    return new Promise<void>((resolve: () => void) => {\n      // For the first run ...\n      this.remaining = duration;\n\n      // Setup, then start the timer\n      this.finishPromiseResolver = resolve;\n      this.continue();\n    });\n  }\n\n  /**\n   * Pause the timer\n   */\n  public pause(): void {\n    clearTimeout(this.timerId);\n    this.remaining -= new Date().getTime() - this.now;\n  }\n\n  /**\n   * Continue the timer\n   */\n  public continue(): void {\n    this.now = new Date().getTime();\n    this.timerId = window.setTimeout(() => {\n      this.finish();\n    }, this.remaining);\n  }\n\n  /**\n   * Stop the timer\n   */\n  public stop(): void {\n    clearTimeout(this.timerId);\n    this.remaining = 0;\n  }\n\n  /**\n   * Finish up the timeout by resolving the timer promise\n   */\n  private finish(): void {\n    this.finishPromiseResolver();\n  }\n}\n","import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, Renderer2 } from '@angular/core';\n\nimport { NotifierAnimationData } from '../models/notifier-animation.model';\nimport { NotifierConfig } from '../models/notifier-config.model';\nimport { NotifierNotification } from '../models/notifier-notification.model';\nimport { NotifierService } from '../services/notifier.service';\nimport { NotifierAnimationService } from '../services/notifier-animation.service';\nimport { NotifierTimerService } from '../services/notifier-timer.service';\n\n/**\n * Notifier notification component\n * -------------------------------\n * This component is responsible for actually displaying the notification on screen. In addition, it's able to show and hide this\n * notification, in particular to animate this notification in and out, as well as shift (move) this notification vertically around.\n * Furthermore, the notification component handles all interactions the user has with this notification / component, such as clicks and\n * mouse movements.\n */\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush, // (#perfmatters)\n  host: {\n    '(click)': 'onNotificationClick()',\n    '(mouseout)': 'onNotificationMouseout()',\n    '(mouseover)': 'onNotificationMouseover()',\n    class: 'notifier__notification',\n  },\n  providers: [\n    // We provide the timer to the component's local injector, so that every notification components gets its own\n    // instance of the timer service, thus running their timers independently from each other\n    NotifierTimerService,\n  ],\n  selector: 'notifier-notification',\n  templateUrl: './notifier-notification.component.html',\n})\nexport class NotifierNotificationComponent implements AfterViewInit {\n  /**\n   * Input: Notification object, contains all details necessary to construct the notification\n   */\n  @Input()\n  public notification: NotifierNotification;\n\n  /**\n   * Output: Ready event, handles the initialization success by emitting a reference to this notification component\n   */\n  @Output()\n  public ready: EventEmitter<NotifierNotificationComponent>;\n\n  /**\n   * Output: Dismiss event, handles the click on the dismiss button by emitting the notification ID of this notification component\n   */\n  @Output()\n  public dismiss: EventEmitter<string>;\n\n  /**\n   * Notifier configuration\n   */\n  public readonly config: NotifierConfig;\n\n  /**\n   * Notifier timer service\n   */\n  private readonly timerService: NotifierTimerService;\n\n  /**\n   * Notifier animation service\n   */\n  private readonly animationService: NotifierAnimationService;\n\n  /**\n   * Angular renderer, used to preserve the overall DOM abstraction & independence\n   */\n  private readonly renderer: Renderer2;\n\n  /**\n   * Native element reference, used for manipulating DOM properties\n   */\n  private readonly element: HTMLElement;\n\n  /**\n   * Current notification height, calculated and cached here (#perfmatters)\n   */\n  private elementHeight: number;\n\n  /**\n   * Current notification width, calculated and cached here (#perfmatters)\n   */\n  private elementWidth: number;\n\n  /**\n   * Current notification shift, calculated and cached here (#perfmatters)\n   */\n  private elementShift: number;\n\n  /**\n   * Constructor\n   *\n   * @param elementRef               Reference to the component's element\n   * @param renderer                 Angular renderer\n   * @param notifierService          Notifier service\n   * @param notifierTimerService     Notifier timer service\n   * @param notifierAnimationService Notifier animation service\n   */\n  public constructor(\n    elementRef: ElementRef,\n    renderer: Renderer2,\n    notifierService: NotifierService,\n    notifierTimerService: NotifierTimerService,\n    notifierAnimationService: NotifierAnimationService,\n  ) {\n    this.config = notifierService.getConfig();\n    this.ready = new EventEmitter<NotifierNotificationComponent>();\n    this.dismiss = new EventEmitter<string>();\n    this.timerService = notifierTimerService;\n    this.animationService = notifierAnimationService;\n    this.renderer = renderer;\n    this.element = elementRef.nativeElement;\n    this.elementShift = 0;\n  }\n\n  /**\n   * Component after view init lifecycle hook, setts up the component and then emits the ready event\n   */\n  public ngAfterViewInit(): void {\n    this.setup();\n    this.elementHeight = this.element.offsetHeight;\n    this.elementWidth = this.element.offsetWidth;\n    this.ready.emit(this);\n  }\n\n  /**\n   * Get the notifier config\n   *\n   * @returns Notifier configuration\n   */\n  public getConfig(): NotifierConfig {\n    return this.config;\n  }\n\n  /**\n   * Get notification element height (in px)\n   *\n   * @returns Notification element height (in px)\n   */\n  public getHeight(): number {\n    return this.elementHeight;\n  }\n\n  /**\n   * Get notification element width (in px)\n   *\n   * @returns Notification element height (in px)\n   */\n  public getWidth(): number {\n    return this.elementWidth;\n  }\n\n  /**\n   * Get notification shift offset (in px)\n   *\n   * @returns Notification element shift offset (in px)\n   */\n  public getShift(): number {\n    return this.elementShift;\n  }\n\n  /**\n   * Show (animate in) this notification\n   *\n   * @returns Promise, resolved when done\n   */\n  public show(): Promise<void> {\n    return new Promise<void>((resolve: () => void) => {\n      // Are animations enabled?\n      if (this.config.animations.enabled && this.config.animations.show.speed > 0) {\n        // Get animation data\n        const animationData: NotifierAnimationData = this.animationService.getAnimationData('show', this.notification);\n\n        // Set initial styles (styles before animation), prevents quick flicker when animation starts\n        const animatedProperties: Array<string> = Object.keys(animationData.keyframes[0]);\n        for (let i: number = animatedProperties.length - 1; i >= 0; i--) {\n          this.renderer.setStyle(this.element, animatedProperties[i], animationData.keyframes[0][animatedProperties[i]]);\n        }\n\n        // Animate notification in\n        this.renderer.setStyle(this.element, 'visibility', 'visible');\n        const animation: Animation = this.element.animate(animationData.keyframes, animationData.options);\n        animation.onfinish = () => {\n          this.startAutoHideTimer();\n          resolve(); // Done\n        };\n      } else {\n        // Show notification\n        this.renderer.setStyle(this.element, 'visibility', 'visible');\n        this.startAutoHideTimer();\n        resolve(); // Done\n      }\n    });\n  }\n\n  /**\n   * Hide (animate out) this notification\n   *\n   * @returns Promise, resolved when done\n   */\n  public hide(): Promise<void> {\n    return new Promise<void>((resolve: () => void) => {\n      this.stopAutoHideTimer();\n\n      // Are animations enabled?\n      if (this.config.animations.enabled && this.config.animations.hide.speed > 0) {\n        const animationData: NotifierAnimationData = this.animationService.getAnimationData('hide', this.notification);\n        const animation: Animation = this.element.animate(animationData.keyframes, animationData.options);\n        animation.onfinish = () => {\n          resolve(); // Done\n        };\n      } else {\n        resolve(); // Done\n      }\n    });\n  }\n\n  /**\n   * Shift (move) this notification\n   *\n   * @param   distance         Distance to shift (in px)\n   * @param   shiftToMakePlace Flag, defining in which direction to shift\n   * @returns Promise, resolved when done\n   */\n  public shift(distance: number, shiftToMakePlace: boolean): Promise<void> {\n    return new Promise<void>((resolve: () => void) => {\n      // Calculate new position (position after the shift)\n      let newElementShift: number;\n      if (\n        (this.config.position.vertical.position === 'top' && shiftToMakePlace) ||\n        (this.config.position.vertical.position === 'bottom' && !shiftToMakePlace)\n      ) {\n        newElementShift = this.elementShift + distance + this.config.position.vertical.gap;\n      } else {\n        newElementShift = this.elementShift - distance - this.config.position.vertical.gap;\n      }\n      const horizontalPosition: string = this.config.position.horizontal.position === 'middle' ? '-50%' : '0';\n\n      // Are animations enabled?\n      if (this.config.animations.enabled && this.config.animations.shift.speed > 0) {\n        const animationData: NotifierAnimationData = {\n          // TODO: Extract into animation service\n          keyframes: [\n            {\n              transform: `translate3d( ${horizontalPosition}, ${this.elementShift}px, 0 )`,\n            },\n            {\n              transform: `translate3d( ${horizontalPosition}, ${newElementShift}px, 0 )`,\n            },\n          ],\n          options: {\n            duration: this.config.animations.shift.speed,\n            easing: this.config.animations.shift.easing,\n            fill: 'forwards',\n          },\n        };\n        this.elementShift = newElementShift;\n        const animation: Animation = this.element.animate(animationData.keyframes, animationData.options);\n        animation.onfinish = () => {\n          resolve(); // Done\n        };\n      } else {\n        this.renderer.setStyle(this.element, 'transform', `translate3d( ${horizontalPosition}, ${newElementShift}px, 0 )`);\n        this.elementShift = newElementShift;\n        resolve(); // Done\n      }\n    });\n  }\n\n  /**\n   * Handle click on dismiss button\n   */\n  public onClickDismiss(): void {\n    this.dismiss.emit(this.notification.id);\n  }\n\n  /**\n   * Handle mouseover over notification area\n   */\n  public onNotificationMouseover(): void {\n    if (this.config.behaviour.onMouseover === 'pauseAutoHide') {\n      this.pauseAutoHideTimer();\n    } else if (this.config.behaviour.onMouseover === 'resetAutoHide') {\n      this.stopAutoHideTimer();\n    }\n  }\n\n  /**\n   * Handle mouseout from notification area\n   */\n  public onNotificationMouseout(): void {\n    if (this.config.behaviour.onMouseover === 'pauseAutoHide') {\n      this.continueAutoHideTimer();\n    } else if (this.config.behaviour.onMouseover === 'resetAutoHide') {\n      this.startAutoHideTimer();\n    }\n  }\n\n  /**\n   * Handle click on notification area\n   */\n  public onNotificationClick(): void {\n    if (this.config.behaviour.onClick === 'hide') {\n      this.onClickDismiss();\n    }\n  }\n\n  /**\n   * Start the auto hide timer (if enabled)\n   */\n  private startAutoHideTimer(): void {\n    if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n      this.timerService.start(this.config.behaviour.autoHide).then(() => {\n        this.onClickDismiss();\n      });\n    }\n  }\n\n  /**\n   * Pause the auto hide timer (if enabled)\n   */\n  private pauseAutoHideTimer(): void {\n    if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n      this.timerService.pause();\n    }\n  }\n\n  /**\n   * Continue the auto hide timer (if enabled)\n   */\n  private continueAutoHideTimer(): void {\n    if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n      this.timerService.continue();\n    }\n  }\n\n  /**\n   * Stop the auto hide timer (if enabled)\n   */\n  private stopAutoHideTimer(): void {\n    if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n      this.timerService.stop();\n    }\n  }\n\n  /**\n   * Initial notification setup\n   */\n  private setup(): void {\n    // Set start position (initially the exact same for every new notification)\n    if (this.config.position.horizontal.position === 'left') {\n      this.renderer.setStyle(this.element, 'left', `${this.config.position.horizontal.distance}px`);\n    } else if (this.config.position.horizontal.position === 'right') {\n      this.renderer.setStyle(this.element, 'right', `${this.config.position.horizontal.distance}px`);\n    } else {\n      this.renderer.setStyle(this.element, 'left', '50%');\n      // Let's get the GPU handle some work as well (#perfmatters)\n      this.renderer.setStyle(this.element, 'transform', 'translate3d( -50%, 0, 0 )');\n    }\n    if (this.config.position.vertical.position === 'top') {\n      this.renderer.setStyle(this.element, 'top', `${this.config.position.vertical.distance}px`);\n    } else {\n      this.renderer.setStyle(this.element, 'bottom', `${this.config.position.vertical.distance}px`);\n    }\n\n    // Add classes (responsible for visual design)\n    this.renderer.addClass(this.element, `notifier__notification--${this.notification.type}`);\n    this.renderer.addClass(this.element, `notifier__notification--${this.config.theme}`);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { NotifierContainerComponent } from './components/notifier-container.component';\nimport { NotifierNotificationComponent } from './components/notifier-notification.component';\nimport { NotifierConfig, NotifierOptions } from './models/notifier-config.model';\nimport { NotifierConfigToken, NotifierOptionsToken } from './notifier.tokens';\nimport { NotifierService } from './services/notifier.service';\nimport { NotifierAnimationService } from './services/notifier-animation.service';\nimport { NotifierQueueService } from './services/notifier-queue.service';\n\n/**\n * Factory for a notifier configuration with custom options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @param   options - Custom notifier options\n * @returns - Notifier configuration as result\n */\nexport function notifierCustomConfigFactory(options: NotifierOptions): NotifierConfig {\n  return new NotifierConfig(options);\n}\n\n/**\n * Factory for a notifier configuration with default options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @returns - Notifier configuration as result\n */\nexport function notifierDefaultConfigFactory(): NotifierConfig {\n  return new NotifierConfig({});\n}\n\n/**\n * Notifier module\n */\n@NgModule({\n  declarations: [NotifierContainerComponent, NotifierNotificationComponent],\n  exports: [NotifierContainerComponent],\n  imports: [CommonModule],\n  providers: [\n    NotifierAnimationService,\n    NotifierService,\n    NotifierQueueService,\n\n    // Provide the default notifier configuration if just the module is imported\n    {\n      provide: NotifierConfigToken,\n      useFactory: notifierDefaultConfigFactory,\n    },\n  ],\n})\nexport class NotifierModule {\n  /**\n   * Setup the notifier module with custom providers, in this case with a custom configuration based on the givne options\n   *\n   * @param   [options={}] - Custom notifier options\n   * @returns - Notifier module with custom providers\n   */\n  public static withConfig(options: NotifierOptions = {}): ModuleWithProviders<NotifierModule> {\n    return {\n      ngModule: NotifierModule,\n      providers: [\n        // Provide the options itself upfront (as we need to inject them as dependencies -- see below)\n        {\n          provide: NotifierOptionsToken,\n          useValue: options,\n        },\n\n        // Provide a custom notifier configuration, based on the given notifier options\n        {\n          deps: [NotifierOptionsToken],\n          provide: NotifierConfigToken,\n          useFactory: notifierCustomConfigFactory,\n        },\n      ],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {NotifierAnimationService as ɵc} from './lib/services/notifier-animation.service';\nexport {NotifierQueueService as ɵa} from './lib/services/notifier-queue.service';\nexport {NotifierTimerService as ɵb} from './lib/services/notifier-timer.service';"]}