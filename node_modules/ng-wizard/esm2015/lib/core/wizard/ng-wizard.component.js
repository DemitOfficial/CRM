import { __decorate, __metadata } from "tslib";
import { Component, Input, EventEmitter, Output, ContentChildren, QueryList } from '@angular/core';
import { isObservable, of } from 'rxjs';
import { NgWizardDataService } from '../ng-wizard-data.service';
import { NgWizardStep } from '../../utils/interfaces';
import { TOOLBAR_POSITION, STEP_STATE, STEP_STATUS, STEP_DIRECTIN, STEP_POSITION } from '../../utils/enums';
import { merge } from '../../utils/functions';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../ng-wizard-data.service';
import * as ɵngcc2 from '@angular/common';

function NgWizardComponent_li_2_a_1_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 7);
    ɵngcc0.ɵɵlistener("click", function NgWizardComponent_li_2_a_1_Template_a_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const step_r3 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6._showSelectedStep($event, step_r3); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelement(2, "br");
    ɵngcc0.ɵɵelementStart(3, "small");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext();
    const i_r4 = ctx_r9.index;
    const step_r3 = ctx_r9.$implicit;
    ɵngcc0.ɵɵpropertyInterpolate1("href", "#step-", i_r4, "", ɵngcc0.ɵɵsanitizeUrl);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(step_r3.title);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(step_r3.description);
} }
function NgWizardComponent_li_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 5);
    ɵngcc0.ɵɵtemplate(1, NgWizardComponent_li_2_a_1_Template, 5, 3, "a", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const step_r3 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r0._getStepCssClass(step_r3));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !step_r3.isHidden);
} }
function NgWizardComponent_div_3_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 11);
    ɵngcc0.ɵɵlistener("click", function NgWizardComponent_div_3_button_2_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13._showPreviousStep($event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r10.styles.previousButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r10.config.lang.previous);
} }
function NgWizardComponent_div_3_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 11);
    ɵngcc0.ɵɵlistener("click", function NgWizardComponent_div_3_button_3_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r15 = ɵngcc0.ɵɵnextContext(2); return ctx_r15._showNextStep($event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r11.styles.nextButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r11.config.lang.next);
} }
function NgWizardComponent_div_3_div_4_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 11);
    ɵngcc0.ɵɵlistener("click", function NgWizardComponent_div_3_div_4_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r21); const button_r18 = ctx.$implicit; const ctx_r20 = ɵngcc0.ɵɵnextContext(3); return ctx_r20._extraButtonClicked(button_r18); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const button_r18 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngClass", button_r18.class);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(button_r18.text);
} }
function NgWizardComponent_div_3_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵtemplate(1, NgWizardComponent_div_3_div_4_button_1_Template, 2, 2, "button", 13);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r12.config.toolbarSettings.toolbarExtraButtons);
} }
function NgWizardComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelementStart(1, "div", 8);
    ɵngcc0.ɵɵtemplate(2, NgWizardComponent_div_3_button_2_Template, 2, 2, "button", 9);
    ɵngcc0.ɵɵtemplate(3, NgWizardComponent_div_3_button_3_Template, 2, 2, "button", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, NgWizardComponent_div_3_div_4_Template, 2, 1, "div", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r1.styles.toolbarTop);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showPreviousButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showNextButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showExtraButtons);
} }
function NgWizardComponent_div_6_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 11);
    ɵngcc0.ɵɵlistener("click", function NgWizardComponent_div_6_button_2_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r26); const ctx_r25 = ɵngcc0.ɵɵnextContext(2); return ctx_r25._showPreviousStep($event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r22 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r22.styles.previousButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r22.config.lang.previous);
} }
function NgWizardComponent_div_6_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r28 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 11);
    ɵngcc0.ɵɵlistener("click", function NgWizardComponent_div_6_button_3_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r27 = ɵngcc0.ɵɵnextContext(2); return ctx_r27._showNextStep($event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r23 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r23.styles.nextButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r23.config.lang.next);
} }
function NgWizardComponent_div_6_div_4_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r33 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 11);
    ɵngcc0.ɵɵlistener("click", function NgWizardComponent_div_6_div_4_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r33); const button_r30 = ctx.$implicit; const ctx_r32 = ɵngcc0.ɵɵnextContext(3); return ctx_r32._extraButtonClicked(button_r30); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const button_r30 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngClass", button_r30.class);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(button_r30.text);
} }
function NgWizardComponent_div_6_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵtemplate(1, NgWizardComponent_div_6_div_4_button_1_Template, 2, 2, "button", 13);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r24 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r24.config.toolbarSettings.toolbarExtraButtons);
} }
function NgWizardComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelementStart(1, "div", 8);
    ɵngcc0.ɵɵtemplate(2, NgWizardComponent_div_6_button_2_Template, 2, 2, "button", 9);
    ɵngcc0.ɵɵtemplate(3, NgWizardComponent_div_6_button_3_Template, 2, 2, "button", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, NgWizardComponent_div_6_div_4_Template, 2, 1, "div", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r2.styles.toolbarBottom);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showPreviousButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showNextButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showExtraButtons);
} }
const _c0 = ["*"];
let NgWizardComponent = class NgWizardComponent {
    constructor(ngWizardDataService) {
        this.ngWizardDataService = ngWizardDataService;
        this.stepChanged = new EventEmitter();
        this.themeChanged = new EventEmitter();
        this.reseted = new EventEmitter();
        this.styles = {};
        this.showToolbarTop = false;
        this.showPreviousButton = false;
        this.showNextButton = false;
        this.showToolbarBottom = false;
        this.showExtraButtons = false;
        this.currentStepIndex = null; // Active step index
    }
    get pConfig() {
        return this._pConfig || {};
    }
    set pConfig(config) {
        this._pConfig = config;
    }
    ngAfterContentInit() {
        this._backupStepStates();
        this._init();
        // Set toolbar
        this._setToolbar();
        // Assign plugin events
        this._setEvents();
        this.resetWizardWatcher = this.ngWizardDataService.resetWizard$.subscribe(() => this._reset());
        this.showNextStepWatcher = this.ngWizardDataService.showNextStep$.subscribe(() => this._showNextStep());
        this.showPreviousStepWatcher = this.ngWizardDataService.showPreviousStep$.subscribe(() => this._showPreviousStep());
        this.showStepWatcher = this.ngWizardDataService.showStep$.subscribe(index => this._showStep(index));
        this.setThemeWatcher = this.ngWizardDataService.setTheme$.subscribe(theme => this._setTheme(theme));
    }
    _init() {
        // set config
        let defaultConfig = this.ngWizardDataService.getDefaultConfig();
        this.config = merge(defaultConfig, this.pConfig);
        // set step states
        this._initSteps();
        // Set the elements
        this._initStyles();
        // Show the initial step
        this._showStep(this.config.selected);
    }
    _initSteps() {
        this.steps.forEach((step, index) => {
            step.index = index;
            step.status = step.status || STEP_STATUS.untouched;
            step.state = step.state || STEP_STATE.normal;
        });
        // Mark previous steps of the active step as done
        if (this.config.selected > 0
            && this.config.anchorSettings.markDoneStep
            && this.config.anchorSettings.markAllPreviousStepsAsDone) {
            this.steps.forEach(step => {
                if (step.state != STEP_STATE.disabled && step.state != STEP_STATE.hidden) {
                    step.status = step.index < this.config.selected ? STEP_STATUS.done : step.status;
                }
            });
        }
    }
    _backupStepStates() {
        this.steps.forEach(step => {
            step.initialStatus = step.status;
            step.initialState = step.state;
        });
    }
    _restoreStepStates() {
        this.steps.forEach(step => {
            step.status = step.initialStatus;
            step.state = step.initialState;
        });
    }
    // PRIVATE FUNCTIONS
    _initStyles() {
        // Set the main element
        this.styles.main = 'ng-wizard-main ng-wizard-theme-' + this.config.theme;
        // Set anchor elements
        this.styles.step = 'nav-item'; // li
        // Make the anchor clickable
        if (this.config.anchorSettings.enableAllAnchors && this.config.anchorSettings.anchorClickable) {
            this.styles.step += ' clickable';
        }
        // Set the toolbar styles
        this.styles.toolbarTop = 'btn-toolbar ng-wizard-toolbar ng-wizard-toolbar-top justify-content-' + this.config.toolbarSettings.toolbarButtonPosition;
        this.styles.toolbarBottom = 'btn-toolbar ng-wizard-toolbar ng-wizard-toolbar-bottom justify-content-' + this.config.toolbarSettings.toolbarButtonPosition;
        // Set previous&next buttons 
        this.styles.previousButton = 'btn btn-secondary ng-wizard-btn-prev';
        this.styles.nextButton = 'btn btn-secondary ng-wizard-btn-next';
    }
    _setToolbar() {
        this.showToolbarTop = this.config.toolbarSettings.toolbarPosition == TOOLBAR_POSITION.top ||
            this.config.toolbarSettings.toolbarPosition == TOOLBAR_POSITION.both;
        this.showToolbarBottom = this.config.toolbarSettings.toolbarPosition == TOOLBAR_POSITION.bottom ||
            this.config.toolbarSettings.toolbarPosition == TOOLBAR_POSITION.both;
        this.showPreviousButton = this.config.toolbarSettings.showPreviousButton;
        this.showNextButton = this.config.toolbarSettings.showNextButton;
        this.showExtraButtons = this.config.toolbarSettings.toolbarExtraButtons && this.config.toolbarSettings.toolbarExtraButtons.length > 0;
    }
    _setEvents() {
        //TODO: keyNavigation
        // Keyboard navigation event
        if (this.config.keyNavigation) {
            // $(document).keyup(function (e) {
            //   mi._keyNav(e);
            // });
        }
    }
    _getStepCssClass(selectedStep) {
        let stepClass = this.styles.step;
        switch (selectedStep.state) {
            case STEP_STATE.disabled:
                stepClass += ' disabled';
                break;
            case STEP_STATE.error:
                stepClass += ' danger';
                break;
            case STEP_STATE.hidden:
                stepClass += ' hidden';
                break;
        }
        switch (selectedStep.status) {
            case STEP_STATUS.done:
                stepClass += ' done';
                break;
            case STEP_STATUS.active:
                stepClass += ' active';
                break;
        }
        return stepClass;
    }
    _showSelectedStep(event, selectedStep) {
        event.preventDefault();
        if (!this.config.anchorSettings.anchorClickable) {
            return;
        }
        if (!this.config.anchorSettings.enableAnchorOnDoneStep && selectedStep.status == STEP_STATUS.done) {
            return true;
        }
        if (selectedStep.index != this.currentStepIndex) {
            if (this.config.anchorSettings.enableAllAnchors && this.config.anchorSettings.anchorClickable) {
                this._showStep(selectedStep.index);
            }
            else {
                if (selectedStep.status == STEP_STATUS.done) {
                    this._showStep(selectedStep.index);
                }
            }
        }
    }
    _showNextStep(event) {
        if (event) {
            event.preventDefault();
        }
        // Find the next not disabled & hidden step
        let filteredSteps = this.steps.filter(step => {
            return step.index > (this.currentStepIndex == null ? -1 : this.currentStepIndex)
                && step.state != STEP_STATE.disabled
                && step.state != STEP_STATE.hidden;
        });
        if (filteredSteps.length == 0) {
            if (!this.config.cycleSteps) {
                return;
            }
            this._showStep(0);
        }
        else {
            this._showStep(filteredSteps.shift().index);
        }
    }
    _showPreviousStep(event) {
        if (event) {
            event.preventDefault();
        }
        // Find the previous not disabled & hidden step
        let filteredSteps = this.steps.filter(step => {
            return step.index < (this.currentStepIndex == null && this.config.cycleSteps ? this.steps.length : this.currentStepIndex)
                && step.state != STEP_STATE.disabled
                && step.state != STEP_STATE.hidden;
        });
        if (filteredSteps.length == 0) {
            if (!this.config.cycleSteps) {
                return;
            }
            this._showStep(this.steps.length - 1);
        }
        else {
            this._showStep(filteredSteps.pop().index);
        }
    }
    _showStep(selectedStepIndex) {
        // If step not found, skip
        if (selectedStepIndex >= this.steps.length || selectedStepIndex < 0) {
            return;
        }
        // If current step is requested again, skip
        if (selectedStepIndex == this.currentStepIndex) {
            return;
        }
        let selectedStep = this.steps.toArray()[selectedStepIndex];
        // If it is a disabled or hidden step, skip
        if (selectedStep.state == STEP_STATE.disabled || selectedStep.state == STEP_STATE.hidden) {
            return;
        }
        this._showLoader();
        return this._isStepChangeValid(selectedStep, this.currentStep && this.currentStep.canExit).toPromise()
            .then(isValid => {
            if (isValid) {
                return this._isStepChangeValid(selectedStep, selectedStep.canEnter).toPromise();
            }
            return of(isValid).toPromise();
        })
            .then(isValid => {
            if (isValid) {
                // Load step content
                this._loadStepContent(selectedStep);
            }
        })
            .finally(() => this._hideLoader());
    }
    _isStepChangeValid(selectedStep, condition) {
        if (typeof condition === typeof true) {
            return of(condition);
        }
        else if (condition instanceof Function) {
            let direction = this._getStepDirection(selectedStep.index);
            let result = condition({ direction: direction, fromStep: this.currentStep, toStep: selectedStep });
            if (isObservable(result)) {
                return result;
            }
            else if (typeof result === typeof true) {
                return of(result);
            }
            else {
                return of(false);
            }
        }
        return of(true);
    }
    _loadStepContent(selectedStep) {
        // Update controls
        this._setAnchor(selectedStep);
        // Set the buttons based on the step
        this._setButtons(selectedStep.index);
        // Trigger "stepChanged" event
        const args = {
            step: selectedStep,
            previousStep: this.currentStep,
            direction: this._getStepDirection(selectedStep.index),
            position: this._getStepPosition(selectedStep.index)
        };
        this.stepChanged.emit(args);
        this.ngWizardDataService.stepChanged(args);
        // Update the current index
        this.currentStepIndex = selectedStep.index;
        this.currentStep = selectedStep;
    }
    _setAnchor(selectedStep) {
        // Current step anchor > Remove other classes and add done class
        if (this.currentStep) {
            this.currentStep.status = STEP_STATUS.untouched;
            if (this.config.anchorSettings.markDoneStep) {
                this.currentStep.status = STEP_STATUS.done;
                if (this.config.anchorSettings.removeDoneStepOnNavigateBack) {
                    this.steps.forEach(step => {
                        if (step.index > selectedStep.index) {
                            step.status = STEP_STATUS.untouched;
                        }
                    });
                }
            }
        }
        // Next step anchor > Remove other classes and add active class
        selectedStep.status = STEP_STATUS.active;
    }
    _setButtons(index) {
        // Previous/Next Button enable/disable based on step
        if (!this.config.cycleSteps) {
            if (0 >= index) {
                this.styles.previousButton = 'btn btn-secondary ng-wizard-btn-prev disabled';
            }
            else {
                this.styles.previousButton = 'btn btn-secondary ng-wizard-btn-prev';
            }
            if (this.steps.length - 1 <= index) {
                this.styles.nextButton = 'btn btn-secondary ng-wizard-btn-next disabled';
            }
            else {
                this.styles.nextButton = 'btn btn-secondary ng-wizard-btn-next';
            }
        }
    }
    _extraButtonClicked(button) {
        if (button.event) {
            button.event();
        }
    }
    // HELPER FUNCTIONS
    _keyNav(event) {
        // Keyboard navigation
        switch (event.which) {
            case 37:
                // left
                this._showPreviousStep(event);
                event.preventDefault();
                break;
            case 39:
                // right
                this._showNextStep(event);
                event.preventDefault();
                break;
            default:
                return; // exit this handler for other keys
        }
    }
    _showLoader() {
        this.styles.main = 'ng-wizard-main ng-wizard-theme-' + this.config.theme + ' ng-wizard-loading';
    }
    _hideLoader() {
        this.styles.main = 'ng-wizard-main ng-wizard-theme-' + this.config.theme;
    }
    _getStepDirection(selectedStepIndex) {
        return (this.currentStepIndex != null && this.currentStepIndex != selectedStepIndex) ?
            (this.currentStepIndex < selectedStepIndex ? STEP_DIRECTIN.forward : STEP_DIRECTIN.backward) : null;
    }
    _getStepPosition(selectedStepIndex) {
        return (selectedStepIndex == 0) ? STEP_POSITION.first : (selectedStepIndex == this.steps.length - 1 ? STEP_POSITION.final : STEP_POSITION.middle);
    }
    // PUBLIC FUNCTIONS
    _setTheme(theme) {
        if (this.config.theme == theme) {
            return false;
        }
        this.config.theme = theme;
        this.styles.main = 'ng-wizard-main ng-wizard-theme-' + this.config.theme;
        // Trigger "themeChanged" event
        this.themeChanged.emit(this.config.theme);
    }
    _reset() {
        // Reset all elements and classes
        this.currentStepIndex = null;
        this.currentStep = null;
        this._restoreStepStates();
        this._init();
        // Trigger "reseted" event
        this.reseted.emit();
    }
    ngOnDestroy() {
        if (this.resetWizardWatcher) {
            this.resetWizardWatcher.unsubscribe();
        }
        if (this.showNextStepWatcher) {
            this.showNextStepWatcher.unsubscribe();
        }
        if (this.showPreviousStepWatcher) {
            this.showPreviousStepWatcher.unsubscribe();
        }
        if (this.showStepWatcher) {
            this.showStepWatcher.unsubscribe();
        }
        if (this.setThemeWatcher) {
            this.setThemeWatcher.unsubscribe();
        }
    }
};
NgWizardComponent.ɵfac = function NgWizardComponent_Factory(t) { return new (t || NgWizardComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgWizardDataService)); };
NgWizardComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgWizardComponent, selectors: [["ng-wizard"]], contentQueries: function NgWizardComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, NgWizardStep, false);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.steps = _t);
    } }, inputs: { pConfig: ["config", "pConfig"] }, outputs: { stepChanged: "stepChanged", themeChanged: "themeChanged", reseted: "reseted" }, ngContentSelectors: _c0, decls: 7, vars: 4, consts: [["id", "ngwizard", 3, "ngClass"], [1, "nav", "nav-tabs", "step-anchor"], [3, "ngClass", 4, "ngFor", "ngForOf"], [3, "ngClass", 4, "ngIf"], [1, "ng-wizard-container", "tab-content"], [3, "ngClass"], ["class", "nav-link", 3, "href", "click", 4, "ngIf"], [1, "nav-link", 3, "href", "click"], ["role", "group", 1, "btn-group", "mr-2", "ng-wizard-btn-group"], ["type", "button", 3, "ngClass", "click", 4, "ngIf"], ["class", "btn-group mr-2 ng-wizard-btn-group-extra", "role", "group", 4, "ngIf"], ["type", "button", 3, "ngClass", "click"], ["role", "group", 1, "btn-group", "mr-2", "ng-wizard-btn-group-extra"], ["type", "button", 3, "ngClass", "click", 4, "ngFor", "ngForOf"]], template: function NgWizardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "ul", 1);
        ɵngcc0.ɵɵtemplate(2, NgWizardComponent_li_2_Template, 2, 2, "li", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, NgWizardComponent_div_3_Template, 5, 4, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵprojection(5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, NgWizardComponent_div_6_Template, 5, 4, "div", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.styles.main);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.steps);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showToolbarTop);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showToolbarBottom);
    } }, directives: [ɵngcc2.NgClass, ɵngcc2.NgForOf, ɵngcc2.NgIf], styles: [""] });
NgWizardComponent.ctorParameters = () => [
    { type: NgWizardDataService }
];
__decorate([
    ContentChildren(NgWizardStep),
    __metadata("design:type", QueryList)
], NgWizardComponent.prototype, "steps", void 0);
__decorate([
    Input('config'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], NgWizardComponent.prototype, "pConfig", null);
__decorate([
    Output(),
    __metadata("design:type", Object)
], NgWizardComponent.prototype, "stepChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], NgWizardComponent.prototype, "themeChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], NgWizardComponent.prototype, "reseted", void 0);
NgWizardComponent = __decorate([ __metadata("design:paramtypes", [NgWizardDataService])
], NgWizardComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWizardComponent, [{
        type: Component,
        args: [{
                selector: 'ng-wizard',
                template: "<div id=\"ngwizard\" [ngClass]=\"styles.main\">\r\n    <ul class=\"nav nav-tabs step-anchor\">\r\n        <li *ngFor=\"let step of steps; let i = index\" [ngClass]=\"_getStepCssClass(step)\">\r\n            <a href=\"#step-{{ i }}\" (click)=\"_showSelectedStep($event, step)\" *ngIf=\"!step.isHidden\"\r\n                class=\"nav-link\">{{ step.title }}<br /><small>{{ step.description }}</small></a>\r\n        </li>\r\n    </ul>\r\n\r\n    <div *ngIf=\"showToolbarTop\" [ngClass]=\"styles.toolbarTop\">\r\n        <div class=\"btn-group mr-2 ng-wizard-btn-group\" role=\"group\">\r\n            <button *ngIf=\"showPreviousButton\" [ngClass]=\"styles.previousButton\" type=\"button\"\r\n                (click)=\"_showPreviousStep($event)\">{{ config!.lang!.previous }}</button>\r\n            <button *ngIf=\"showNextButton\" [ngClass]=\"styles.nextButton\" type=\"button\"\r\n                (click)=\"_showNextStep($event)\">{{ config!.lang!.next }}</button>\r\n        </div>\r\n\r\n        <div *ngIf=\"showExtraButtons\" class=\"btn-group mr-2 ng-wizard-btn-group-extra\" role=\"group\">\r\n            <button *ngFor=\"let button of config!.toolbarSettings!.toolbarExtraButtons; let j = index\"\r\n                [ngClass]=\"button.class\" type=\"button\" (click)=\"_extraButtonClicked(button)\">{{ button.text }}</button>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"ng-wizard-container tab-content\">\r\n        <ng-content></ng-content>\r\n    </div>\r\n\r\n    <div *ngIf=\"showToolbarBottom\" [ngClass]=\"styles.toolbarBottom\">\r\n        <div class=\"btn-group mr-2 ng-wizard-btn-group\" role=\"group\">\r\n            <button *ngIf=\"showPreviousButton\" [ngClass]=\"styles.previousButton\" type=\"button\"\r\n                (click)=\"_showPreviousStep($event)\">{{ config!.lang!.previous }}</button>\r\n            <button *ngIf=\"showNextButton\" [ngClass]=\"styles.nextButton\" type=\"button\"\r\n                (click)=\"_showNextStep($event)\">{{ config!.lang!.next }}</button>\r\n        </div>\r\n\r\n        <div *ngIf=\"showExtraButtons\" class=\"btn-group mr-2 ng-wizard-btn-group-extra\" role=\"group\">\r\n            <button *ngFor=\"let button of config!.toolbarSettings!.toolbarExtraButtons; let j = index\"\r\n                [ngClass]=\"button.class\" type=\"button\" (click)=\"_extraButtonClicked(button)\">{{ button.text }}</button>\r\n        </div>\r\n    </div>\r\n</div>",
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc1.NgWizardDataService }]; }, { stepChanged: [{
            type: Output
        }], themeChanged: [{
            type: Output
        }], reseted: [{
            type: Output
        }], pConfig: [{
            type: Input,
            args: ['config']
        }], steps: [{
            type: ContentChildren,
            args: [NgWizardStep]
        }] }); })();
export { NgWizardComponent };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctd2l6YXJkLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsibmctd2l6YXJkL2xpYi9jb3JlL3dpemFyZC9uZy13aXphcmQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFvQixLQUFLLEVBQWEsWUFBWSxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hJLE9BQU8sRUFBRSxZQUFZLEVBQTBCLEVBQUUsRUFBZ0IsTUFBTSxNQUFNLENBQUM7QUFFOUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDaEUsT0FBTyxFQUFrQixZQUFZLEVBQXNELE1BQU0sd0JBQXdCLENBQUM7QUFDMUgsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQVMsYUFBYSxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ILE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQU85QyxJQUFhLGlCQUFpQixHQUE5QixNQUFhLGlCQUFpQjtBQUFHLElBNEMvQixZQUFvQixtQkFBd0M7QUFDOUQsUUFEc0Isd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtBQUFDLFFBM0JuRCxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFtQixDQUFDO0FBQzlELFFBQVksaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBUyxDQUFDO0FBQ3JELFFBQVksWUFBTyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7QUFDL0MsUUFDRSxXQUFNLEdB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LEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFVQSxBQUFBLEFBdkNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQWtDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQXBhQSxBQUFBLEFBekNBLEFBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQVFBLEFBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBSUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBbkJBLEFBQUEsQUFMQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBNkNBLEFBQUEsQUE1Q0EsQUFBQSxBQWdkQSxBQWhkQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBBZnRlckNvbnRlbnRJbml0LCBJbnB1dCwgT25EZXN0cm95LCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgQ29udGVudENoaWxkcmVuLCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNPYnNlcnZhYmxlLCBvYnNlcnZhYmxlLCBPYnNlcnZhYmxlLCBvZiwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBOZ1dpemFyZERhdGFTZXJ2aWNlIH0gZnJvbSAnLi4vbmctd2l6YXJkLWRhdGEuc2VydmljZSc7XHJcbmltcG9ydCB7IE5nV2l6YXJkQ29uZmlnLCBOZ1dpemFyZFN0ZXAsIFRvb2xiYXJCdXR0b24sIFN0ZXBDaGFuZ2VkQXJncywgU3RlcFZhbGlkYXRpb25BcmdzIH0gZnJvbSAnLi4vLi4vdXRpbHMvaW50ZXJmYWNlcyc7XHJcbmltcG9ydCB7IFRPT0xCQVJfUE9TSVRJT04sIFNURVBfU1RBVEUsIFNURVBfU1RBVFVTLCBUSEVNRSwgU1RFUF9ESVJFQ1RJTiwgU1RFUF9QT1NJVElPTiB9IGZyb20gJy4uLy4uL3V0aWxzL2VudW1zJztcclxuaW1wb3J0IHsgbWVyZ2UgfSBmcm9tICcuLi8uLi91dGlscy9mdW5jdGlvbnMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICduZy13aXphcmQnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9uZy13aXphcmQuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL25nLXdpemFyZC5jb21wb25lbnQuY3NzJ10sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1dpemFyZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSwgQWZ0ZXJDb250ZW50SW5pdCB7XHJcblxyXG4gIEBDb250ZW50Q2hpbGRyZW4oTmdXaXphcmRTdGVwKVxyXG4gIHB1YmxpYyBzdGVwczogUXVlcnlMaXN0PE5nV2l6YXJkU3RlcD47XHJcblxyXG4gIF9wQ29uZmlnOiBOZ1dpemFyZENvbmZpZztcclxuICBnZXQgcENvbmZpZygpOiBOZ1dpemFyZENvbmZpZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fcENvbmZpZyB8fCB7fTtcclxuICB9XHJcblxyXG4gIEBJbnB1dCgnY29uZmlnJylcclxuICBzZXQgcENvbmZpZyhjb25maWc6IE5nV2l6YXJkQ29uZmlnKSB7XHJcbiAgICB0aGlzLl9wQ29uZmlnID0gY29uZmlnO1xyXG4gIH1cclxuXHJcbiAgY29uZmlnOiBOZ1dpemFyZENvbmZpZztcclxuXHJcbiAgQE91dHB1dCgpIHN0ZXBDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcjxTdGVwQ2hhbmdlZEFyZ3M+KCk7XHJcbiAgQE91dHB1dCgpIHRoZW1lQ2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXI8VEhFTUU+KCk7XHJcbiAgQE91dHB1dCgpIHJlc2V0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XHJcblxyXG4gIHN0eWxlczoge1xyXG4gICAgbWFpbj86IHN0cmluZztcclxuICAgIHN0ZXA/OiBzdHJpbmc7XHJcbiAgICBwcmV2aW91c0J1dHRvbj86IHN0cmluZztcclxuICAgIG5leHRCdXR0b24/OiBzdHJpbmc7XHJcbiAgICB0b29sYmFyVG9wPzogc3RyaW5nO1xyXG4gICAgdG9vbGJhckJvdHRvbT86IHN0cmluZztcclxuICB9ID0ge307XHJcblxyXG4gIHNob3dUb29sYmFyVG9wOiBib29sZWFuID0gZmFsc2U7XHJcbiAgc2hvd1ByZXZpb3VzQnV0dG9uOiBib29sZWFuID0gZmFsc2U7XHJcbiAgc2hvd05leHRCdXR0b246IGJvb2xlYW4gPSBmYWxzZTtcclxuICBzaG93VG9vbGJhckJvdHRvbTogYm9vbGVhbiA9IGZhbHNlO1xyXG4gIHNob3dFeHRyYUJ1dHRvbnM6IGJvb2xlYW4gPSBmYWxzZTtcclxuICBjdXJyZW50U3RlcEluZGV4OiBudW1iZXIgPSBudWxsOyAvLyBBY3RpdmUgc3RlcCBpbmRleFxyXG4gIGN1cnJlbnRTdGVwOiBOZ1dpemFyZFN0ZXA7IC8vIEFjdGl2ZSBzdGVwXHJcblxyXG4gIHJlc2V0V2l6YXJkV2F0Y2hlcjogU3Vic2NyaXB0aW9uO1xyXG4gIHNob3dOZXh0U3RlcFdhdGNoZXI6IFN1YnNjcmlwdGlvbjtcclxuICBzaG93UHJldmlvdXNTdGVwV2F0Y2hlcjogU3Vic2NyaXB0aW9uO1xyXG4gIHNob3dTdGVwV2F0Y2hlcjogU3Vic2NyaXB0aW9uO1xyXG4gIHNldFRoZW1lV2F0Y2hlcjogU3Vic2NyaXB0aW9uO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5nV2l6YXJkRGF0YVNlcnZpY2U6IE5nV2l6YXJkRGF0YVNlcnZpY2UpIHtcclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcclxuICAgIHRoaXMuX2JhY2t1cFN0ZXBTdGF0ZXMoKTtcclxuXHJcbiAgICB0aGlzLl9pbml0KCk7XHJcblxyXG4gICAgLy8gU2V0IHRvb2xiYXJcclxuICAgIHRoaXMuX3NldFRvb2xiYXIoKTtcclxuXHJcbiAgICAvLyBBc3NpZ24gcGx1Z2luIGV2ZW50c1xyXG4gICAgdGhpcy5fc2V0RXZlbnRzKCk7XHJcblxyXG4gICAgdGhpcy5yZXNldFdpemFyZFdhdGNoZXIgPSB0aGlzLm5nV2l6YXJkRGF0YVNlcnZpY2UucmVzZXRXaXphcmQkLnN1YnNjcmliZSgoKSA9PiB0aGlzLl9yZXNldCgpKTtcclxuICAgIHRoaXMuc2hvd05leHRTdGVwV2F0Y2hlciA9IHRoaXMubmdXaXphcmREYXRhU2VydmljZS5zaG93TmV4dFN0ZXAkLnN1YnNjcmliZSgoKSA9PiB0aGlzLl9zaG93TmV4dFN0ZXAoKSk7XHJcbiAgICB0aGlzLnNob3dQcmV2aW91c1N0ZXBXYXRjaGVyID0gdGhpcy5uZ1dpemFyZERhdGFTZXJ2aWNlLnNob3dQcmV2aW91c1N0ZXAkLnN1YnNjcmliZSgoKSA9PiB0aGlzLl9zaG93UHJldmlvdXNTdGVwKCkpO1xyXG4gICAgdGhpcy5zaG93U3RlcFdhdGNoZXIgPSB0aGlzLm5nV2l6YXJkRGF0YVNlcnZpY2Uuc2hvd1N0ZXAkLnN1YnNjcmliZShpbmRleCA9PiB0aGlzLl9zaG93U3RlcChpbmRleCkpO1xyXG4gICAgdGhpcy5zZXRUaGVtZVdhdGNoZXIgPSB0aGlzLm5nV2l6YXJkRGF0YVNlcnZpY2Uuc2V0VGhlbWUkLnN1YnNjcmliZSh0aGVtZSA9PiB0aGlzLl9zZXRUaGVtZSh0aGVtZSkpO1xyXG4gIH1cclxuXHJcbiAgX2luaXQoKSB7XHJcbiAgICAvLyBzZXQgY29uZmlnXHJcbiAgICBsZXQgZGVmYXVsdENvbmZpZyA9IHRoaXMubmdXaXphcmREYXRhU2VydmljZS5nZXREZWZhdWx0Q29uZmlnKCk7XHJcbiAgICB0aGlzLmNvbmZpZyA9IG1lcmdlKGRlZmF1bHRDb25maWcsIHRoaXMucENvbmZpZyk7XHJcblxyXG4gICAgLy8gc2V0IHN0ZXAgc3RhdGVzXHJcbiAgICB0aGlzLl9pbml0U3RlcHMoKTtcclxuXHJcbiAgICAvLyBTZXQgdGhlIGVsZW1lbnRzXHJcbiAgICB0aGlzLl9pbml0U3R5bGVzKCk7XHJcblxyXG4gICAgLy8gU2hvdyB0aGUgaW5pdGlhbCBzdGVwXHJcbiAgICB0aGlzLl9zaG93U3RlcCh0aGlzLmNvbmZpZy5zZWxlY3RlZCk7XHJcbiAgfVxyXG5cclxuICBfaW5pdFN0ZXBzKCkge1xyXG4gICAgdGhpcy5zdGVwcy5mb3JFYWNoKChzdGVwLCBpbmRleCkgPT4ge1xyXG4gICAgICBzdGVwLmluZGV4ID0gaW5kZXg7XHJcbiAgICAgIHN0ZXAuc3RhdHVzID0gc3RlcC5zdGF0dXMgfHwgU1RFUF9TVEFUVVMudW50b3VjaGVkO1xyXG4gICAgICBzdGVwLnN0YXRlID0gc3RlcC5zdGF0ZSB8fCBTVEVQX1NUQVRFLm5vcm1hbDtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIE1hcmsgcHJldmlvdXMgc3RlcHMgb2YgdGhlIGFjdGl2ZSBzdGVwIGFzIGRvbmVcclxuICAgIGlmICh0aGlzLmNvbmZpZy5zZWxlY3RlZCA+IDBcclxuICAgICAgJiYgdGhpcy5jb25maWcuYW5jaG9yU2V0dGluZ3MubWFya0RvbmVTdGVwXHJcbiAgICAgICYmIHRoaXMuY29uZmlnLmFuY2hvclNldHRpbmdzLm1hcmtBbGxQcmV2aW91c1N0ZXBzQXNEb25lKSB7XHJcblxyXG4gICAgICB0aGlzLnN0ZXBzLmZvckVhY2goc3RlcCA9PiB7XHJcbiAgICAgICAgaWYgKHN0ZXAuc3RhdGUgIT0gU1RFUF9TVEFURS5kaXNhYmxlZCAmJiBzdGVwLnN0YXRlICE9IFNURVBfU1RBVEUuaGlkZGVuKSB7XHJcbiAgICAgICAgICBzdGVwLnN0YXR1cyA9IHN0ZXAuaW5kZXggPCB0aGlzLmNvbmZpZy5zZWxlY3RlZCA/IFNURVBfU1RBVFVTLmRvbmUgOiBzdGVwLnN0YXR1cztcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX2JhY2t1cFN0ZXBTdGF0ZXMoKSB7XHJcbiAgICB0aGlzLnN0ZXBzLmZvckVhY2goc3RlcCA9PiB7XHJcbiAgICAgIHN0ZXAuaW5pdGlhbFN0YXR1cyA9IHN0ZXAuc3RhdHVzO1xyXG4gICAgICBzdGVwLmluaXRpYWxTdGF0ZSA9IHN0ZXAuc3RhdGU7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIF9yZXN0b3JlU3RlcFN0YXRlcygpIHtcclxuICAgIHRoaXMuc3RlcHMuZm9yRWFjaChzdGVwID0+IHtcclxuICAgICAgc3RlcC5zdGF0dXMgPSBzdGVwLmluaXRpYWxTdGF0dXM7XHJcbiAgICAgIHN0ZXAuc3RhdGUgPSBzdGVwLmluaXRpYWxTdGF0ZTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gUFJJVkFURSBGVU5DVElPTlNcclxuICBfaW5pdFN0eWxlcygpIHtcclxuICAgIC8vIFNldCB0aGUgbWFpbiBlbGVtZW50XHJcbiAgICB0aGlzLnN0eWxlcy5tYWluID0gJ25nLXdpemFyZC1tYWluIG5nLXdpemFyZC10aGVtZS0nICsgdGhpcy5jb25maWcudGhlbWU7XHJcblxyXG4gICAgLy8gU2V0IGFuY2hvciBlbGVtZW50c1xyXG4gICAgdGhpcy5zdHlsZXMuc3RlcCA9ICduYXYtaXRlbSc7IC8vIGxpXHJcblxyXG4gICAgLy8gTWFrZSB0aGUgYW5jaG9yIGNsaWNrYWJsZVxyXG4gICAgaWYgKHRoaXMuY29uZmlnLmFuY2hvclNldHRpbmdzLmVuYWJsZUFsbEFuY2hvcnMgJiYgdGhpcy5jb25maWcuYW5jaG9yU2V0dGluZ3MuYW5jaG9yQ2xpY2thYmxlKSB7XHJcbiAgICAgIHRoaXMuc3R5bGVzLnN0ZXAgKz0gJyBjbGlja2FibGUnO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFNldCB0aGUgdG9vbGJhciBzdHlsZXNcclxuICAgIHRoaXMuc3R5bGVzLnRvb2xiYXJUb3AgPSAnYnRuLXRvb2xiYXIgbmctd2l6YXJkLXRvb2xiYXIgbmctd2l6YXJkLXRvb2xiYXItdG9wIGp1c3RpZnktY29udGVudC0nICsgdGhpcy5jb25maWcudG9vbGJhclNldHRpbmdzLnRvb2xiYXJCdXR0b25Qb3NpdGlvbjtcclxuICAgIHRoaXMuc3R5bGVzLnRvb2xiYXJCb3R0b20gPSAnYnRuLXRvb2xiYXIgbmctd2l6YXJkLXRvb2xiYXIgbmctd2l6YXJkLXRvb2xiYXItYm90dG9tIGp1c3RpZnktY29udGVudC0nICsgdGhpcy5jb25maWcudG9vbGJhclNldHRpbmdzLnRvb2xiYXJCdXR0b25Qb3NpdGlvbjtcclxuXHJcbiAgICAvLyBTZXQgcHJldmlvdXMmbmV4dCBidXR0b25zIFxyXG4gICAgdGhpcy5zdHlsZXMucHJldmlvdXNCdXR0b24gPSAnYnRuIGJ0bi1zZWNvbmRhcnkgbmctd2l6YXJkLWJ0bi1wcmV2JztcclxuICAgIHRoaXMuc3R5bGVzLm5leHRCdXR0b24gPSAnYnRuIGJ0bi1zZWNvbmRhcnkgbmctd2l6YXJkLWJ0bi1uZXh0JztcclxuICB9XHJcblxyXG4gIF9zZXRUb29sYmFyKCkge1xyXG4gICAgdGhpcy5zaG93VG9vbGJhclRvcCA9IHRoaXMuY29uZmlnLnRvb2xiYXJTZXR0aW5ncy50b29sYmFyUG9zaXRpb24gPT0gVE9PTEJBUl9QT1NJVElPTi50b3AgfHxcclxuICAgICAgdGhpcy5jb25maWcudG9vbGJhclNldHRpbmdzLnRvb2xiYXJQb3NpdGlvbiA9PSBUT09MQkFSX1BPU0lUSU9OLmJvdGg7XHJcblxyXG4gICAgdGhpcy5zaG93VG9vbGJhckJvdHRvbSA9IHRoaXMuY29uZmlnLnRvb2xiYXJTZXR0aW5ncy50b29sYmFyUG9zaXRpb24gPT0gVE9PTEJBUl9QT1NJVElPTi5ib3R0b20gfHxcclxuICAgICAgdGhpcy5jb25maWcudG9vbGJhclNldHRpbmdzLnRvb2xiYXJQb3NpdGlvbiA9PSBUT09MQkFSX1BPU0lUSU9OLmJvdGg7XHJcblxyXG4gICAgdGhpcy5zaG93UHJldmlvdXNCdXR0b24gPSB0aGlzLmNvbmZpZy50b29sYmFyU2V0dGluZ3Muc2hvd1ByZXZpb3VzQnV0dG9uO1xyXG4gICAgdGhpcy5zaG93TmV4dEJ1dHRvbiA9IHRoaXMuY29uZmlnLnRvb2xiYXJTZXR0aW5ncy5zaG93TmV4dEJ1dHRvbjtcclxuXHJcbiAgICB0aGlzLnNob3dFeHRyYUJ1dHRvbnMgPSB0aGlzLmNvbmZpZy50b29sYmFyU2V0dGluZ3MudG9vbGJhckV4dHJhQnV0dG9ucyAmJiB0aGlzLmNvbmZpZy50b29sYmFyU2V0dGluZ3MudG9vbGJhckV4dHJhQnV0dG9ucy5sZW5ndGggPiAwO1xyXG4gIH1cclxuXHJcbiAgX3NldEV2ZW50cygpIHtcclxuICAgIC8vVE9ETzoga2V5TmF2aWdhdGlvblxyXG4gICAgLy8gS2V5Ym9hcmQgbmF2aWdhdGlvbiBldmVudFxyXG4gICAgaWYgKHRoaXMuY29uZmlnLmtleU5hdmlnYXRpb24pIHtcclxuICAgICAgLy8gJChkb2N1bWVudCkua2V5dXAoZnVuY3Rpb24gKGUpIHtcclxuICAgICAgLy8gICBtaS5fa2V5TmF2KGUpO1xyXG4gICAgICAvLyB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9nZXRTdGVwQ3NzQ2xhc3Moc2VsZWN0ZWRTdGVwOiBOZ1dpemFyZFN0ZXApIHtcclxuICAgIGxldCBzdGVwQ2xhc3MgPSB0aGlzLnN0eWxlcy5zdGVwO1xyXG5cclxuICAgIHN3aXRjaCAoc2VsZWN0ZWRTdGVwLnN0YXRlKSB7XHJcbiAgICAgIGNhc2UgU1RFUF9TVEFURS5kaXNhYmxlZDpcclxuICAgICAgICBzdGVwQ2xhc3MgKz0gJyBkaXNhYmxlZCc7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgU1RFUF9TVEFURS5lcnJvcjpcclxuICAgICAgICBzdGVwQ2xhc3MgKz0gJyBkYW5nZXInO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFNURVBfU1RBVEUuaGlkZGVuOlxyXG4gICAgICAgIHN0ZXBDbGFzcyArPSAnIGhpZGRlbic7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcblxyXG4gICAgc3dpdGNoIChzZWxlY3RlZFN0ZXAuc3RhdHVzKSB7XHJcbiAgICAgIGNhc2UgU1RFUF9TVEFUVVMuZG9uZTpcclxuICAgICAgICBzdGVwQ2xhc3MgKz0gJyBkb25lJztcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBTVEVQX1NUQVRVUy5hY3RpdmU6XHJcbiAgICAgICAgc3RlcENsYXNzICs9ICcgYWN0aXZlJztcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3RlcENsYXNzO1xyXG4gIH1cclxuXHJcbiAgX3Nob3dTZWxlY3RlZFN0ZXAoZXZlbnQ6IEV2ZW50LCBzZWxlY3RlZFN0ZXA6IE5nV2l6YXJkU3RlcCkge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICBpZiAoIXRoaXMuY29uZmlnLmFuY2hvclNldHRpbmdzLmFuY2hvckNsaWNrYWJsZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCF0aGlzLmNvbmZpZy5hbmNob3JTZXR0aW5ncy5lbmFibGVBbmNob3JPbkRvbmVTdGVwICYmIHNlbGVjdGVkU3RlcC5zdGF0dXMgPT0gU1RFUF9TVEFUVVMuZG9uZSkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc2VsZWN0ZWRTdGVwLmluZGV4ICE9IHRoaXMuY3VycmVudFN0ZXBJbmRleCkge1xyXG4gICAgICBpZiAodGhpcy5jb25maWcuYW5jaG9yU2V0dGluZ3MuZW5hYmxlQWxsQW5jaG9ycyAmJiB0aGlzLmNvbmZpZy5hbmNob3JTZXR0aW5ncy5hbmNob3JDbGlja2FibGUpIHtcclxuICAgICAgICB0aGlzLl9zaG93U3RlcChzZWxlY3RlZFN0ZXAuaW5kZXgpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGlmIChzZWxlY3RlZFN0ZXAuc3RhdHVzID09IFNURVBfU1RBVFVTLmRvbmUpIHtcclxuICAgICAgICAgIHRoaXMuX3Nob3dTdGVwKHNlbGVjdGVkU3RlcC5pbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfc2hvd05leHRTdGVwKGV2ZW50PzogRXZlbnQpIHtcclxuICAgIGlmIChldmVudCkge1xyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG4gICAgLy8gRmluZCB0aGUgbmV4dCBub3QgZGlzYWJsZWQgJiBoaWRkZW4gc3RlcFxyXG4gICAgbGV0IGZpbHRlcmVkU3RlcHMgPSB0aGlzLnN0ZXBzLmZpbHRlcihzdGVwID0+IHtcclxuICAgICAgcmV0dXJuIHN0ZXAuaW5kZXggPiAodGhpcy5jdXJyZW50U3RlcEluZGV4ID09IG51bGwgPyAtMSA6IHRoaXMuY3VycmVudFN0ZXBJbmRleClcclxuICAgICAgICAmJiBzdGVwLnN0YXRlICE9IFNURVBfU1RBVEUuZGlzYWJsZWRcclxuICAgICAgICAmJiBzdGVwLnN0YXRlICE9IFNURVBfU1RBVEUuaGlkZGVuO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKGZpbHRlcmVkU3RlcHMubGVuZ3RoID09IDApIHtcclxuICAgICAgaWYgKCF0aGlzLmNvbmZpZy5jeWNsZVN0ZXBzKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLl9zaG93U3RlcCgwKVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuX3Nob3dTdGVwKGZpbHRlcmVkU3RlcHMuc2hpZnQoKS5pbmRleClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9zaG93UHJldmlvdXNTdGVwKGV2ZW50PzogRXZlbnQpIHtcclxuICAgIGlmIChldmVudCkge1xyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG4gICAgLy8gRmluZCB0aGUgcHJldmlvdXMgbm90IGRpc2FibGVkICYgaGlkZGVuIHN0ZXBcclxuICAgIGxldCBmaWx0ZXJlZFN0ZXBzID0gdGhpcy5zdGVwcy5maWx0ZXIoc3RlcCA9PiB7XHJcbiAgICAgIHJldHVybiBzdGVwLmluZGV4IDwgKHRoaXMuY3VycmVudFN0ZXBJbmRleCA9PSBudWxsICYmIHRoaXMuY29uZmlnLmN5Y2xlU3RlcHMgPyB0aGlzLnN0ZXBzLmxlbmd0aCA6IHRoaXMuY3VycmVudFN0ZXBJbmRleClcclxuICAgICAgICAmJiBzdGVwLnN0YXRlICE9IFNURVBfU1RBVEUuZGlzYWJsZWRcclxuICAgICAgICAmJiBzdGVwLnN0YXRlICE9IFNURVBfU1RBVEUuaGlkZGVuO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKGZpbHRlcmVkU3RlcHMubGVuZ3RoID09IDApIHtcclxuICAgICAgaWYgKCF0aGlzLmNvbmZpZy5jeWNsZVN0ZXBzKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLl9zaG93U3RlcCh0aGlzLnN0ZXBzLmxlbmd0aCAtIDEpXHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5fc2hvd1N0ZXAoZmlsdGVyZWRTdGVwcy5wb3AoKS5pbmRleClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9zaG93U3RlcChzZWxlY3RlZFN0ZXBJbmRleDogbnVtYmVyKSB7XHJcbiAgICAvLyBJZiBzdGVwIG5vdCBmb3VuZCwgc2tpcFxyXG4gICAgaWYgKHNlbGVjdGVkU3RlcEluZGV4ID49IHRoaXMuc3RlcHMubGVuZ3RoIHx8IHNlbGVjdGVkU3RlcEluZGV4IDwgMCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSWYgY3VycmVudCBzdGVwIGlzIHJlcXVlc3RlZCBhZ2Fpbiwgc2tpcFxyXG4gICAgaWYgKHNlbGVjdGVkU3RlcEluZGV4ID09IHRoaXMuY3VycmVudFN0ZXBJbmRleCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHNlbGVjdGVkU3RlcCA9IHRoaXMuc3RlcHMudG9BcnJheSgpW3NlbGVjdGVkU3RlcEluZGV4XTtcclxuXHJcbiAgICAvLyBJZiBpdCBpcyBhIGRpc2FibGVkIG9yIGhpZGRlbiBzdGVwLCBza2lwXHJcbiAgICBpZiAoc2VsZWN0ZWRTdGVwLnN0YXRlID09IFNURVBfU1RBVEUuZGlzYWJsZWQgfHwgc2VsZWN0ZWRTdGVwLnN0YXRlID09IFNURVBfU1RBVEUuaGlkZGVuKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9zaG93TG9hZGVyKCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2lzU3RlcENoYW5nZVZhbGlkKHNlbGVjdGVkU3RlcCwgdGhpcy5jdXJyZW50U3RlcCAmJiB0aGlzLmN1cnJlbnRTdGVwLmNhbkV4aXQpLnRvUHJvbWlzZSgpXHJcbiAgICAgIC50aGVuKGlzVmFsaWQgPT4ge1xyXG4gICAgICAgIGlmIChpc1ZhbGlkKSB7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5faXNTdGVwQ2hhbmdlVmFsaWQoc2VsZWN0ZWRTdGVwLCBzZWxlY3RlZFN0ZXAuY2FuRW50ZXIpLnRvUHJvbWlzZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG9mKGlzVmFsaWQpLnRvUHJvbWlzZSgpO1xyXG4gICAgICB9KVxyXG4gICAgICAudGhlbihpc1ZhbGlkID0+IHtcclxuICAgICAgICBpZiAoaXNWYWxpZCkge1xyXG4gICAgICAgICAgLy8gTG9hZCBzdGVwIGNvbnRlbnRcclxuICAgICAgICAgIHRoaXMuX2xvYWRTdGVwQ29udGVudChzZWxlY3RlZFN0ZXApO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICAgLmZpbmFsbHkoKCkgPT4gdGhpcy5faGlkZUxvYWRlcigpKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX2lzU3RlcENoYW5nZVZhbGlkKHNlbGVjdGVkU3RlcCwgY29uZGl0aW9uOiBib29sZWFuIHwgKChhcmdzOiBTdGVwVmFsaWRhdGlvbkFyZ3MpID0+IGJvb2xlYW4pIHwgKChhcmdzOiBTdGVwVmFsaWRhdGlvbkFyZ3MpID0+IE9ic2VydmFibGU8Ym9vbGVhbj4pKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XHJcbiAgICBpZiAodHlwZW9mIGNvbmRpdGlvbiA9PT0gdHlwZW9mIHRydWUpIHtcclxuICAgICAgcmV0dXJuIG9mKDxib29sZWFuPmNvbmRpdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgZWxzZSBpZiAoY29uZGl0aW9uIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcclxuICAgICAgbGV0IGRpcmVjdGlvbiA9IHRoaXMuX2dldFN0ZXBEaXJlY3Rpb24oc2VsZWN0ZWRTdGVwLmluZGV4KTtcclxuICAgICAgbGV0IHJlc3VsdCA9IGNvbmRpdGlvbih7IGRpcmVjdGlvbjogZGlyZWN0aW9uLCBmcm9tU3RlcDogdGhpcy5jdXJyZW50U3RlcCwgdG9TdGVwOiBzZWxlY3RlZFN0ZXAgfSk7XHJcblxyXG4gICAgICBpZiAoaXNPYnNlcnZhYmxlPGJvb2xlYW4+KHJlc3VsdCkpIHtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKHR5cGVvZiByZXN1bHQgPT09IHR5cGVvZiB0cnVlKSB7XHJcbiAgICAgICAgcmV0dXJuIG9mKDxib29sZWFuPnJlc3VsdCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG9mKGZhbHNlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvZih0cnVlKTtcclxuICB9XHJcblxyXG4gIF9sb2FkU3RlcENvbnRlbnQoc2VsZWN0ZWRTdGVwOiBOZ1dpemFyZFN0ZXApIHtcclxuICAgIC8vIFVwZGF0ZSBjb250cm9sc1xyXG4gICAgdGhpcy5fc2V0QW5jaG9yKHNlbGVjdGVkU3RlcCk7XHJcbiAgICAvLyBTZXQgdGhlIGJ1dHRvbnMgYmFzZWQgb24gdGhlIHN0ZXBcclxuICAgIHRoaXMuX3NldEJ1dHRvbnMoc2VsZWN0ZWRTdGVwLmluZGV4KTtcclxuXHJcbiAgICAvLyBUcmlnZ2VyIFwic3RlcENoYW5nZWRcIiBldmVudFxyXG4gICAgY29uc3QgYXJncyA9IDxTdGVwQ2hhbmdlZEFyZ3M+e1xyXG4gICAgICBzdGVwOiBzZWxlY3RlZFN0ZXAsXHJcbiAgICAgIHByZXZpb3VzU3RlcDogdGhpcy5jdXJyZW50U3RlcCxcclxuICAgICAgZGlyZWN0aW9uOiB0aGlzLl9nZXRTdGVwRGlyZWN0aW9uKHNlbGVjdGVkU3RlcC5pbmRleCksXHJcbiAgICAgIHBvc2l0aW9uOiB0aGlzLl9nZXRTdGVwUG9zaXRpb24oc2VsZWN0ZWRTdGVwLmluZGV4KVxyXG4gICAgfTtcclxuICAgIHRoaXMuc3RlcENoYW5nZWQuZW1pdChhcmdzKTtcclxuICAgIHRoaXMubmdXaXphcmREYXRhU2VydmljZS5zdGVwQ2hhbmdlZChhcmdzKTtcclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIGN1cnJlbnQgaW5kZXhcclxuICAgIHRoaXMuY3VycmVudFN0ZXBJbmRleCA9IHNlbGVjdGVkU3RlcC5pbmRleDtcclxuICAgIHRoaXMuY3VycmVudFN0ZXAgPSBzZWxlY3RlZFN0ZXA7XHJcbiAgfVxyXG5cclxuICBfc2V0QW5jaG9yKHNlbGVjdGVkU3RlcDogTmdXaXphcmRTdGVwKSB7XHJcbiAgICAvLyBDdXJyZW50IHN0ZXAgYW5jaG9yID4gUmVtb3ZlIG90aGVyIGNsYXNzZXMgYW5kIGFkZCBkb25lIGNsYXNzXHJcbiAgICBpZiAodGhpcy5jdXJyZW50U3RlcCkge1xyXG4gICAgICB0aGlzLmN1cnJlbnRTdGVwLnN0YXR1cyA9IFNURVBfU1RBVFVTLnVudG91Y2hlZDtcclxuXHJcbiAgICAgIGlmICh0aGlzLmNvbmZpZy5hbmNob3JTZXR0aW5ncy5tYXJrRG9uZVN0ZXApIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRTdGVwLnN0YXR1cyA9IFNURVBfU1RBVFVTLmRvbmU7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5hbmNob3JTZXR0aW5ncy5yZW1vdmVEb25lU3RlcE9uTmF2aWdhdGVCYWNrKSB7XHJcbiAgICAgICAgICB0aGlzLnN0ZXBzLmZvckVhY2goc3RlcCA9PiB7XHJcbiAgICAgICAgICAgIGlmIChzdGVwLmluZGV4ID4gc2VsZWN0ZWRTdGVwLmluZGV4KSB7XHJcbiAgICAgICAgICAgICAgc3RlcC5zdGF0dXMgPSBTVEVQX1NUQVRVUy51bnRvdWNoZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIE5leHQgc3RlcCBhbmNob3IgPiBSZW1vdmUgb3RoZXIgY2xhc3NlcyBhbmQgYWRkIGFjdGl2ZSBjbGFzc1xyXG4gICAgc2VsZWN0ZWRTdGVwLnN0YXR1cyA9IFNURVBfU1RBVFVTLmFjdGl2ZTtcclxuICB9XHJcblxyXG4gIF9zZXRCdXR0b25zKGluZGV4OiBudW1iZXIpIHtcclxuICAgIC8vIFByZXZpb3VzL05leHQgQnV0dG9uIGVuYWJsZS9kaXNhYmxlIGJhc2VkIG9uIHN0ZXBcclxuICAgIGlmICghdGhpcy5jb25maWcuY3ljbGVTdGVwcykge1xyXG4gICAgICBpZiAoMCA+PSBpbmRleCkge1xyXG4gICAgICAgIHRoaXMuc3R5bGVzLnByZXZpb3VzQnV0dG9uID0gJ2J0biBidG4tc2Vjb25kYXJ5IG5nLXdpemFyZC1idG4tcHJldiBkaXNhYmxlZCc7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy5zdHlsZXMucHJldmlvdXNCdXR0b24gPSAnYnRuIGJ0bi1zZWNvbmRhcnkgbmctd2l6YXJkLWJ0bi1wcmV2JztcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRoaXMuc3RlcHMubGVuZ3RoIC0gMSA8PSBpbmRleCkge1xyXG4gICAgICAgIHRoaXMuc3R5bGVzLm5leHRCdXR0b24gPSAnYnRuIGJ0bi1zZWNvbmRhcnkgbmctd2l6YXJkLWJ0bi1uZXh0IGRpc2FibGVkJztcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB0aGlzLnN0eWxlcy5uZXh0QnV0dG9uID0gJ2J0biBidG4tc2Vjb25kYXJ5IG5nLXdpemFyZC1idG4tbmV4dCc7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9leHRyYUJ1dHRvbkNsaWNrZWQoYnV0dG9uOiBUb29sYmFyQnV0dG9uKSB7XHJcbiAgICBpZiAoYnV0dG9uLmV2ZW50KSB7XHJcbiAgICAgIGJ1dHRvbi5ldmVudCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gSEVMUEVSIEZVTkNUSU9OU1xyXG4gIF9rZXlOYXYoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgIC8vIEtleWJvYXJkIG5hdmlnYXRpb25cclxuICAgIHN3aXRjaCAoZXZlbnQud2hpY2gpIHtcclxuICAgICAgY2FzZSAzNzpcclxuICAgICAgICAvLyBsZWZ0XHJcbiAgICAgICAgdGhpcy5fc2hvd1ByZXZpb3VzU3RlcChldmVudCk7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAzOTpcclxuICAgICAgICAvLyByaWdodFxyXG4gICAgICAgIHRoaXMuX3Nob3dOZXh0U3RlcChldmVudCk7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm47IC8vIGV4aXQgdGhpcyBoYW5kbGVyIGZvciBvdGhlciBrZXlzXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfc2hvd0xvYWRlcigpIHtcclxuICAgIHRoaXMuc3R5bGVzLm1haW4gPSAnbmctd2l6YXJkLW1haW4gbmctd2l6YXJkLXRoZW1lLScgKyB0aGlzLmNvbmZpZy50aGVtZSArICcgbmctd2l6YXJkLWxvYWRpbmcnO1xyXG4gIH1cclxuXHJcbiAgX2hpZGVMb2FkZXIoKSB7XHJcbiAgICB0aGlzLnN0eWxlcy5tYWluID0gJ25nLXdpemFyZC1tYWluIG5nLXdpemFyZC10aGVtZS0nICsgdGhpcy5jb25maWcudGhlbWU7XHJcbiAgfVxyXG5cclxuICBfZ2V0U3RlcERpcmVjdGlvbihzZWxlY3RlZFN0ZXBJbmRleDogbnVtYmVyKTogU1RFUF9ESVJFQ1RJTiB7XHJcbiAgICByZXR1cm4gKHRoaXMuY3VycmVudFN0ZXBJbmRleCAhPSBudWxsICYmIHRoaXMuY3VycmVudFN0ZXBJbmRleCAhPSBzZWxlY3RlZFN0ZXBJbmRleCkgP1xyXG4gICAgICAodGhpcy5jdXJyZW50U3RlcEluZGV4IDwgc2VsZWN0ZWRTdGVwSW5kZXggPyBTVEVQX0RJUkVDVElOLmZvcndhcmQgOiBTVEVQX0RJUkVDVElOLmJhY2t3YXJkKSA6IG51bGw7XHJcbiAgfVxyXG5cclxuICBfZ2V0U3RlcFBvc2l0aW9uKHNlbGVjdGVkU3RlcEluZGV4OiBudW1iZXIpOiBTVEVQX1BPU0lUSU9OIHtcclxuICAgIHJldHVybiAoc2VsZWN0ZWRTdGVwSW5kZXggPT0gMCkgPyBTVEVQX1BPU0lUSU9OLmZpcnN0IDogKHNlbGVjdGVkU3RlcEluZGV4ID09IHRoaXMuc3RlcHMubGVuZ3RoIC0gMSA/IFNURVBfUE9TSVRJT04uZmluYWwgOiBTVEVQX1BPU0lUSU9OLm1pZGRsZSk7XHJcbiAgfVxyXG5cclxuICAvLyBQVUJMSUMgRlVOQ1RJT05TXHJcbiAgX3NldFRoZW1lKHRoZW1lOiBUSEVNRSkge1xyXG4gICAgaWYgKHRoaXMuY29uZmlnLnRoZW1lID09IHRoZW1lKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNvbmZpZy50aGVtZSA9IHRoZW1lO1xyXG4gICAgdGhpcy5zdHlsZXMubWFpbiA9ICduZy13aXphcmQtbWFpbiBuZy13aXphcmQtdGhlbWUtJyArIHRoaXMuY29uZmlnLnRoZW1lO1xyXG5cclxuICAgIC8vIFRyaWdnZXIgXCJ0aGVtZUNoYW5nZWRcIiBldmVudFxyXG4gICAgdGhpcy50aGVtZUNoYW5nZWQuZW1pdCh0aGlzLmNvbmZpZy50aGVtZSk7XHJcbiAgfVxyXG5cclxuICBfcmVzZXQoKSB7XHJcbiAgICAvLyBSZXNldCBhbGwgZWxlbWVudHMgYW5kIGNsYXNzZXNcclxuICAgIHRoaXMuY3VycmVudFN0ZXBJbmRleCA9IG51bGw7XHJcbiAgICB0aGlzLmN1cnJlbnRTdGVwID0gbnVsbDtcclxuICAgIHRoaXMuX3Jlc3RvcmVTdGVwU3RhdGVzKCk7XHJcbiAgICB0aGlzLl9pbml0KCk7XHJcblxyXG4gICAgLy8gVHJpZ2dlciBcInJlc2V0ZWRcIiBldmVudFxyXG4gICAgdGhpcy5yZXNldGVkLmVtaXQoKTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgaWYgKHRoaXMucmVzZXRXaXphcmRXYXRjaGVyKSB7XHJcbiAgICAgIHRoaXMucmVzZXRXaXphcmRXYXRjaGVyLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuc2hvd05leHRTdGVwV2F0Y2hlcikge1xyXG4gICAgICB0aGlzLnNob3dOZXh0U3RlcFdhdGNoZXIudW5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5zaG93UHJldmlvdXNTdGVwV2F0Y2hlcikge1xyXG4gICAgICB0aGlzLnNob3dQcmV2aW91c1N0ZXBXYXRjaGVyLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuc2hvd1N0ZXBXYXRjaGVyKSB7XHJcbiAgICAgIHRoaXMuc2hvd1N0ZXBXYXRjaGVyLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuc2V0VGhlbWVXYXRjaGVyKSB7XHJcbiAgICAgIHRoaXMuc2V0VGhlbWVXYXRjaGVyLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==