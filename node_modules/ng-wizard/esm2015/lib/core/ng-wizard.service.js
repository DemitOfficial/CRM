import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { NgWizardDataService } from './ng-wizard-data.service';
import * as i0 from "@angular/core";
import * as i1 from "./ng-wizard-data.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './ng-wizard-data.service';
let NgWizardService = class NgWizardService {
    constructor(ngWizardDataService) {
        this.ngWizardDataService = ngWizardDataService;
    }
    reset() {
        this.ngWizardDataService.resetWizard();
    }
    next() {
        this.ngWizardDataService.showNextStep();
    }
    previous() {
        this.ngWizardDataService.showPreviousStep();
    }
    show(index) {
        this.ngWizardDataService.showStep(index);
    }
    theme(theme) {
        this.ngWizardDataService.setTheme(theme);
    }
    stepChanged() {
        return this.ngWizardDataService.stepChangedArgs$;
    }
};
NgWizardService.ɵfac = function NgWizardService_Factory(t) { return new (t || NgWizardService)(ɵngcc0.ɵɵinject(ɵngcc1.NgWizardDataService)); };
NgWizardService.ctorParameters = () => [
    { type: NgWizardDataService }
];
NgWizardService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgWizardService_Factory() { return new NgWizardService(i0.ɵɵinject(i1.NgWizardDataService)); }, token: NgWizardService, providedIn: "root" });
NgWizardService = __decorate([ __metadata("design:paramtypes", [NgWizardDataService])
], NgWizardService);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWizardService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.NgWizardDataService }]; }, null); })();
export { NgWizardService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctd2l6YXJkLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nLXdpemFyZC9saWIvY29yZS9uZy13aXphcmQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMvRDtBQUFxQzs7O0FBT3JDLElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWU7QUFDNUIsSUFBRSxZQUNVLG1CQUF3QztBQUNqRCxRQURTLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7QUFDcEQsSUFDRSxDQUFDO0FBQ0gsSUFDRSxLQUFLO0FBQ1AsUUFBSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDM0MsSUFBRSxDQUFDO0FBQ0gsSUFDRSxJQUFJO0FBQ04sUUFBSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDNUMsSUFBRSxDQUFDO0FBQ0gsSUFDRSxRQUFRO0FBQ1YsUUFBSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztBQUNoRCxJQUFFLENBQUM7QUFDSCxJQUNFLElBQUksQ0FBQyxLQUFhO0FBQ3BCLFFBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM3QyxJQUFFLENBQUM7QUFDSCxJQUNFLEtBQUssQ0FBQyxLQUFZO0FBQ3BCLFFBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM3QyxJQUFFLENBQUM7QUFDSCxJQUNFLFdBQVc7QUFBSyxRQUNkLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLGdCQUFnQixDQUFDO0FBQ3JELElBQUUsQ0FBQztBQUNILENBQUM7K0lBQUE7QUFDRDtBQUF5QyxZQTVCUixtQkFBbUI7QUFDbEQ7QUFBRztBQUhRLGVBQWUsb0JBSDNCLFVBQVUsQ0FBQyxVQUNWLFVBQVUsRUFBRSxNQUFNLE1BQ25CLENBQUMsbkRBQ0Usa0NBRTZCLG1CQUFtQjtBQUNsRCxHQUhXLGVBQWUsQ0E2QjNCOzs7Ozs7b0ZBQ0Q7O0FBeENBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBUUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQTNCQSxBQUFBLEFBRkEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUdBLEFBQUEsQUFGQSxBQUFBLEFBNkJBLEFBN0JBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBOZ1dpemFyZERhdGFTZXJ2aWNlIH0gZnJvbSAnLi9uZy13aXphcmQtZGF0YS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVEhFTUUgfSBmcm9tICcuLi91dGlscy9lbnVtcyc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgU3RlcENoYW5nZWRBcmdzIH0gZnJvbSAnLi4vdXRpbHMvaW50ZXJmYWNlcyc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1dpemFyZFNlcnZpY2Uge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBuZ1dpemFyZERhdGFTZXJ2aWNlOiBOZ1dpemFyZERhdGFTZXJ2aWNlXHJcbiAgKSB7XHJcbiAgfVxyXG5cclxuICByZXNldCgpIHtcclxuICAgIHRoaXMubmdXaXphcmREYXRhU2VydmljZS5yZXNldFdpemFyZCgpO1xyXG4gIH1cclxuXHJcbiAgbmV4dCgpIHtcclxuICAgIHRoaXMubmdXaXphcmREYXRhU2VydmljZS5zaG93TmV4dFN0ZXAoKTtcclxuICB9XHJcblxyXG4gIHByZXZpb3VzKCkge1xyXG4gICAgdGhpcy5uZ1dpemFyZERhdGFTZXJ2aWNlLnNob3dQcmV2aW91c1N0ZXAoKTtcclxuICB9XHJcblxyXG4gIHNob3coaW5kZXg6IG51bWJlcikge1xyXG4gICAgdGhpcy5uZ1dpemFyZERhdGFTZXJ2aWNlLnNob3dTdGVwKGluZGV4KTtcclxuICB9XHJcblxyXG4gIHRoZW1lKHRoZW1lOiBUSEVNRSkge1xyXG4gICAgdGhpcy5uZ1dpemFyZERhdGFTZXJ2aWNlLnNldFRoZW1lKHRoZW1lKTtcclxuICB9XHJcblxyXG4gIHN0ZXBDaGFuZ2VkKCk6IE9ic2VydmFibGU8U3RlcENoYW5nZWRBcmdzPiB7XHJcbiAgICByZXR1cm4gdGhpcy5uZ1dpemFyZERhdGFTZXJ2aWNlLnN0ZXBDaGFuZ2VkQXJncyQ7XHJcbiAgfVxyXG59XHJcbiJdfQ==