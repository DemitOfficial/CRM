import { __assign, __decorate, __metadata, __param } from "tslib";
import { Injectable, Optional, Inject } from '@angular/core';
import { Subject } from 'rxjs';
import { DEFAULT_CONFIG } from '../utils/constants';
import { NG_WIZARD_CONFIG_TOKEN } from './ng-wizard-config.token';
import { merge } from '../utils/functions';
import * as i0 from "@angular/core";
import * as i1 from "./ng-wizard-config.token";
import * as ɵngcc0 from '@angular/core';
var NgWizardDataService = /** @class */ (function () {
    function NgWizardDataService(config) {
        this.config = config;
        this._defaultConfig = __assign({}, DEFAULT_CONFIG);
        if (this.config) {
            this._defaultConfig = merge(this._defaultConfig, this.config);
        }
        // Observable sources
        this._resetWizard = new Subject();
        this._showNextStep = new Subject();
        this._showPreviousStep = new Subject();
        this._showStep = new Subject();
        this._setTheme = new Subject();
        this._stepChangedArgs = new Subject();
        // Observable streams
        this.resetWizard$ = this._resetWizard.asObservable();
        this.showNextStep$ = this._showNextStep.asObservable();
        this.showPreviousStep$ = this._showPreviousStep.asObservable();
        this.showStep$ = this._showStep.asObservable();
        this.setTheme$ = this._setTheme.asObservable();
        this.stepChangedArgs$ = this._stepChangedArgs.asObservable();
    }
    NgWizardDataService.prototype.getDefaultConfig = function () {
        return __assign({}, this._defaultConfig);
    };
    NgWizardDataService.prototype.resetWizard = function () {
        this._resetWizard.next();
    };
    NgWizardDataService.prototype.showNextStep = function () {
        this._showNextStep.next();
    };
    NgWizardDataService.prototype.showPreviousStep = function () {
        this._showPreviousStep.next();
    };
    NgWizardDataService.prototype.showStep = function (index) {
        this._showStep.next(index);
    };
    NgWizardDataService.prototype.setTheme = function (theme) {
        this._setTheme.next(theme);
    };
    NgWizardDataService.prototype.stepChanged = function (args) {
        this._stepChangedArgs.next(args);
    };
    NgWizardDataService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_WIZARD_CONFIG_TOKEN,] }] }
    ]; };
    NgWizardDataService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgWizardDataService_Factory() { return new NgWizardDataService(i0.ɵɵinject(i1.NG_WIZARD_CONFIG_TOKEN, 8)); }, token: NgWizardDataService, providedIn: "root" });
    NgWizardDataService = __decorate([ __param(0, Optional()), __param(0, Inject(NG_WIZARD_CONFIG_TOKEN)),
        __metadata("design:paramtypes", [Object])
    ], NgWizardDataService);
NgWizardDataService.ɵfac = function NgWizardDataService_Factory(t) { return new (t || NgWizardDataService)(ɵngcc0.ɵɵinject(NG_WIZARD_CONFIG_TOKEN, 8)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWizardDataService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NG_WIZARD_CONFIG_TOKEN]
            }] }]; }, null); })();
    return NgWizardDataService;
}());
export { NgWizardDataService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,