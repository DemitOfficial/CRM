import { __decorate, __metadata } from "tslib";
import { Component, Input, EventEmitter, Output, ContentChildren, QueryList } from '@angular/core';
import { isObservable, of } from 'rxjs';
import { NgWizardDataService } from '../ng-wizard-data.service';
import { NgWizardStep } from '../../utils/interfaces';
import { TOOLBAR_POSITION, STEP_STATE, STEP_STATUS, STEP_DIRECTIN, STEP_POSITION } from '../../utils/enums';
import { merge } from '../../utils/functions';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../ng-wizard-data.service';
import * as ɵngcc2 from '@angular/common';

function NgWizardComponent_li_2_a_1_Template(rf, ctx) { if (rf & 1) {
    var _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 7);
    ɵngcc0.ɵɵlistener("click", function NgWizardComponent_li_2_a_1_Template_a_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); var step_r3 = ɵngcc0.ɵɵnextContext().$implicit; var ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6._showSelectedStep($event, step_r3); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelement(2, "br");
    ɵngcc0.ɵɵelementStart(3, "small");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r9 = ɵngcc0.ɵɵnextContext();
    var i_r4 = ctx_r9.index;
    var step_r3 = ctx_r9.$implicit;
    ɵngcc0.ɵɵpropertyInterpolate1("href", "#step-", i_r4, "", ɵngcc0.ɵɵsanitizeUrl);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(step_r3.title);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(step_r3.description);
} }
function NgWizardComponent_li_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 5);
    ɵngcc0.ɵɵtemplate(1, NgWizardComponent_li_2_a_1_Template, 5, 3, "a", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var step_r3 = ctx.$implicit;
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r0._getStepCssClass(step_r3));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !step_r3.isHidden);
} }
function NgWizardComponent_div_3_button_2_Template(rf, ctx) { if (rf & 1) {
    var _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 11);
    ɵngcc0.ɵɵlistener("click", function NgWizardComponent_div_3_button_2_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); var ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13._showPreviousStep($event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r10.styles.previousButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r10.config.lang.previous);
} }
function NgWizardComponent_div_3_button_3_Template(rf, ctx) { if (rf & 1) {
    var _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 11);
    ɵngcc0.ɵɵlistener("click", function NgWizardComponent_div_3_button_3_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r15 = ɵngcc0.ɵɵnextContext(2); return ctx_r15._showNextStep($event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r11.styles.nextButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r11.config.lang.next);
} }
function NgWizardComponent_div_3_div_4_button_1_Template(rf, ctx) { if (rf & 1) {
    var _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 11);
    ɵngcc0.ɵɵlistener("click", function NgWizardComponent_div_3_div_4_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r21); var button_r18 = ctx.$implicit; var ctx_r20 = ɵngcc0.ɵɵnextContext(3); return ctx_r20._extraButtonClicked(button_r18); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var button_r18 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngClass", button_r18.class);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(button_r18.text);
} }
function NgWizardComponent_div_3_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵtemplate(1, NgWizardComponent_div_3_div_4_button_1_Template, 2, 2, "button", 13);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r12.config.toolbarSettings.toolbarExtraButtons);
} }
function NgWizardComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelementStart(1, "div", 8);
    ɵngcc0.ɵɵtemplate(2, NgWizardComponent_div_3_button_2_Template, 2, 2, "button", 9);
    ɵngcc0.ɵɵtemplate(3, NgWizardComponent_div_3_button_3_Template, 2, 2, "button", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, NgWizardComponent_div_3_div_4_Template, 2, 1, "div", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r1.styles.toolbarTop);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showPreviousButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showNextButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showExtraButtons);
} }
function NgWizardComponent_div_6_button_2_Template(rf, ctx) { if (rf & 1) {
    var _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 11);
    ɵngcc0.ɵɵlistener("click", function NgWizardComponent_div_6_button_2_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r26); var ctx_r25 = ɵngcc0.ɵɵnextContext(2); return ctx_r25._showPreviousStep($event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r22 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r22.styles.previousButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r22.config.lang.previous);
} }
function NgWizardComponent_div_6_button_3_Template(rf, ctx) { if (rf & 1) {
    var _r28 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 11);
    ɵngcc0.ɵɵlistener("click", function NgWizardComponent_div_6_button_3_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); var ctx_r27 = ɵngcc0.ɵɵnextContext(2); return ctx_r27._showNextStep($event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r23 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r23.styles.nextButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r23.config.lang.next);
} }
function NgWizardComponent_div_6_div_4_button_1_Template(rf, ctx) { if (rf & 1) {
    var _r33 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 11);
    ɵngcc0.ɵɵlistener("click", function NgWizardComponent_div_6_div_4_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r33); var button_r30 = ctx.$implicit; var ctx_r32 = ɵngcc0.ɵɵnextContext(3); return ctx_r32._extraButtonClicked(button_r30); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var button_r30 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngClass", button_r30.class);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(button_r30.text);
} }
function NgWizardComponent_div_6_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵtemplate(1, NgWizardComponent_div_6_div_4_button_1_Template, 2, 2, "button", 13);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r24 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r24.config.toolbarSettings.toolbarExtraButtons);
} }
function NgWizardComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelementStart(1, "div", 8);
    ɵngcc0.ɵɵtemplate(2, NgWizardComponent_div_6_button_2_Template, 2, 2, "button", 9);
    ɵngcc0.ɵɵtemplate(3, NgWizardComponent_div_6_button_3_Template, 2, 2, "button", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, NgWizardComponent_div_6_div_4_Template, 2, 1, "div", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r2.styles.toolbarBottom);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showPreviousButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showNextButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showExtraButtons);
} }
var _c0 = ["*"];
var NgWizardComponent = /** @class */ (function () {
    function NgWizardComponent(ngWizardDataService) {
        this.ngWizardDataService = ngWizardDataService;
        this.stepChanged = new EventEmitter();
        this.themeChanged = new EventEmitter();
        this.reseted = new EventEmitter();
        this.styles = {};
        this.showToolbarTop = false;
        this.showPreviousButton = false;
        this.showNextButton = false;
        this.showToolbarBottom = false;
        this.showExtraButtons = false;
        this.currentStepIndex = null; // Active step index
    }
    Object.defineProperty(NgWizardComponent.prototype, "pConfig", {
        get: function () {
            return this._pConfig || {};
        },
        set: function (config) {
            this._pConfig = config;
        },
        enumerable: true,
        configurable: true
    });
    NgWizardComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this._backupStepStates();
        this._init();
        // Set toolbar
        this._setToolbar();
        // Assign plugin events
        this._setEvents();
        this.resetWizardWatcher = this.ngWizardDataService.resetWizard$.subscribe(function () { return _this._reset(); });
        this.showNextStepWatcher = this.ngWizardDataService.showNextStep$.subscribe(function () { return _this._showNextStep(); });
        this.showPreviousStepWatcher = this.ngWizardDataService.showPreviousStep$.subscribe(function () { return _this._showPreviousStep(); });
        this.showStepWatcher = this.ngWizardDataService.showStep$.subscribe(function (index) { return _this._showStep(index); });
        this.setThemeWatcher = this.ngWizardDataService.setTheme$.subscribe(function (theme) { return _this._setTheme(theme); });
    };
    NgWizardComponent.prototype._init = function () {
        // set config
        var defaultConfig = this.ngWizardDataService.getDefaultConfig();
        this.config = merge(defaultConfig, this.pConfig);
        // set step states
        this._initSteps();
        // Set the elements
        this._initStyles();
        // Show the initial step
        this._showStep(this.config.selected);
    };
    NgWizardComponent.prototype._initSteps = function () {
        var _this = this;
        this.steps.forEach(function (step, index) {
            step.index = index;
            step.status = step.status || STEP_STATUS.untouched;
            step.state = step.state || STEP_STATE.normal;
        });
        // Mark previous steps of the active step as done
        if (this.config.selected > 0
            && this.config.anchorSettings.markDoneStep
            && this.config.anchorSettings.markAllPreviousStepsAsDone) {
            this.steps.forEach(function (step) {
                if (step.state != STEP_STATE.disabled && step.state != STEP_STATE.hidden) {
                    step.status = step.index < _this.config.selected ? STEP_STATUS.done : step.status;
                }
            });
        }
    };
    NgWizardComponent.prototype._backupStepStates = function () {
        this.steps.forEach(function (step) {
            step.initialStatus = step.status;
            step.initialState = step.state;
        });
    };
    NgWizardComponent.prototype._restoreStepStates = function () {
        this.steps.forEach(function (step) {
            step.status = step.initialStatus;
            step.state = step.initialState;
        });
    };
    // PRIVATE FUNCTIONS
    NgWizardComponent.prototype._initStyles = function () {
        // Set the main element
        this.styles.main = 'ng-wizard-main ng-wizard-theme-' + this.config.theme;
        // Set anchor elements
        this.styles.step = 'nav-item'; // li
        // Make the anchor clickable
        if (this.config.anchorSettings.enableAllAnchors && this.config.anchorSettings.anchorClickable) {
            this.styles.step += ' clickable';
        }
        // Set the toolbar styles
        this.styles.toolbarTop = 'btn-toolbar ng-wizard-toolbar ng-wizard-toolbar-top justify-content-' + this.config.toolbarSettings.toolbarButtonPosition;
        this.styles.toolbarBottom = 'btn-toolbar ng-wizard-toolbar ng-wizard-toolbar-bottom justify-content-' + this.config.toolbarSettings.toolbarButtonPosition;
        // Set previous&next buttons 
        this.styles.previousButton = 'btn btn-secondary ng-wizard-btn-prev';
        this.styles.nextButton = 'btn btn-secondary ng-wizard-btn-next';
    };
    NgWizardComponent.prototype._setToolbar = function () {
        this.showToolbarTop = this.config.toolbarSettings.toolbarPosition == TOOLBAR_POSITION.top ||
            this.config.toolbarSettings.toolbarPosition == TOOLBAR_POSITION.both;
        this.showToolbarBottom = this.config.toolbarSettings.toolbarPosition == TOOLBAR_POSITION.bottom ||
            this.config.toolbarSettings.toolbarPosition == TOOLBAR_POSITION.both;
        this.showPreviousButton = this.config.toolbarSettings.showPreviousButton;
        this.showNextButton = this.config.toolbarSettings.showNextButton;
        this.showExtraButtons = this.config.toolbarSettings.toolbarExtraButtons && this.config.toolbarSettings.toolbarExtraButtons.length > 0;
    };
    NgWizardComponent.prototype._setEvents = function () {
        //TODO: keyNavigation
        // Keyboard navigation event
        if (this.config.keyNavigation) {
            // $(document).keyup(function (e) {
            //   mi._keyNav(e);
            // });
        }
    };
    NgWizardComponent.prototype._getStepCssClass = function (selectedStep) {
        var stepClass = this.styles.step;
        switch (selectedStep.state) {
            case STEP_STATE.disabled:
                stepClass += ' disabled';
                break;
            case STEP_STATE.error:
                stepClass += ' danger';
                break;
            case STEP_STATE.hidden:
                stepClass += ' hidden';
                break;
        }
        switch (selectedStep.status) {
            case STEP_STATUS.done:
                stepClass += ' done';
                break;
            case STEP_STATUS.active:
                stepClass += ' active';
                break;
        }
        return stepClass;
    };
    NgWizardComponent.prototype._showSelectedStep = function (event, selectedStep) {
        event.preventDefault();
        if (!this.config.anchorSettings.anchorClickable) {
            return;
        }
        if (!this.config.anchorSettings.enableAnchorOnDoneStep && selectedStep.status == STEP_STATUS.done) {
            return true;
        }
        if (selectedStep.index != this.currentStepIndex) {
            if (this.config.anchorSettings.enableAllAnchors && this.config.anchorSettings.anchorClickable) {
                this._showStep(selectedStep.index);
            }
            else {
                if (selectedStep.status == STEP_STATUS.done) {
                    this._showStep(selectedStep.index);
                }
            }
        }
    };
    NgWizardComponent.prototype._showNextStep = function (event) {
        var _this = this;
        if (event) {
            event.preventDefault();
        }
        // Find the next not disabled & hidden step
        var filteredSteps = this.steps.filter(function (step) {
            return step.index > (_this.currentStepIndex == null ? -1 : _this.currentStepIndex)
                && step.state != STEP_STATE.disabled
                && step.state != STEP_STATE.hidden;
        });
        if (filteredSteps.length == 0) {
            if (!this.config.cycleSteps) {
                return;
            }
            this._showStep(0);
        }
        else {
            this._showStep(filteredSteps.shift().index);
        }
    };
    NgWizardComponent.prototype._showPreviousStep = function (event) {
        var _this = this;
        if (event) {
            event.preventDefault();
        }
        // Find the previous not disabled & hidden step
        var filteredSteps = this.steps.filter(function (step) {
            return step.index < (_this.currentStepIndex == null && _this.config.cycleSteps ? _this.steps.length : _this.currentStepIndex)
                && step.state != STEP_STATE.disabled
                && step.state != STEP_STATE.hidden;
        });
        if (filteredSteps.length == 0) {
            if (!this.config.cycleSteps) {
                return;
            }
            this._showStep(this.steps.length - 1);
        }
        else {
            this._showStep(filteredSteps.pop().index);
        }
    };
    NgWizardComponent.prototype._showStep = function (selectedStepIndex) {
        var _this = this;
        // If step not found, skip
        if (selectedStepIndex >= this.steps.length || selectedStepIndex < 0) {
            return;
        }
        // If current step is requested again, skip
        if (selectedStepIndex == this.currentStepIndex) {
            return;
        }
        var selectedStep = this.steps.toArray()[selectedStepIndex];
        // If it is a disabled or hidden step, skip
        if (selectedStep.state == STEP_STATE.disabled || selectedStep.state == STEP_STATE.hidden) {
            return;
        }
        this._showLoader();
        return this._isStepChangeValid(selectedStep, this.currentStep && this.currentStep.canExit).toPromise()
            .then(function (isValid) {
            if (isValid) {
                return _this._isStepChangeValid(selectedStep, selectedStep.canEnter).toPromise();
            }
            return of(isValid).toPromise();
        })
            .then(function (isValid) {
            if (isValid) {
                // Load step content
                _this._loadStepContent(selectedStep);
            }
        })
            .finally(function () { return _this._hideLoader(); });
    };
    NgWizardComponent.prototype._isStepChangeValid = function (selectedStep, condition) {
        if (typeof condition === typeof true) {
            return of(condition);
        }
        else if (condition instanceof Function) {
            var direction = this._getStepDirection(selectedStep.index);
            var result = condition({ direction: direction, fromStep: this.currentStep, toStep: selectedStep });
            if (isObservable(result)) {
                return result;
            }
            else if (typeof result === typeof true) {
                return of(result);
            }
            else {
                return of(false);
            }
        }
        return of(true);
    };
    NgWizardComponent.prototype._loadStepContent = function (selectedStep) {
        // Update controls
        this._setAnchor(selectedStep);
        // Set the buttons based on the step
        this._setButtons(selectedStep.index);
        // Trigger "stepChanged" event
        var args = {
            step: selectedStep,
            previousStep: this.currentStep,
            direction: this._getStepDirection(selectedStep.index),
            position: this._getStepPosition(selectedStep.index)
        };
        this.stepChanged.emit(args);
        this.ngWizardDataService.stepChanged(args);
        // Update the current index
        this.currentStepIndex = selectedStep.index;
        this.currentStep = selectedStep;
    };
    NgWizardComponent.prototype._setAnchor = function (selectedStep) {
        // Current step anchor > Remove other classes and add done class
        if (this.currentStep) {
            this.currentStep.status = STEP_STATUS.untouched;
            if (this.config.anchorSettings.markDoneStep) {
                this.currentStep.status = STEP_STATUS.done;
                if (this.config.anchorSettings.removeDoneStepOnNavigateBack) {
                    this.steps.forEach(function (step) {
                        if (step.index > selectedStep.index) {
                            step.status = STEP_STATUS.untouched;
                        }
                    });
                }
            }
        }
        // Next step anchor > Remove other classes and add active class
        selectedStep.status = STEP_STATUS.active;
    };
    NgWizardComponent.prototype._setButtons = function (index) {
        // Previous/Next Button enable/disable based on step
        if (!this.config.cycleSteps) {
            if (0 >= index) {
                this.styles.previousButton = 'btn btn-secondary ng-wizard-btn-prev disabled';
            }
            else {
                this.styles.previousButton = 'btn btn-secondary ng-wizard-btn-prev';
            }
            if (this.steps.length - 1 <= index) {
                this.styles.nextButton = 'btn btn-secondary ng-wizard-btn-next disabled';
            }
            else {
                this.styles.nextButton = 'btn btn-secondary ng-wizard-btn-next';
            }
        }
    };
    NgWizardComponent.prototype._extraButtonClicked = function (button) {
        if (button.event) {
            button.event();
        }
    };
    // HELPER FUNCTIONS
    NgWizardComponent.prototype._keyNav = function (event) {
        // Keyboard navigation
        switch (event.which) {
            case 37:
                // left
                this._showPreviousStep(event);
                event.preventDefault();
                break;
            case 39:
                // right
                this._showNextStep(event);
                event.preventDefault();
                break;
            default:
                return; // exit this handler for other keys
        }
    };
    NgWizardComponent.prototype._showLoader = function () {
        this.styles.main = 'ng-wizard-main ng-wizard-theme-' + this.config.theme + ' ng-wizard-loading';
    };
    NgWizardComponent.prototype._hideLoader = function () {
        this.styles.main = 'ng-wizard-main ng-wizard-theme-' + this.config.theme;
    };
    NgWizardComponent.prototype._getStepDirection = function (selectedStepIndex) {
        return (this.currentStepIndex != null && this.currentStepIndex != selectedStepIndex) ?
            (this.currentStepIndex < selectedStepIndex ? STEP_DIRECTIN.forward : STEP_DIRECTIN.backward) : null;
    };
    NgWizardComponent.prototype._getStepPosition = function (selectedStepIndex) {
        return (selectedStepIndex == 0) ? STEP_POSITION.first : (selectedStepIndex == this.steps.length - 1 ? STEP_POSITION.final : STEP_POSITION.middle);
    };
    // PUBLIC FUNCTIONS
    NgWizardComponent.prototype._setTheme = function (theme) {
        if (this.config.theme == theme) {
            return false;
        }
        this.config.theme = theme;
        this.styles.main = 'ng-wizard-main ng-wizard-theme-' + this.config.theme;
        // Trigger "themeChanged" event
        this.themeChanged.emit(this.config.theme);
    };
    NgWizardComponent.prototype._reset = function () {
        // Reset all elements and classes
        this.currentStepIndex = null;
        this.currentStep = null;
        this._restoreStepStates();
        this._init();
        // Trigger "reseted" event
        this.reseted.emit();
    };
    NgWizardComponent.prototype.ngOnDestroy = function () {
        if (this.resetWizardWatcher) {
            this.resetWizardWatcher.unsubscribe();
        }
        if (this.showNextStepWatcher) {
            this.showNextStepWatcher.unsubscribe();
        }
        if (this.showPreviousStepWatcher) {
            this.showPreviousStepWatcher.unsubscribe();
        }
        if (this.showStepWatcher) {
            this.showStepWatcher.unsubscribe();
        }
        if (this.setThemeWatcher) {
            this.setThemeWatcher.unsubscribe();
        }
    };
    NgWizardComponent.ctorParameters = function () { return [
        { type: NgWizardDataService }
    ]; };
    __decorate([
        ContentChildren(NgWizardStep),
        __metadata("design:type", QueryList)
    ], NgWizardComponent.prototype, "steps", void 0);
    __decorate([
        Input('config'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], NgWizardComponent.prototype, "pConfig", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NgWizardComponent.prototype, "stepChanged", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NgWizardComponent.prototype, "themeChanged", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NgWizardComponent.prototype, "reseted", void 0);
    NgWizardComponent = __decorate([ __metadata("design:paramtypes", [NgWizardDataService])
    ], NgWizardComponent);
NgWizardComponent.ɵfac = function NgWizardComponent_Factory(t) { return new (t || NgWizardComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgWizardDataService)); };
NgWizardComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgWizardComponent, selectors: [["ng-wizard"]], contentQueries: function NgWizardComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, NgWizardStep, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.steps = _t);
    } }, inputs: { pConfig: ["config", "pConfig"] }, outputs: { stepChanged: "stepChanged", themeChanged: "themeChanged", reseted: "reseted" }, ngContentSelectors: _c0, decls: 7, vars: 4, consts: [["id", "ngwizard", 3, "ngClass"], [1, "nav", "nav-tabs", "step-anchor"], [3, "ngClass", 4, "ngFor", "ngForOf"], [3, "ngClass", 4, "ngIf"], [1, "ng-wizard-container", "tab-content"], [3, "ngClass"], ["class", "nav-link", 3, "href", "click", 4, "ngIf"], [1, "nav-link", 3, "href", "click"], ["role", "group", 1, "btn-group", "mr-2", "ng-wizard-btn-group"], ["type", "button", 3, "ngClass", "click", 4, "ngIf"], ["class", "btn-group mr-2 ng-wizard-btn-group-extra", "role", "group", 4, "ngIf"], ["type", "button", 3, "ngClass", "click"], ["role", "group", 1, "btn-group", "mr-2", "ng-wizard-btn-group-extra"], ["type", "button", 3, "ngClass", "click", 4, "ngFor", "ngForOf"]], template: function NgWizardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "ul", 1);
        ɵngcc0.ɵɵtemplate(2, NgWizardComponent_li_2_Template, 2, 2, "li", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, NgWizardComponent_div_3_Template, 5, 4, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵprojection(5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, NgWizardComponent_div_6_Template, 5, 4, "div", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.styles.main);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.steps);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showToolbarTop);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showToolbarBottom);
    } }, directives: [ɵngcc2.NgClass, ɵngcc2.NgForOf, ɵngcc2.NgIf], styles: [""] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWizardComponent, [{
        type: Component,
        args: [{
                selector: 'ng-wizard',
                template: "<div id=\"ngwizard\" [ngClass]=\"styles.main\">\r\n    <ul class=\"nav nav-tabs step-anchor\">\r\n        <li *ngFor=\"let step of steps; let i = index\" [ngClass]=\"_getStepCssClass(step)\">\r\n            <a href=\"#step-{{ i }}\" (click)=\"_showSelectedStep($event, step)\" *ngIf=\"!step.isHidden\"\r\n                class=\"nav-link\">{{ step.title }}<br /><small>{{ step.description }}</small></a>\r\n        </li>\r\n    </ul>\r\n\r\n    <div *ngIf=\"showToolbarTop\" [ngClass]=\"styles.toolbarTop\">\r\n        <div class=\"btn-group mr-2 ng-wizard-btn-group\" role=\"group\">\r\n            <button *ngIf=\"showPreviousButton\" [ngClass]=\"styles.previousButton\" type=\"button\"\r\n                (click)=\"_showPreviousStep($event)\">{{ config!.lang!.previous }}</button>\r\n            <button *ngIf=\"showNextButton\" [ngClass]=\"styles.nextButton\" type=\"button\"\r\n                (click)=\"_showNextStep($event)\">{{ config!.lang!.next }}</button>\r\n        </div>\r\n\r\n        <div *ngIf=\"showExtraButtons\" class=\"btn-group mr-2 ng-wizard-btn-group-extra\" role=\"group\">\r\n            <button *ngFor=\"let button of config!.toolbarSettings!.toolbarExtraButtons; let j = index\"\r\n                [ngClass]=\"button.class\" type=\"button\" (click)=\"_extraButtonClicked(button)\">{{ button.text }}</button>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"ng-wizard-container tab-content\">\r\n        <ng-content></ng-content>\r\n    </div>\r\n\r\n    <div *ngIf=\"showToolbarBottom\" [ngClass]=\"styles.toolbarBottom\">\r\n        <div class=\"btn-group mr-2 ng-wizard-btn-group\" role=\"group\">\r\n            <button *ngIf=\"showPreviousButton\" [ngClass]=\"styles.previousButton\" type=\"button\"\r\n                (click)=\"_showPreviousStep($event)\">{{ config!.lang!.previous }}</button>\r\n            <button *ngIf=\"showNextButton\" [ngClass]=\"styles.nextButton\" type=\"button\"\r\n                (click)=\"_showNextStep($event)\">{{ config!.lang!.next }}</button>\r\n        </div>\r\n\r\n        <div *ngIf=\"showExtraButtons\" class=\"btn-group mr-2 ng-wizard-btn-group-extra\" role=\"group\">\r\n            <button *ngFor=\"let button of config!.toolbarSettings!.toolbarExtraButtons; let j = index\"\r\n                [ngClass]=\"button.class\" type=\"button\" (click)=\"_extraButtonClicked(button)\">{{ button.text }}</button>\r\n        </div>\r\n    </div>\r\n</div>",
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc1.NgWizardDataService }]; }, { stepChanged: [{
            type: Output
        }], themeChanged: [{
            type: Output
        }], reseted: [{
            type: Output
        }], pConfig: [{
            type: Input,
            args: ['config']
        }], steps: [{
            type: ContentChildren,
            args: [NgWizardStep]
        }] }); })();
    return NgWizardComponent;
}());
export { NgWizardComponent };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,