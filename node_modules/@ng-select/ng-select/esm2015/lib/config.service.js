/**
 * @fileoverview added by tsickle
 * Generated from: lib/config.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class NgSelectConfig {
    constructor() {
        this.notFoundText = 'No items found';
        this.typeToSearchText = 'Type to search';
        this.addTagText = 'Add item';
        this.loadingText = 'Loading...';
        this.clearAllText = 'Clear all';
        this.disableVirtualScroll = true;
        this.openOnEnter = true;
        this.appearance = 'underline';
    }
}
NgSelectConfig.ɵfac = function NgSelectConfig_Factory(t) { return new (t || NgSelectConfig)(); };
/** @nocollapse */ NgSelectConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgSelectConfig_Factory() { return new NgSelectConfig(); }, token: NgSelectConfig, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgSelectConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();
if (false) {
    /** @type {?} */
    NgSelectConfig.prototype.placeholder;
    /** @type {?} */
    NgSelectConfig.prototype.notFoundText;
    /** @type {?} */
    NgSelectConfig.prototype.typeToSearchText;
    /** @type {?} */
    NgSelectConfig.prototype.addTagText;
    /** @type {?} */
    NgSelectConfig.prototype.loadingText;
    /** @type {?} */
    NgSelectConfig.prototype.clearAllText;
    /** @type {?} */
    NgSelectConfig.prototype.disableVirtualScroll;
    /** @type {?} */
    NgSelectConfig.prototype.openOnEnter;
    /** @type {?} */
    NgSelectConfig.prototype.appendTo;
    /** @type {?} */
    NgSelectConfig.prototype.bindValue;
    /** @type {?} */
    NgSelectConfig.prototype.appearance;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvcnVubmVyL3dvcmsvbmctc2VsZWN0L25nLXNlbGVjdC9zcmMvbmctc2VsZWN0L2xpYi9jb25maWcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0M7O0FBRUEsTUFBTSxPQUFPLGNBQWM7QUFDM0IsSUFGQTtBQUFnQixRQUdaLGlCQUFZLEdBQUcsZ0JBQWdCLENBQUM7QUFDcEMsUUFBSSxxQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztBQUN4QyxRQUFJLGVBQVUsR0FBRyxVQUFVLENBQUM7QUFDNUIsUUFBSSxnQkFBVyxHQUFHLFlBQVksQ0FBQztBQUMvQixRQUFJLGlCQUFZLEdBQUcsV0FBVyxDQUFDO0FBQy9CLFFBQUkseUJBQW9CLEdBQUcsSUFBSSxDQUFDO0FBQ2hDLFFBQUksZ0JBQVcsR0FBRyxJQUFJLENBQUM7QUFDdkIsUUFFSSxlQUFVLEdBQUcsV0FBVyxDQUFDO0FBQzdCLEtBQUM7QUFDRDswQ0FkQyxVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLGNBQzdCO0FBQUM7Ozs7Z0RBTU47QUFBQztBQUFhO0FBQ1gsSUFOQyxxQ0FBb0I7QUFDeEI7QUFBcUIsSUFBakIsc0NBQWdDO0FBQ3BDO0FBQXFCLElBQWpCLDBDQUFvQztBQUN4QztBQUFxQixJQUFqQixvQ0FBd0I7QUFDNUI7QUFBcUIsSUFBakIscUNBQTJCO0FBQy9CO0FBQXFCLElBQWpCLHNDQUEyQjtBQUMvQjtBQUFxQixJQUFqQiw4Q0FBNEI7QUFDaEM7QUFBcUIsSUFBakIscUNBQW1CO0FBQ3ZCO0FBQXFCLElBQWpCLGtDQUFpQjtBQUNyQjtBQUFxQixJQUFqQixtQ0FBa0I7QUFDdEI7QUFBcUIsSUFBakIsb0NBQXlCO0FBQzdCO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgTmdTZWxlY3RDb25maWcge1xuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gICAgbm90Rm91bmRUZXh0ID0gJ05vIGl0ZW1zIGZvdW5kJztcbiAgICB0eXBlVG9TZWFyY2hUZXh0ID0gJ1R5cGUgdG8gc2VhcmNoJztcbiAgICBhZGRUYWdUZXh0ID0gJ0FkZCBpdGVtJztcbiAgICBsb2FkaW5nVGV4dCA9ICdMb2FkaW5nLi4uJztcbiAgICBjbGVhckFsbFRleHQgPSAnQ2xlYXIgYWxsJztcbiAgICBkaXNhYmxlVmlydHVhbFNjcm9sbCA9IHRydWU7XG4gICAgb3Blbk9uRW50ZXIgPSB0cnVlO1xuICAgIGFwcGVuZFRvOiBzdHJpbmc7XG4gICAgYmluZFZhbHVlOiBzdHJpbmc7XG4gICAgYXBwZWFyYW5jZSA9ICd1bmRlcmxpbmUnO1xufVxuIl19