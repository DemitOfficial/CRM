import { EventEmitter, Component, ChangeDetectorRef, ElementRef, Input, Output, Injectable, ComponentFactoryResolver, ApplicationRef, Injector, ɵɵdefineInjectable, ɵɵinject, INJECTOR, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxNotificationMsgComponent {
    /**
     * @param {?} cd
     * @param {?} element
     */
    constructor(cd, element) {
        this.cd = cd;
        this.element = element;
        this.status = NgxNotificationStatusMsg.NONE;
        this.direction = NgxNotificationDirection.TOP;
        this.displayProgressBar = true;
        this.displayIcon = true;
        this.delay = 3000;
        this.closeable = true;
        this.destroy = new EventEmitter();
        this.componentState = NgxNotificationMsgComponentState.CLOSE;
        this.componentStates = NgxNotificationMsgComponentState;
        this.statusToClass = {
            [NgxNotificationStatusMsg.NONE]: '',
            [NgxNotificationStatusMsg.INFO]: '#0067FF',
            [NgxNotificationStatusMsg.FAILURE]: '#FE355A',
            [NgxNotificationStatusMsg.SUCCESS]: '#00CC69'
        };
        this.msgs = [];
        this.NONE = 'NONE';
    }
    /**
     * @param {?} messages
     * @return {?}
     */
    set messages(messages) {
        this.msgs = [...messages];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.componentState = NgxNotificationMsgComponentState.OPEN;
            this.cd.markForCheck();
        }));
    }
    /**
     * @return {?}
     */
    isNotificationMsgOpened() {
        return this.componentState === this.componentStates.OPEN;
    }
    /**
     * @return {?}
     */
    isProgressBarDisplayed() {
        return this.status !== this.NONE && this.displayProgressBar;
    }
    /**
     * @return {?}
     */
    isIconDisplayed() {
        return this.status !== this.NONE && this.displayIcon;
    }
    /**
     * @return {?}
     */
    getPosition() {
        return Object.assign({}, this.getDefaultPosition(), (this.componentState === this.componentStates.OPEN && this.getDynamicPosition()));
    }
    /**
     * @return {?}
     */
    mouseEnter() {
        this.mouseEnterTimestamp = performance.now();
        clearTimeout(this.closeTimeout);
        clearTimeout(this.destroyTimeout);
    }
    /**
     * @return {?}
     */
    mouseLeave() {
        /** @type {?} */
        const timestampGap = this.mouseEnterTimestamp - this.referencePointTimestamp;
        this.autoSelfDestroy(this.delay - timestampGap);
        this.referencePointTimestamp = performance.now() - timestampGap;
    }
    /**
     * @return {?}
     */
    close() {
        this.componentState = NgxNotificationMsgComponentState.CLOSE;
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.destroy.emit();
        }), NgxNotificationMsgComponent.DELAY_ON_CLICK);
    }
    /**
     * @private
     * @return {?}
     */
    init() {
        this.referencePointTimestamp = performance.now();
        this.initTheme();
        this.autoSelfDestroy(this.delay);
    }
    /**
     * @private
     * @return {?}
     */
    initTheme() {
        this.element.nativeElement.style.setProperty('--ngx-notification-msg-delay', `${this.delay}ms`);
        this.element.nativeElement.style.setProperty('--ngx-notification-msg-color', this.statusToClass[this.status]);
    }
    /**
     * @private
     * @return {?}
     */
    getDefaultPosition() {
        switch (this.direction) {
            case NgxNotificationDirection.TOP:
                return { top: '0', right: '50%', transform: `translate(50%, -100%)` };
            case NgxNotificationDirection.TOP_RIGHT:
                return { top: '0', right: '20px', transform: `translateY(-100%)` };
            case NgxNotificationDirection.TOP_LEFT:
                return { top: '0', left: '20px', transform: `translateY(-100%)` };
            case NgxNotificationDirection.BOTTOM:
                return { bottom: '0', right: '50%', transform: `translateX(50%)` };
            case NgxNotificationDirection.BOTTOM_RIGHT:
                return { bottom: '0', right: '20px', transform: `translateY(100%)` };
            case NgxNotificationDirection.BOTTOM_LEFT:
                return { bottom: '0', left: '20px', transform: `translateY(100%)` };
        }
    }
    /**
     * @private
     * @return {?}
     */
    getDynamicPosition() {
        /** @type {?} */
        const top = `calc(${100 * this.index}% + ${20 * (this.index + 1)}px)`;
        /** @type {?} */
        const bottom = `calc(${-100 * (this.index)}% + ${-20 * (this.index + 1)}px)`;
        switch (this.direction) {
            case NgxNotificationDirection.TOP:
                return { transform: `translate(50%, ${top})` };
            case NgxNotificationDirection.TOP_RIGHT:
                return { transform: `translateY(${top})` };
            case NgxNotificationDirection.TOP_LEFT:
                return { transform: `translateY(${top})` };
            case NgxNotificationDirection.BOTTOM:
                return { transform: `translate(50%, ${bottom})` };
            case NgxNotificationDirection.BOTTOM_RIGHT:
                return { transform: `translateY(${bottom})` };
            case NgxNotificationDirection.BOTTOM_LEFT:
                return { transform: `translateY(${bottom})` };
        }
    }
    /**
     * @private
     * @param {?} delay
     * @return {?}
     */
    autoSelfDestroy(delay) {
        this.closeTimeout = setTimeout((/**
         * @return {?}
         */
        () => {
            this.componentState = NgxNotificationMsgComponentState.CLOSE;
            this.cd.markForCheck();
        }), delay);
        this.destroyTimeout = setTimeout((/**
         * @return {?}
         */
        () => {
            this.destroy.emit();
        }), delay + NgxNotificationMsgComponent.DELAY_ON_CLICK);
    }
}
NgxNotificationMsgComponent.DELAY_ON_CLICK = 400;
NgxNotificationMsgComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-notification-msg',
                template: "<div class=\"ngx_notification-msg\"\n     [class.ngx_notification-msg-opened]=\"isNotificationMsgOpened()\"\n     [class.ngx_notification-msg-progress-bar]=\"isProgressBarDisplayed()\"\n     [ngStyle]=\"getPosition()\"\n     (mouseenter)=\"mouseEnter()\"\n     (mouseleave)=\"mouseLeave()\">\n    <div class=\"ngx_notification-msg-icon-wrapper\"\n         *ngIf=\"isIconDisplayed()\">\n        <svg>\n            <use [attr.xlink:href]=\"statusToClass[status]\"/>\n        </svg>\n    </div>\n    <div class=\"ngx_notification-msg-content\">\n        <div class=\"ngx_notification-msg-header\">\n            {{header}}\n        </div>\n        <div class=\"ngx_notification-msg-body\"\n             *ngIf=\"msgs?.length === 1\">\n            {{msgs}}\n        </div>\n        <div class=\"ngx_notification-msg-body\"\n             *ngIf=\"msgs?.length > 1\">\n            <ul *ngFor=\"let msg of msgs\">\n                <li>{{msg}}</li>\n            </ul>\n        </div>\n        <button class=\"ngx_notification-msg-close-button\"\n                *ngIf=\"closeable\"\n                (click)=\"close()\">\n            <svg>\n                <use [attr.xlink:href]=\"'#clear'\"/>\n            </svg>\n        </button>\n    </div>\n\n    <svg display=\"none\">\n        <symbol width=\"24\" height=\"24\" viewBox=\"0 0 32 32\" id=\"00CC69\">\n            <path d=\"M16,0 C24.836556,0 32,7.163444 32,16 C32,24.836556 24.836556,32 16,32 C7.163444,32 0,24.836556 0,16 C0,7.163444 7.163444,0 16,0 Z M23.6,9.6 L13,20.2 L8.8,16 L7.4,17.4 L13,23 L25,11 L23.6,9.6 Z\"/>\n        </symbol>\n    </svg>\n\n    <svg display=\"none\">\n        <symbol width=\"24\" height=\"24\" viewBox=\"0 0 32 32\" id=\"FE355A\">\n            <path d=\"M16,0 C24.836556,0 32,7.163444 32,16 C32,24.836556 24.836556,32 16,32 C7.163444,32 0,24.836556 0,16 C0,7.163444 7.163444,0 16,0 Z M21.59,9 L16,14.59 L10.41,9 L9,10.41 L14.59,16 L9,21.59 L10.41,23 L16,17.41 L21.59,23 L23,21.59 L17.41,16 L23,10.41 L21.59,9 Z\"/>\n        </symbol>\n    </svg>\n\n    <svg display=\"none\">\n        <symbol width=\"24\" height=\"24\" viewBox=\"0 0 32 32\" id=\"0067FF\">\n            <path d=\"M16,0 C24.836556,0 32,7.163444 32,16 C32,24.836556 24.836556,32 16,32 C7.163444,32 0,24.836556 0,16 C0,7.163444 7.163444,0 16,0 Z M17,12 L15,12 L15,24 L17,24 L17,12 Z M17,8 L15,8 L15,10 L17,10 L17,8 Z\"/>\n        </symbol>\n    </svg>\n\n    <svg display=\"none\">\n        <symbol viewBox=\"0 0 24 24\" id=\"clear\">\n            <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"/>\n        </symbol>\n    </svg>\n</div>\n",
                styles: [":root{--ngx-notification-msg-delay:0;--ngx-notification-msg-color:none}.ngx_notification-msg{position:absolute;display:-webkit-box;display:flex;opacity:0;box-shadow:0 10px 19px 10px rgba(0,0,0,.04);border-radius:4px;background-color:#fff;font-family:Raleway,Arial,sans-serif;-webkit-transition:.2s cubic-bezier(.75,0,.75,.9);transition:.2s cubic-bezier(.75,0,.75,.9)}.ngx_notification-msg:hover::after{-webkit-animation-play-state:paused;animation-play-state:paused}.ngx_notification-msg-opened{opacity:1;-webkit-transition:250ms cubic-bezier(.2,0,.25,1);transition:250ms cubic-bezier(.2,0,.25,1)}.ngx_notification-msg-progress-bar::before{content:'';height:4px;width:100%;position:absolute;bottom:0;opacity:.3;border-bottom-left-radius:4px;border-bottom-right-radius:4px;background-color:var(--ngx-notification-msg-color)}.ngx_notification-msg-progress-bar::after{content:'';height:4px;position:absolute;bottom:0;border-bottom-left-radius:4px;background-color:var(--ngx-notification-msg-color);-webkit-animation:change-width var(--ngx-notification-msg-delay);animation:change-width var(--ngx-notification-msg-delay)}.ngx_notification-msg-icon-wrapper{width:81px;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;-webkit-box-pack:center;justify-content:center;justify-items:center;position:relative}.ngx_notification-msg-icon-wrapper svg{height:24px;width:24px;color:var(--ngx-notification-msg-color);fill:currentColor;-webkit-transform:scale(1.167);transform:scale(1.167)}.ngx_notification-msg-icon-wrapper::after{content:'';height:calc(100% - 40px);width:1px;position:absolute;right:0;border-bottom-left-radius:4px;border-top-left-radius:4px;background-color:#f1f1f2}.ngx_notification-msg-content{padding:20px 30px}.ngx_notification-msg-header{line-height:1.5;font-size:15px;font-weight:700;color:#565154}.ngx_notification-msg-body{line-height:1.5;font-size:13px;color:#93908c}.ngx_notification-msg-body ul{margin:8px 0;padding:0 0 0 30px}.ngx_notification-msg-body ul:last-of-type{margin:8px 0 0}.ngx_notification-msg-close-button{height:16px;width:16px;position:absolute;top:8px;right:8px;outline:0;padding:0;font-size:11px;font-weight:600;background-color:transparent;cursor:pointer;box-sizing:content-box;border-radius:50%;border:0}.ngx_notification-msg-close-button svg{color:#717075;fill:currentColor;height:inherit;width:inherit}.ngx_notification-msg-close-button:active{-webkit-animation:.1s close-click;animation:.1s close-click}@-webkit-keyframes change-width{0%{width:100%;border-bottom-right-radius:4px}100%{width:0;border-bottom-right-radius:0}}@keyframes change-width{0%{width:100%;border-bottom-right-radius:4px}100%{width:0;border-bottom-right-radius:0}}@-webkit-keyframes close-click{0%{border:0 solid #f1f1f2}100%{border:10px solid #f1f1f2;margin-top:-10px;margin-right:-10px}}@keyframes close-click{0%{border:0 solid #f1f1f2}100%{border:10px solid #f1f1f2;margin-top:-10px;margin-right:-10px}}"]
            }] }
];
/** @nocollapse */
NgxNotificationMsgComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
NgxNotificationMsgComponent.propDecorators = {
    status: [{ type: Input }],
    direction: [{ type: Input }],
    displayProgressBar: [{ type: Input }],
    displayIcon: [{ type: Input }],
    header: [{ type: Input }],
    messages: [{ type: Input }],
    delay: [{ type: Input }],
    closeable: [{ type: Input }],
    index: [{ type: Input }],
    destroy: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxNotificationMsgComponent.DELAY_ON_CLICK;
    /** @type {?} */
    NgxNotificationMsgComponent.prototype.status;
    /** @type {?} */
    NgxNotificationMsgComponent.prototype.direction;
    /** @type {?} */
    NgxNotificationMsgComponent.prototype.displayProgressBar;
    /** @type {?} */
    NgxNotificationMsgComponent.prototype.displayIcon;
    /** @type {?} */
    NgxNotificationMsgComponent.prototype.header;
    /** @type {?} */
    NgxNotificationMsgComponent.prototype.delay;
    /** @type {?} */
    NgxNotificationMsgComponent.prototype.closeable;
    /** @type {?} */
    NgxNotificationMsgComponent.prototype.index;
    /** @type {?} */
    NgxNotificationMsgComponent.prototype.destroy;
    /** @type {?} */
    NgxNotificationMsgComponent.prototype.componentState;
    /** @type {?} */
    NgxNotificationMsgComponent.prototype.componentStates;
    /** @type {?} */
    NgxNotificationMsgComponent.prototype.statusToClass;
    /** @type {?} */
    NgxNotificationMsgComponent.prototype.msgs;
    /**
     * @type {?}
     * @private
     */
    NgxNotificationMsgComponent.prototype.NONE;
    /**
     * @type {?}
     * @private
     */
    NgxNotificationMsgComponent.prototype.closeTimeout;
    /**
     * @type {?}
     * @private
     */
    NgxNotificationMsgComponent.prototype.destroyTimeout;
    /**
     * @type {?}
     * @private
     */
    NgxNotificationMsgComponent.prototype.referencePointTimestamp;
    /**
     * @type {?}
     * @private
     */
    NgxNotificationMsgComponent.prototype.mouseEnterTimestamp;
    /**
     * @type {?}
     * @private
     */
    NgxNotificationMsgComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    NgxNotificationMsgComponent.prototype.element;
}
/**
 * @record
 */
function INgxNotificationPosition() { }
if (false) {
    /** @type {?|undefined} */
    INgxNotificationPosition.prototype.top;
    /** @type {?|undefined} */
    INgxNotificationPosition.prototype.bottom;
    /** @type {?|undefined} */
    INgxNotificationPosition.prototype.left;
    /** @type {?|undefined} */
    INgxNotificationPosition.prototype.right;
    /** @type {?} */
    INgxNotificationPosition.prototype.transform;
}
/** @enum {string} */
const NgxNotificationMsgComponentState = {
    CLOSE: 'CLOSE',
    OPEN: 'OPEN',
};
/** @enum {string} */
const NgxNotificationStatusMsg = {
    SUCCESS: 'SUCCESS',
    FAILURE: 'FAILURE',
    INFO: 'INFO',
    NONE: 'NONE',
};
/** @enum {string} */
const NgxNotificationDirection = {
    TOP: 'TOP',
    TOP_RIGHT: 'TOP_RIGHT',
    TOP_LEFT: 'TOP_LEFT',
    BOTTOM: 'BOTTOM',
    BOTTOM_RIGHT: 'BOTTOM_RIGHT',
    BOTTOM_LEFT: 'BOTTOM_LEFT',
};
/**
 * @record
 */
function INgxNotificationMsgConfig() { }
if (false) {
    /** @type {?|undefined} */
    INgxNotificationMsgConfig.prototype.status;
    /** @type {?|undefined} */
    INgxNotificationMsgConfig.prototype.direction;
    /** @type {?|undefined} */
    INgxNotificationMsgConfig.prototype.header;
    /** @type {?} */
    INgxNotificationMsgConfig.prototype.messages;
    /** @type {?|undefined} */
    INgxNotificationMsgConfig.prototype.delay;
    /** @type {?|undefined} */
    INgxNotificationMsgConfig.prototype.displayIcon;
    /** @type {?|undefined} */
    INgxNotificationMsgConfig.prototype.displayProgressBar;
    /** @type {?|undefined} */
    INgxNotificationMsgConfig.prototype.closeable;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxNotificationMsgService {
    /**
     * @param {?} componentFactoryResolver
     * @param {?} appRef
     * @param {?} injector
     */
    constructor(componentFactoryResolver, appRef, injector) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.injector = injector;
        this.defaultContainer = document.querySelector('body');
        this.containerToChildComponentsRef = new Map();
    }
    /**
     * @private
     * @param {?} componentFactoryResolver
     * @param {?} appRef
     * @param {?} injector
     * @param {?} container
     * @return {?}
     */
    static appendChildComponentRef(componentFactoryResolver, appRef, injector, container) {
        /** @type {?} */
        const childComponentRef = componentFactoryResolver
            .resolveComponentFactory(NgxNotificationMsgComponent)
            .create(injector);
        /** @type {?} */
        const childDomElem = (/** @type {?} */ (((/** @type {?} */ (childComponentRef.hostView)))
            .rootNodes[0]));
        appRef.attachView(childComponentRef.hostView);
        container.appendChild(childDomElem);
        return childComponentRef;
    }
    /**
     * @private
     * @param {?} inputsConfig
     * @param {?} componentRef
     * @return {?}
     */
    static attachConfig(inputsConfig, componentRef) {
        Object.keys(inputsConfig).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            componentRef.instance[key] = inputsConfig[key];
        }));
    }
    /**
     * @private
     * @param {?} container
     * @param {?} containerToChildComponentsRef
     * @param {?} childComponentRef
     * @return {?}
     */
    static addChildComponentRef(container, containerToChildComponentsRef, childComponentRef) {
        if (containerToChildComponentsRef.has(container)) {
            containerToChildComponentsRef.get(container).push(childComponentRef);
        }
        else {
            containerToChildComponentsRef.set(container, [childComponentRef]);
        }
    }
    /**
     * @private
     * @param {?} appRef
     * @param {?} containerToChildComponentsRef
     * @param {?} componentRef
     * @return {?}
     */
    static subscribeToComponentDestroyEvent(appRef, containerToChildComponentsRef, componentRef) {
        /** @type {?} */
        const sub = componentRef.instance.destroy.subscribe((/**
         * @return {?}
         */
        () => {
            sub.unsubscribe();
            NgxNotificationMsgService.destroy(appRef, componentRef);
            NgxNotificationMsgService.removeChildComponentRef(containerToChildComponentsRef, componentRef);
            NgxNotificationMsgService.updateComponentsIndexesOnDestroy(containerToChildComponentsRef);
        }));
    }
    /**
     * @private
     * @param {?} appRef
     * @param {?} componentRef
     * @return {?}
     */
    static destroy(appRef, componentRef) {
        appRef.detachView(componentRef.hostView);
        componentRef.destroy();
    }
    /**
     * @private
     * @param {?} containerToChildComponentsRef
     * @return {?}
     */
    static updateComponentsIndexesOnDestroy(containerToChildComponentsRef) {
        containerToChildComponentsRef.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => {
            /** @type {?} */
            let total = containerToChildComponentsRef.get(key).length - 1;
            containerToChildComponentsRef.get(key).forEach((/**
             * @param {?} __0
             * @return {?}
             */
            ({ instance }) => {
                instance.index = total--;
            }));
        }));
    }
    /**
     * @private
     * @param {?} containerToChildComponentsRef
     * @param {?} componentRef
     * @return {?}
     */
    static removeChildComponentRef(containerToChildComponentsRef, componentRef) {
        containerToChildComponentsRef.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => {
            containerToChildComponentsRef.set(key, [...containerToChildComponentsRef.get(key).filter((/**
                 * @param {?} _
                 * @return {?}
                 */
                _ => _ !== componentRef))]);
        }));
    }
    /**
     * @private
     * @param {?} containerToChildComponentsRef
     * @return {?}
     */
    static updateComponentsIndexesOnOpen(containerToChildComponentsRef) {
        containerToChildComponentsRef.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => {
            /** @type {?} */
            let total = containerToChildComponentsRef.get(key).length;
            containerToChildComponentsRef.get(key).forEach((/**
             * @param {?} __0
             * @return {?}
             */
            ({ instance }) => {
                instance.index = --total;
            }));
        }));
    }
    /**
     * @param {?} inputsConfig
     * @param {?=} element
     * @return {?}
     */
    open(inputsConfig, element) {
        /** @type {?} */
        const container = element ? element : this.defaultContainer;
        /** @type {?} */
        const childComponentRef = NgxNotificationMsgService.appendChildComponentRef(this.componentFactoryResolver, this.appRef, this.injector, container);
        NgxNotificationMsgService.attachConfig(inputsConfig, childComponentRef);
        NgxNotificationMsgService.addChildComponentRef(container, this.containerToChildComponentsRef, childComponentRef);
        NgxNotificationMsgService.subscribeToComponentDestroyEvent(this.appRef, this.containerToChildComponentsRef, childComponentRef);
        NgxNotificationMsgService.updateComponentsIndexesOnOpen(this.containerToChildComponentsRef);
    }
}
NgxNotificationMsgService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgxNotificationMsgService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ApplicationRef },
    { type: Injector }
];
/** @nocollapse */ NgxNotificationMsgService.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgxNotificationMsgService_Factory() { return new NgxNotificationMsgService(ɵɵinject(ComponentFactoryResolver), ɵɵinject(ApplicationRef), ɵɵinject(INJECTOR)); }, token: NgxNotificationMsgService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxNotificationMsgService.prototype.defaultContainer;
    /**
     * @type {?}
     * @private
     */
    NgxNotificationMsgService.prototype.containerToChildComponentsRef;
    /**
     * @type {?}
     * @private
     */
    NgxNotificationMsgService.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    NgxNotificationMsgService.prototype.appRef;
    /**
     * @type {?}
     * @private
     */
    NgxNotificationMsgService.prototype.injector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxNotificationMsgModule {
}
NgxNotificationMsgModule.decorators = [
    { type: NgModule, args: [{
                entryComponents: [NgxNotificationMsgComponent],
                declarations: [NgxNotificationMsgComponent],
                imports: [CommonModule],
                exports: [NgxNotificationMsgComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxNotificationDirection, NgxNotificationMsgComponent, NgxNotificationMsgComponentState, NgxNotificationMsgModule, NgxNotificationMsgService, NgxNotificationStatusMsg };
//# sourceMappingURL=ngx-notification-msg.js.map
