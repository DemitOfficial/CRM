/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ApplicationRef, ComponentFactoryResolver, Injectable, Injector } from '@angular/core';
import { NgxNotificationMsgComponent } from './ngx-notification-msg.component';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var NgxNotificationMsgService = /** @class */ (function () {
    function NgxNotificationMsgService(componentFactoryResolver, appRef, injector) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.injector = injector;
        this.defaultContainer = document.querySelector('body');
        this.containerToChildComponentsRef = new Map();
    }
    /**
     * @private
     * @param {?} componentFactoryResolver
     * @param {?} appRef
     * @param {?} injector
     * @param {?} container
     * @return {?}
     */
    NgxNotificationMsgService.appendChildComponentRef = /**
     * @private
     * @param {?} componentFactoryResolver
     * @param {?} appRef
     * @param {?} injector
     * @param {?} container
     * @return {?}
     */
    function (componentFactoryResolver, appRef, injector, container) {
        /** @type {?} */
        var childComponentRef = componentFactoryResolver
            .resolveComponentFactory(NgxNotificationMsgComponent)
            .create(injector);
        /** @type {?} */
        var childDomElem = (/** @type {?} */ (((/** @type {?} */ (childComponentRef.hostView)))
            .rootNodes[0]));
        appRef.attachView(childComponentRef.hostView);
        container.appendChild(childDomElem);
        return childComponentRef;
    };
    /**
     * @private
     * @param {?} inputsConfig
     * @param {?} componentRef
     * @return {?}
     */
    NgxNotificationMsgService.attachConfig = /**
     * @private
     * @param {?} inputsConfig
     * @param {?} componentRef
     * @return {?}
     */
    function (inputsConfig, componentRef) {
        Object.keys(inputsConfig).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            componentRef.instance[key] = inputsConfig[key];
        }));
    };
    /**
     * @private
     * @param {?} container
     * @param {?} containerToChildComponentsRef
     * @param {?} childComponentRef
     * @return {?}
     */
    NgxNotificationMsgService.addChildComponentRef = /**
     * @private
     * @param {?} container
     * @param {?} containerToChildComponentsRef
     * @param {?} childComponentRef
     * @return {?}
     */
    function (container, containerToChildComponentsRef, childComponentRef) {
        if (containerToChildComponentsRef.has(container)) {
            containerToChildComponentsRef.get(container).push(childComponentRef);
        }
        else {
            containerToChildComponentsRef.set(container, [childComponentRef]);
        }
    };
    /**
     * @private
     * @param {?} appRef
     * @param {?} containerToChildComponentsRef
     * @param {?} componentRef
     * @return {?}
     */
    NgxNotificationMsgService.subscribeToComponentDestroyEvent = /**
     * @private
     * @param {?} appRef
     * @param {?} containerToChildComponentsRef
     * @param {?} componentRef
     * @return {?}
     */
    function (appRef, containerToChildComponentsRef, componentRef) {
        /** @type {?} */
        var sub = componentRef.instance.destroy.subscribe((/**
         * @return {?}
         */
        function () {
            sub.unsubscribe();
            NgxNotificationMsgService.destroy(appRef, componentRef);
            NgxNotificationMsgService.removeChildComponentRef(containerToChildComponentsRef, componentRef);
            NgxNotificationMsgService.updateComponentsIndexesOnDestroy(containerToChildComponentsRef);
        }));
    };
    /**
     * @private
     * @param {?} appRef
     * @param {?} componentRef
     * @return {?}
     */
    NgxNotificationMsgService.destroy = /**
     * @private
     * @param {?} appRef
     * @param {?} componentRef
     * @return {?}
     */
    function (appRef, componentRef) {
        appRef.detachView(componentRef.hostView);
        componentRef.destroy();
    };
    /**
     * @private
     * @param {?} containerToChildComponentsRef
     * @return {?}
     */
    NgxNotificationMsgService.updateComponentsIndexesOnDestroy = /**
     * @private
     * @param {?} containerToChildComponentsRef
     * @return {?}
     */
    function (containerToChildComponentsRef) {
        containerToChildComponentsRef.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        function (value, key) {
            /** @type {?} */
            var total = containerToChildComponentsRef.get(key).length - 1;
            containerToChildComponentsRef.get(key).forEach((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var instance = _a.instance;
                instance.index = total--;
            }));
        }));
    };
    /**
     * @private
     * @param {?} containerToChildComponentsRef
     * @param {?} componentRef
     * @return {?}
     */
    NgxNotificationMsgService.removeChildComponentRef = /**
     * @private
     * @param {?} containerToChildComponentsRef
     * @param {?} componentRef
     * @return {?}
     */
    function (containerToChildComponentsRef, componentRef) {
        containerToChildComponentsRef.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        function (value, key) {
            containerToChildComponentsRef.set(key, tslib_1.__spread(containerToChildComponentsRef.get(key).filter((/**
             * @param {?} _
             * @return {?}
             */
            function (_) { return _ !== componentRef; }))));
        }));
    };
    /**
     * @private
     * @param {?} containerToChildComponentsRef
     * @return {?}
     */
    NgxNotificationMsgService.updateComponentsIndexesOnOpen = /**
     * @private
     * @param {?} containerToChildComponentsRef
     * @return {?}
     */
    function (containerToChildComponentsRef) {
        containerToChildComponentsRef.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        function (value, key) {
            /** @type {?} */
            var total = containerToChildComponentsRef.get(key).length;
            containerToChildComponentsRef.get(key).forEach((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var instance = _a.instance;
                instance.index = --total;
            }));
        }));
    };
    /**
     * @param {?} inputsConfig
     * @param {?=} element
     * @return {?}
     */
    NgxNotificationMsgService.prototype.open = /**
     * @param {?} inputsConfig
     * @param {?=} element
     * @return {?}
     */
    function (inputsConfig, element) {
        /** @type {?} */
        var container = element ? element : this.defaultContainer;
        /** @type {?} */
        var childComponentRef = NgxNotificationMsgService.appendChildComponentRef(this.componentFactoryResolver, this.appRef, this.injector, container);
        NgxNotificationMsgService.attachConfig(inputsConfig, childComponentRef);
        NgxNotificationMsgService.addChildComponentRef(container, this.containerToChildComponentsRef, childComponentRef);
        NgxNotificationMsgService.subscribeToComponentDestroyEvent(this.appRef, this.containerToChildComponentsRef, childComponentRef);
        NgxNotificationMsgService.updateComponentsIndexesOnOpen(this.containerToChildComponentsRef);
    };
    /** @nocollapse */
    NgxNotificationMsgService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ApplicationRef },
        { type: Injector }
    ]; };
    /** @nocollapse */ NgxNotificationMsgService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgxNotificationMsgService_Factory() { return new NgxNotificationMsgService(i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i0.INJECTOR)); }, token: NgxNotificationMsgService, providedIn: "root" });
NgxNotificationMsgService.ɵfac = function NgxNotificationMsgService_Factory(t) { return new (t || NgxNotificationMsgService)(ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
NgxNotificationMsgService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxNotificationMsgService, factory: function (t) { return NgxNotificationMsgService.ɵfac(t); }, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxNotificationMsgService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ApplicationRef }, { type: ɵngcc0.Injector }]; }, null); })();
    return NgxNotificationMsgService;
}());
export { NgxNotificationMsgService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxNotificationMsgService.prototype.defaultContainer;
    /**
     * @type {?}
     * @private
     */
    NgxNotificationMsgService.prototype.containerToChildComponentsRef;
    /**
     * @type {?}
     * @private
     */
    NgxNotificationMsgService.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    NgxNotificationMsgService.prototype.appRef;
    /**
     * @type {?}
     * @private
     */
    NgxNotificationMsgService.prototype.injector;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,