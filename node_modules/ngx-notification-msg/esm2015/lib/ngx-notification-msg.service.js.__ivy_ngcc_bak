/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ApplicationRef, ComponentFactoryResolver, Injectable, Injector } from '@angular/core';
import { NgxNotificationMsgComponent } from './ngx-notification-msg.component';
import * as i0 from "@angular/core";
export class NgxNotificationMsgService {
    /**
     * @param {?} componentFactoryResolver
     * @param {?} appRef
     * @param {?} injector
     */
    constructor(componentFactoryResolver, appRef, injector) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.injector = injector;
        this.defaultContainer = document.querySelector('body');
        this.containerToChildComponentsRef = new Map();
    }
    /**
     * @private
     * @param {?} componentFactoryResolver
     * @param {?} appRef
     * @param {?} injector
     * @param {?} container
     * @return {?}
     */
    static appendChildComponentRef(componentFactoryResolver, appRef, injector, container) {
        /** @type {?} */
        const childComponentRef = componentFactoryResolver
            .resolveComponentFactory(NgxNotificationMsgComponent)
            .create(injector);
        /** @type {?} */
        const childDomElem = (/** @type {?} */ (((/** @type {?} */ (childComponentRef.hostView)))
            .rootNodes[0]));
        appRef.attachView(childComponentRef.hostView);
        container.appendChild(childDomElem);
        return childComponentRef;
    }
    /**
     * @private
     * @param {?} inputsConfig
     * @param {?} componentRef
     * @return {?}
     */
    static attachConfig(inputsConfig, componentRef) {
        Object.keys(inputsConfig).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            componentRef.instance[key] = inputsConfig[key];
        }));
    }
    /**
     * @private
     * @param {?} container
     * @param {?} containerToChildComponentsRef
     * @param {?} childComponentRef
     * @return {?}
     */
    static addChildComponentRef(container, containerToChildComponentsRef, childComponentRef) {
        if (containerToChildComponentsRef.has(container)) {
            containerToChildComponentsRef.get(container).push(childComponentRef);
        }
        else {
            containerToChildComponentsRef.set(container, [childComponentRef]);
        }
    }
    /**
     * @private
     * @param {?} appRef
     * @param {?} containerToChildComponentsRef
     * @param {?} componentRef
     * @return {?}
     */
    static subscribeToComponentDestroyEvent(appRef, containerToChildComponentsRef, componentRef) {
        /** @type {?} */
        const sub = componentRef.instance.destroy.subscribe((/**
         * @return {?}
         */
        () => {
            sub.unsubscribe();
            NgxNotificationMsgService.destroy(appRef, componentRef);
            NgxNotificationMsgService.removeChildComponentRef(containerToChildComponentsRef, componentRef);
            NgxNotificationMsgService.updateComponentsIndexesOnDestroy(containerToChildComponentsRef);
        }));
    }
    /**
     * @private
     * @param {?} appRef
     * @param {?} componentRef
     * @return {?}
     */
    static destroy(appRef, componentRef) {
        appRef.detachView(componentRef.hostView);
        componentRef.destroy();
    }
    /**
     * @private
     * @param {?} containerToChildComponentsRef
     * @return {?}
     */
    static updateComponentsIndexesOnDestroy(containerToChildComponentsRef) {
        containerToChildComponentsRef.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => {
            /** @type {?} */
            let total = containerToChildComponentsRef.get(key).length - 1;
            containerToChildComponentsRef.get(key).forEach((/**
             * @param {?} __0
             * @return {?}
             */
            ({ instance }) => {
                instance.index = total--;
            }));
        }));
    }
    /**
     * @private
     * @param {?} containerToChildComponentsRef
     * @param {?} componentRef
     * @return {?}
     */
    static removeChildComponentRef(containerToChildComponentsRef, componentRef) {
        containerToChildComponentsRef.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => {
            containerToChildComponentsRef.set(key, [...containerToChildComponentsRef.get(key).filter((/**
                 * @param {?} _
                 * @return {?}
                 */
                _ => _ !== componentRef))]);
        }));
    }
    /**
     * @private
     * @param {?} containerToChildComponentsRef
     * @return {?}
     */
    static updateComponentsIndexesOnOpen(containerToChildComponentsRef) {
        containerToChildComponentsRef.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => {
            /** @type {?} */
            let total = containerToChildComponentsRef.get(key).length;
            containerToChildComponentsRef.get(key).forEach((/**
             * @param {?} __0
             * @return {?}
             */
            ({ instance }) => {
                instance.index = --total;
            }));
        }));
    }
    /**
     * @param {?} inputsConfig
     * @param {?=} element
     * @return {?}
     */
    open(inputsConfig, element) {
        /** @type {?} */
        const container = element ? element : this.defaultContainer;
        /** @type {?} */
        const childComponentRef = NgxNotificationMsgService.appendChildComponentRef(this.componentFactoryResolver, this.appRef, this.injector, container);
        NgxNotificationMsgService.attachConfig(inputsConfig, childComponentRef);
        NgxNotificationMsgService.addChildComponentRef(container, this.containerToChildComponentsRef, childComponentRef);
        NgxNotificationMsgService.subscribeToComponentDestroyEvent(this.appRef, this.containerToChildComponentsRef, childComponentRef);
        NgxNotificationMsgService.updateComponentsIndexesOnOpen(this.containerToChildComponentsRef);
    }
}
NgxNotificationMsgService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgxNotificationMsgService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ApplicationRef },
    { type: Injector }
];
/** @nocollapse */ NgxNotificationMsgService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgxNotificationMsgService_Factory() { return new NgxNotificationMsgService(i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i0.INJECTOR)); }, token: NgxNotificationMsgService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxNotificationMsgService.prototype.defaultContainer;
    /**
     * @type {?}
     * @private
     */
    NgxNotificationMsgService.prototype.containerToChildComponentsRef;
    /**
     * @type {?}
     * @private
     */
    NgxNotificationMsgService.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    NgxNotificationMsgService.prototype.appRef;
    /**
     * @type {?}
     * @private
     */
    NgxNotificationMsgService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,