{"version":3,"file":"cdk-accordion.umd.js","sources":["../../src/cdk/accordion/accordion.ts","../../src/cdk/accordion/accordion-item.ts","../../src/cdk/accordion/accordion-module.ts"],"names":["Subject","coerceBooleanProperty","Directive","Input","nextId","Subscription","EventEmitter","Optional","SkipSelf","ChangeDetectorRef","UniqueSelectionDispatcher","Output","NgModule"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, Input, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/** Used to generate unique ID for each accordion. */\nlet nextId = 0;\n\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n@Directive({\n  selector: 'cdk-accordion, [cdkAccordion]',\n  exportAs: 'cdkAccordion',\n})\nexport class CdkAccordion implements OnDestroy, OnChanges {\n  /** Emits when the state of the accordion changes */\n  readonly _stateChanges = new Subject<SimpleChanges>();\n\n  /** Stream that emits true/false when openAll/closeAll is triggered. */\n  readonly _openCloseAllActions: Subject<boolean> = new Subject<boolean>();\n\n  /** A readonly id value to use for unique selection coordination. */\n  readonly id = `cdk-accordion-${nextId++}`;\n\n  /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n  @Input()\n  get multi(): boolean { return this._multi; }\n  set multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\n  private _multi: boolean = false;\n\n  /** Opens all enabled accordion items in an accordion where multi is enabled. */\n  openAll(): void {\n    this._openCloseAll(true);\n  }\n\n  /** Closes all enabled accordion items in an accordion where multi is enabled. */\n  closeAll(): void {\n    this._openCloseAll(false);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._stateChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  private _openCloseAll(expanded: boolean): void {\n    if (this.multi) {\n      this._openCloseAllActions.next(expanded);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Output,\n  Directive,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  ChangeDetectorRef,\n  SkipSelf,\n} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CdkAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs';\n\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\n\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n@Directive({\n  selector: 'cdk-accordion-item, [cdkAccordionItem]',\n  exportAs: 'cdkAccordionItem',\n  providers: [\n    // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n    // to the same accordion.\n    {provide: CdkAccordion, useValue: undefined},\n  ],\n})\nexport class CdkAccordionItem implements OnDestroy {\n  /** Subscription to openAll/closeAll events. */\n  private _openCloseAllSubscription = Subscription.EMPTY;\n  /** Event emitted every time the AccordionItem is closed. */\n  @Output() closed: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted every time the AccordionItem is opened. */\n  @Output() opened: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted when the AccordionItem is destroyed. */\n  @Output() destroyed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Emits whenever the expanded state of the accordion changes.\n   * Primarily used to facilitate two-way binding.\n   * @docs-private\n   */\n  @Output() expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The unique AccordionItem id. */\n  readonly id: string = `cdk-accordion-child-${nextId++}`;\n\n  /** Whether the AccordionItem is expanded. */\n  @Input()\n  get expanded(): any { return this._expanded; }\n  set expanded(expanded: any) {\n    expanded = coerceBooleanProperty(expanded);\n\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      this.expandedChange.emit(expanded);\n\n      if (expanded) {\n        this.opened.emit();\n        /**\n         * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n         * the name value is the id of the accordion.\n         */\n        const accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _expanded = false;\n\n  /** Whether the AccordionItem is disabled. */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(disabled: any) { this._disabled = coerceBooleanProperty(disabled); }\n  private _disabled: boolean = false;\n\n  /** Unregister function for _expansionDispatcher. */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  constructor(@Optional() @SkipSelf() public accordion: CdkAccordion,\n              private _changeDetectorRef: ChangeDetectorRef,\n              protected _expansionDispatcher: UniqueSelectionDispatcher) {\n    this._removeUniqueSelectionListener =\n      _expansionDispatcher.listen((id: string, accordionId: string) => {\n        if (this.accordion && !this.accordion.multi &&\n            this.accordion.id === accordionId && this.id !== id) {\n          this.expanded = false;\n        }\n      });\n\n    // When an accordion item is hosted in an accordion, subscribe to open/close events.\n    if (this.accordion) {\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n    }\n  }\n\n  /** Emits an event for the accordion item being destroyed. */\n  ngOnDestroy() {\n    this.opened.complete();\n    this.closed.complete();\n    this.destroyed.emit();\n    this.destroyed.complete();\n    this._removeUniqueSelectionListener();\n    this._openCloseAllSubscription.unsubscribe();\n  }\n\n  /** Toggles the expanded state of the accordion item. */\n  toggle(): void {\n    if (!this.disabled) {\n      this.expanded = !this.expanded;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to false. */\n  close(): void {\n    if (!this.disabled) {\n      this.expanded = false;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to true. */\n  open(): void {\n    if (!this.disabled) {\n      this.expanded = true;\n    }\n  }\n\n  private _subscribeToOpenCloseAllActions(): Subscription {\n    return this.accordion._openCloseAllActions.subscribe(expanded => {\n      // Only change expanded state if item is enabled\n      if (!this.disabled) {\n        this.expanded = expanded;\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkAccordion} from './accordion';\nimport {CdkAccordionItem} from './accordion-item';\n\n\n@NgModule({\n  exports: [CdkAccordion, CdkAccordionItem],\n  declarations: [CdkAccordion, CdkAccordionItem],\n})\nexport class CdkAccordionModule {}\n"]}