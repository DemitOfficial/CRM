/**
 * @fileoverview added by tsickle
 * Generated from: user-tracking.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isPlatformServer } from '@angular/common';
import { Inject, Injectable, NgZone, PLATFORM_ID } from '@angular/core';
import { AngularFireAnalytics } from './analytics';
import { AngularFireAuth } from '@angular/fire/auth';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './analytics';
import * as ɵngcc2 from '@angular/fire/auth';
export class UserTrackingService {
    // TODO a user properties injector
    /**
     * @param {?} analytics
     * @param {?} platformId
     * @param {?} auth
     * @param {?} zone
     */
    constructor(analytics, 
    // tslint:disable-next-line:ban-types
    platformId, auth, zone) {
        this.disposables = [];
        if (!isPlatformServer(platformId)) {
            /** @type {?} */
            let resolveInitialized;
            this.initialized = zone.runOutsideAngular((/**
             * @return {?}
             */
            () => new Promise((/**
             * @param {?} resolve
             * @return {?}
             */
            resolve => resolveInitialized = resolve))));
            this.disposables = [
                auth.authState.subscribe((/**
                 * @param {?} user
                 * @return {?}
                 */
                user => {
                    analytics.setUserId(user === null || user === void 0 ? void 0 : user.uid);
                    resolveInitialized();
                })),
                auth.credential.subscribe((/**
                 * @param {?} credential
                 * @return {?}
                 */
                credential => {
                    if (credential) {
                        /** @type {?} */
                        const method = credential.user.isAnonymous ? 'anonymous' : credential.additionalUserInfo.providerId;
                        if (credential.additionalUserInfo.isNewUser) {
                            analytics.logEvent('sign_up', { method });
                        }
                        analytics.logEvent('login', { method });
                    }
                }))
            ];
        }
        else {
            this.initialized = Promise.resolve();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.disposables.forEach((/**
         * @param {?} it
         * @return {?}
         */
        it => it.unsubscribe()));
    }
}
UserTrackingService.ɵfac = function UserTrackingService_Factory(t) { return new (t || UserTrackingService)(ɵngcc0.ɵɵinject(ɵngcc1.AngularFireAnalytics), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(ɵngcc2.AngularFireAuth), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
UserTrackingService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: UserTrackingService, factory: UserTrackingService.ɵfac });
/** @nocollapse */
UserTrackingService.ctorParameters = () => [
    { type: AngularFireAnalytics },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: AngularFireAuth },
    { type: NgZone }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UserTrackingService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.AngularFireAnalytics }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: ɵngcc2.AngularFireAuth }, { type: ɵngcc0.NgZone }]; }, null); })();
if (false) {
    /** @type {?} */
    UserTrackingService.prototype.initialized;
    /**
     * @type {?}
     * @private
     */
    UserTrackingService.prototype.disposables;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci10cmFja2luZy5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi93b3Jrc3BhY2Uvc3JjL2FuYWx5dGljcy91c2VyLXRyYWNraW5nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQWEsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25GLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7Ozs7QUFJckQsTUFBTSxPQUFPLG1CQUFtQjtBQUFHO0FBRWxCO0FBQVE7QUFDRjtBQUVyQjtBQUF1QjtBQUNkO0FBQ1AsSUFERixZQUNFLFNBQStCO0FBQ2xDLElBQUcscUNBQXFDO0FBQ3pDLElBQXlCLFVBQWtCLEVBQ3ZDLElBQXFCLEVBQ3JCLElBQVk7QUFDZCxRQVRRLGdCQUFXLEdBQXdCLEVBQUUsQ0FBQztBQUNoRCxRQVVJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsRUFBRTtBQUN2QztBQUE2QixnQkFBbkIsa0JBQWtCO0FBQzVCLFlBQU0sSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsaUJBQWlCO0FBQU07QUFBMkI7QUFBZ0IsWUFBaEQsR0FBRyxFQUFFLENBQUMsSUFBSSxPQUFPO0FBQU07QUFBa0M7QUFDbEY7QUFDWCxZQUZzRCxPQUFPLENBQUMsRUFBRSxDQUFDLGtCQUFrQixHQUFHLE9BQU8sRUFBQyxFQUFDLENBQUM7QUFDNUcsWUFBTSxJQUFJLENBQUMsV0FBVyxHQUFHO0FBQ3pCLGdCQUFVLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUztBQUFNO0FBQ1Y7QUFDYjtBQUNkLGdCQUhnQyxJQUFJLENBQUMsRUFBRTtBQUMxQyxvQkFBWSxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxHQUFHLENBQUMsQ0FBQztBQUMzQyxvQkFBWSxrQkFBa0IsRUFBRSxDQUFDO0FBQ2pDLGdCQUFVLENBQUMsRUFBQztBQUNaLGdCQUFVLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUztBQUFNO0FBRXpDO0FBQStCO0FBQW9CLGdCQUZmLFVBQVUsQ0FBQyxFQUFFO0FBQ2pELG9CQUFZLElBQUksVUFBVSxFQUFFO0FBQzVCO0FBQXlDLDhCQUFyQixNQUFNLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLFVBQVU7QUFDakgsd0JBQWMsSUFBSSxVQUFVLENBQUMsa0JBQWtCLENBQUMsU0FBUyxFQUFFO0FBQzNELDRCQUFnQixTQUFTLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDMUQseUJBQWU7QUFDZix3QkFBYyxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDdEQscUJBQWE7QUFDYixnQkFBVSxDQUFDLEVBQUM7QUFDWixhQUFPLENBQUM7QUFDUixTQUFLO0FBQUMsYUFBSztBQUNYLFlBQU0sSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDM0MsU0FBSztBQUNMLElBQ0UsQ0FBQztBQUNIO0FBQ087QUFDQztBQUFRLElBRGQsV0FBVztBQUNiLFFBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPO0FBQU07QUFFakM7QUFDcUI7QUFBWSxRQUhMLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxFQUFDLENBQUM7QUFDckQsSUFBRSxDQUFDO0FBQ0g7K0NBMUNDLFVBQVU7eUhBQ1Q7QUFBQztBQUFtQjtBQUVaLFlBUEQsb0JBQW9CO0FBQUksWUFjSSxNQUFNLHVCQUF0QyxNQUFNLFNBQUMsV0FBVztBQUFTLFlBYnZCLGVBQWU7QUFBSSxZQUZDLE1BQU07QUFBRzs7Ozs7OzZGQUFFO0FBQUM7QUFBYTtBQUFxQixJQVF6RSwwQ0FBMkI7QUFDN0I7QUFBUTtBQUFpQjtBQUFnQjtBQUN6QyxJQURFLDBDQUE4QztBQUNoRDtBQUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQbGF0Zm9ybVNlcnZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE5nWm9uZSwgT25EZXN0cm95LCBQTEFURk9STV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQW5ndWxhckZpcmVBbmFseXRpY3MgfSBmcm9tICcuL2FuYWx5dGljcyc7XG5pbXBvcnQgeyBBbmd1bGFyRmlyZUF1dGggfSBmcm9tICdAYW5ndWxhci9maXJlL2F1dGgnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBVc2VyVHJhY2tpbmdTZXJ2aWNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcblxuICBpbml0aWFsaXplZDogUHJvbWlzZTx2b2lkPjtcbiAgcHJpdmF0ZSBkaXNwb3NhYmxlczogQXJyYXk8U3Vic2NyaXB0aW9uPiA9IFtdO1xuXG4gIC8vIFRPRE8gYSB1c2VyIHByb3BlcnRpZXMgaW5qZWN0b3JcbiAgY29uc3RydWN0b3IoXG4gICAgYW5hbHl0aWNzOiBBbmd1bGFyRmlyZUFuYWx5dGljcyxcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6YmFuLXR5cGVzXG4gICAgQEluamVjdChQTEFURk9STV9JRCkgcGxhdGZvcm1JZDogT2JqZWN0LFxuICAgIGF1dGg6IEFuZ3VsYXJGaXJlQXV0aCxcbiAgICB6b25lOiBOZ1pvbmUsXG4gICkge1xuXG4gICAgaWYgKCFpc1BsYXRmb3JtU2VydmVyKHBsYXRmb3JtSWQpKSB7XG4gICAgICBsZXQgcmVzb2x2ZUluaXRpYWxpemVkO1xuICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiByZXNvbHZlSW5pdGlhbGl6ZWQgPSByZXNvbHZlKSk7XG4gICAgICB0aGlzLmRpc3Bvc2FibGVzID0gW1xuICAgICAgICAgIGF1dGguYXV0aFN0YXRlLnN1YnNjcmliZSh1c2VyID0+IHtcbiAgICAgICAgICAgIGFuYWx5dGljcy5zZXRVc2VySWQodXNlcj8udWlkKTtcbiAgICAgICAgICAgIHJlc29sdmVJbml0aWFsaXplZCgpO1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIGF1dGguY3JlZGVudGlhbC5zdWJzY3JpYmUoY3JlZGVudGlhbCA9PiB7XG4gICAgICAgICAgICBpZiAoY3JlZGVudGlhbCkge1xuICAgICAgICAgICAgICBjb25zdCBtZXRob2QgPSBjcmVkZW50aWFsLnVzZXIuaXNBbm9ueW1vdXMgPyAnYW5vbnltb3VzJyA6IGNyZWRlbnRpYWwuYWRkaXRpb25hbFVzZXJJbmZvLnByb3ZpZGVySWQ7XG4gICAgICAgICAgICAgIGlmIChjcmVkZW50aWFsLmFkZGl0aW9uYWxVc2VySW5mby5pc05ld1VzZXIpIHtcbiAgICAgICAgICAgICAgICBhbmFseXRpY3MubG9nRXZlbnQoJ3NpZ25fdXAnLCB7IG1ldGhvZCB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBhbmFseXRpY3MubG9nRXZlbnQoJ2xvZ2luJywgeyBtZXRob2QgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZGlzcG9zYWJsZXMuZm9yRWFjaChpdCA9PiBpdC51bnN1YnNjcmliZSgpKTtcbiAgfVxufVxuIl19