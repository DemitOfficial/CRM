{"version":3,"file":"material-icon.umd.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/material/icon/icon-registry.ts","../../src/material/icon/icon.ts","../../src/material/icon/icon-module.ts"],"names":["SecurityContext","observableOf","tap","map","observableThrow","catchError","forkJoin","finalize","share","Injectable","HttpClient","Optional","DomSanitizer","Inject","DOCUMENT","SkipSelf","mixinColor","InjectionToken","inject","tslib_1.__extends","coerceBooleanProperty","take","Component","ViewEncapsulation","ChangeDetectionStrategy","Attribute","Input","NgModule","MatCommonModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatIconMixinBase: CanColorCtor & typeof MatIconBase = mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n"]}