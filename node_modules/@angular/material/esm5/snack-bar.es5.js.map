{"version":3,"file":"snack-bar.es5.js","sources":["../../../src/material/snack-bar/snack-bar-ref.ts","../../../src/material/snack-bar/snack-bar-config.ts","../../../src/material/snack-bar/simple-snack-bar.ts","../../../src/material/snack-bar/snack-bar-animations.ts","../../../src/material/snack-bar/snack-bar-container.ts","../../../src/material/snack-bar/snack-bar-module.ts","../../../src/material/snack-bar/snack-bar.ts"],"names":["tslib_1.__extends","tslib_1.__assign","state"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,IAAA;AAAK;AACkC;AAAe;AAAI;AAIvD,IAuBD,SAAF,cAAA,CAAc,iBAAuC,EAC/B,WAAuB,EAD7C;AAAE,QAAA,IAAF,KAAA,GAAA,IAAA,CAMG;AACH,QANsB,IAAtB,CAAA,WAAiC,GAAX,WAAW,CAAY;AAAC;AACrC;AAEF;AAAY,QArBA,IAAnB,CAAA,eAAkC,GAAG,IAAI,OAAO,EAAsB,CAAC;AACvE;AACW;AACE;AAAY,QAAN,IAAnB,CAAA,YAA+B,GAAG,IAAI,OAAO,EAAQ,CAAC;AACtD;AACW;AACE;AAAY,QAAN,IAAnB,CAAA,SAA4B,GAAG,IAAI,OAAO,EAAQ,CAAC;AACnD;AAEK;AAAwE;AAAY,QAM/E,IAAV,CAAA,kBAA4B,GAAG,KAAK,CAAC;AACrC,QAGI,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;AAC/C;AACI,QAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS;AAAM;AAC9B;AAAY,QADa,YAA9B,EAAoC,OAAA,KAAI,CAAC,OAAO,EAAE,CAAlD,EAAkD,EAAC,CAAC;AACpD,QAAI,iBAAiB,CAAC,OAAO,CAAC,SAAS;AAAM;AAAuB;AAG/D,QAHmC,YAAxC,EAA8C,OAAA,KAAI,CAAC,cAAc,EAAE,CAAnE,EAAmE,EAAC,CAAC;AACrE,KAAG;AACH;AAEC;AAAQ;AACY;AACrB;AAAQ,IAFN,cAAF,CAAA,SAAA,CAAA,OAAS;AAAO;AACY;AACrB;AAAQ,IAFb,YAAF;AAAE,QACE,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE;AACtC,YAAM,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;AACpC,SAAK;AACL,QAAI,YAAY,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;AAC1C,KAAG,CAAH;AAAC;AAEyC;AACpC;AACY;AACf;AAAQ,IAFT,cAAF,CAAA,SAAA,CAAA,iBAAmB;AAAO;AAEtB;AAAmB;AAAQ,IAF7B,YAAF;AAAE,QACE,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;AAChC,YAAM,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;AACrC,YAAM,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;AAC5B,YAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;AAChC,SAAK;AACL,KAAG,CAAH;AAAC;AAGE;AACoC;AAEtC;AACE;AACE;AAAQ;AACc;AAGiB;AACtB;AAAmB;AAClC,IANL,cAAF,CAAA,SAAA,CAAA,eAAiB;AAAO;AAIrB;AACD;AAA+B;AACvB;AAAQ,IANhB,YAAF;AAAE,QACE,IAAI,CAAC,iBAAiB,EAAE,CAAC;AAC7B,KAAG,CAAH;AAAC;AAEkD;AAC7C;AACS;AAA2B;AAAmB;AAAQ,IADnE,cAAF,CAAA,SAAA,CAAA,aAAe;AAAO;AACS;AAA2B;AACvD;AAEG,IAJJ,UAAc,QAAgB,EAAhC;AAAE,QAAA,IAAF,KAAA,GAAA,IAAA,CAEG;AACH,QAFI,IAAI,CAAC,kBAAkB,GAAG,UAAU;AAAM;AAAuB;AAGnE,QAHuC,YAAzC,EAA+C,OAAA,KAAI,CAAC,OAAO,EAAE,CAA7D,EAA6D,GAAE,QAAQ,CAAC,CAAC;AACzE,KAAG,CAAH;AAAC;AAEmC;AAC9B;AACkB;AAClB;AAAQ,IAFZ,cAAF,CAAA,SAAA,CAAA,KAAO;AAAO;AACkB;AAClB;AAAQ,IAFpB,YAAF;AAAE,QACE,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;AACnC,YAAM,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;AAC/B,YAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;AACnC,SAAK;AACL,KAAG,CAAH;AAAC;AAEuC;AAClC;AACK;AAAgB;AAEd;AAAQ,IAHX,cAAV,CAAA,SAAA,CAAA,cAAwB;AAAO;AAG5B;AAAgB;AACf;AAAQ,IAJV,YAAF;AAAE,QACE,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;AAC/B,QACI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;AAChC,YAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;AAChC,SAAK;AACL,QACI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAC,iBAAiB,EAAE,IAAI,CAAC,kBAAkB,EAAC,CAAC,CAAC;AAC5E,QAAI,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;AACpC,QAAI,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;AACpC,KAAG,CAAH;AAAC;AAEkF;AAC7E;AAC8B;AAGlC;AAAQ,IAJR,cAAF,CAAA,SAAA,CAAA,cAAgB;AAAO;AAIvB;AAAmB;AAAQ,IAJzB,YAAF;AAAE,QACE,OAAO,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;AAC/C,KAAG,CAAH;AAAC;AAEsF;AACjF;AAIE;AAAmB;AAAQ,IAJjC,cAAF,CAAA,SAAA,CAAA,WAAa;AAAO;AAIE;AAAmB;AAAQ,IAJ/C,YAAF;AAAE,QACE,OAAO,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC;AAC3C,KAAG,CAAH;AAAC;AAE+E;AAC1E;AAID;AAAmB;AAAQ,IAJ9B,cAAF,CAAA,SAAA,CAAA,QAAU;AAAO;AAID;AAAmB;AAAQ,IAJzC,YAAF;AAAE,QACE,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;AACzC,KAAG,CAAH;AAAC,IACD,OAAA,cAAC,CAAD;AAAC,CAAA,EAAD,CAAA;AACA;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAI;AAA0F;AAAa;ACjH3Q,IAAa,kBAAkB,GAAG,IAAI,cAAc,CAAM,iBAAiB,CAAC,CAA5E;AAAC;AAAI;AAAgD;AAAe;AAWpE,IAAA;AAAK;AACM;AAAe;AAAI;AACxB,IAFN,SAAA,iBAAA,GAAA;AAAE;AAAY;AACiC;AAAY,QACzD,IAAF,CAAA,UAAY,GAAwB,WAAW,CAAC;AAChD;AAEK;AACM;AAEA;AAAY,QAArB,IAAF,CAAA,mBAAqB,GAAY,EAAE,CAAC;AACpC;AACW;AAEX;AACW,QACT,IAAF,CAAA,QAAU,GAAY,CAAC,CAAC;AACxB;AACW;AACV;AAAY,QAMX,IAAF,CAAA,IAAM,GAAc,IAAI,CAAC;AACzB;AACW;AACE;AAAY,QAAvB,IAAF,CAAA,kBAAoB,GAAmC,QAAQ,CAAC;AAChE;AACW;AACE;AAAY,QAAvB,IAAF,CAAA,gBAAkB,GAAiC,QAAQ,CAAC;AAC5D,KAAC;AACD,IADA,OAAA,iBAAC,CAAD;AAAC,CAAA,EAAD,CAAA;AACA;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAI;AAA8E;AAAiE;ACtCnT,IAAA,cAAA,kBAAA,YAAA;AAAE,IAeA,SAAF,cAAA,CACW,WAA2C,EACtB,IAAS,EAFzC;AAAE,QACS,IAAX,CAAA,WAAsB,GAAX,WAAW,CAAgC;AAAC,QAEnD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACrB,KAAG;AACH;AAEC;AAAQ;AAC0B;AAG5B;AAAQ,IAJb,cAAF,CAAA,SAAA,CAAA,MAAQ;AAAO;AAC0B;AAG5B;AAAQ,IAJnB,YAAF;AAAE,QACE,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC;AACzC,KAAG,CAAH;AAAC,IAGC,MAAF,CAAA,cAAA,CAAM,cAAN,CAAA,SAAA,EAAA,WAAe,EAAf;AAAE;AACwB;AAGpB;AAAiD;AAAuB;AAAY,QAJxF,YAAF;AAAE,YACE,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;AAC9B,SAAG;AACF;AACwB;AAA2B,KAFpD,CAAA,CAAG,AApBH;AAAC;mBATD,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW,CAAX,QAAA,EAAA,xDAWiB;eAXjB,fAY8C;GAX5C,QAAQ,EAAE,bAYgB;AAI1B,KAzBF,CAAA,EAAA;6EASA,sBACE,MAAF,EAAU,CAAV;2PAAA,CAAA,sBACE,aAAa,EAAf,iBAAA,CAAA,IAAA,sBACE,eAAF,EAAA;YAAA,CAAA,MAAA,sBACE;GAAF,EAAA;KACA,OAAA,EAAA;IAAA,uBACA,kBACA,EAAA,EAAA,OACA;;;;;;;;;;;;;;;;;;;;kCAjBA;AAAC,IAyBD,OAAA,cAAA,CAAA;AAAC;AAAM;AAAC;AAAI;AACX;AAKwB;AAAI;AAAI;AAGD;AAC7B;AAAa;ACxBhB,IAAa,qBAAqB,GAE9B;AACJ;AAAQ;AACF;AAAQ,IAAZ,aAAa,EAAE,OAAO,CAAC,OAAO,EAAE;AAClC,QAAI,KAAK,CAAC,cAAc,EAAE,KAAK,CAAC;AAChC,YAAM,SAAS,EAAE,YAAY;AAC7B,YAAM,OAAO,EAAE,CAAC;AAChB,SAAK,CAAC,CAAC;AACP,QAAI,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC;AAC3B,YAAM,SAAS,EAAE,UAAU;AAC3B,YAAM,OAAO,EAAE,CAAC;AAChB,SAAK,CAAC,CAAC;AACP,QAAI,UAAU,CAAC,cAAc,EAAE,OAAO,CAAC,kCAAkC,CAAC,CAAC;AAC3E,QAAI,UAAU,CAAC,wBAAwB,EAAE,OAAO,CAAC,mCAAmC,EAAE,KAAK,CAAC;AAC5F,YAAM,OAAO,EAAE,CAAC;AAChB,SAAK,CAAC,CAAC,CAAC;AACR,KAAG,CAAC;AACJ,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAI;AAAkE;AAAkB;ACFxP,IAAA,oBAAA,kBAAA,UAAA,MAAA,EAAA;AAAE,IAmBwCA,SAA1C,CAAA,oBAAA,EAAA,MAAA,CAAA,CAA0D;AAAC,IAmBzD,SAAF,oBAAA,CACY,OAAe,EACf,WAAoC,EACpC,kBAAqC,EAEtC,cAAiC,EAL5C;AAAE,QAAA,IAAF,KAAA,GAOI,MAPJ,CAAA,IAAA,CAAA,IAAA,CAOW,IAPX,IAAA,CAkBG;AACH,QAlBY,KAAZ,CAAA,OAAmB,GAAP,OAAO,CAAQ;AAAC,QAChB,KAAZ,CAAA,WAAuB,GAAX,WAAW,CAAyB;AAAC,QACrC,KAAZ,CAAA,kBAA8B,GAAlB,kBAAkB,CAAmB;AAAC,QAEvC,KAAX,CAAA,cAAyB,GAAd,cAAc,CAAmB;AAAC;AAErC;AAEuC;AAAY,QA1BjD,KAAV,CAAA,UAAoB,GAAG,KAAK,CAAC;AAC7B;AACW;AAA0E;AAAY,QAItF,KAAX,CAAA,OAAkB,GAAiB,IAAI,OAAO,EAAE,CAAC;AACjD;AACW;AACE;AAAY,QAAd,KAAX,CAAA,QAAmB,GAAiB,IAAI,OAAO,EAAE,CAAC;AAClD;AACW;AACE;AAAY,QAAvB,KAAF,CAAA,eAAiB,GAAG,MAAM,CAAC;AAC3B;AAEqB;AAIX,QASN,IAAI,cAAc,CAAC,UAAU,KAAK,WAAW,IAAI,CAAC,cAAc,CAAC,mBAAmB,EAAE;AAC1F,YAAM,KAAI,CAAC,KAAK,GAAG,OAAO,CAAC;AAC3B,SAAK;AAAC,aAAK,IAAI,cAAc,CAAC,UAAU,KAAK,KAAK,EAAE;AACpD,YAAM,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC;AACxB,SAAK;AAAC,aAAK;AACX,YAAM,KAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;AAC5B,SAAK;AACL;AAEiB,KAFd;AACH;AAEC;AAAQ;AACD;AAAmB;AACN;AACf;AAAQ,IAHZ,oBAAF,CAAA,SAAA,CAAA,qBAAuB;AAAO;AACD;AACZ;AACT;AAAmB;AAAQ,IAHjC,UAAyB,MAA0B,EAArD;AAAE,QACE,IAAI,CAAC,kBAAkB,EAAE,CAAC;AAC9B,QAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;AACjC,QAAI,OAAO,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;AAC5D,KAAG,CAAH;AAAC;AAEuE;AAClE;AACH;AAAmB;AACN;AACf;AAAQ,IAHP,oBAAF,CAAA,SAAA,CAAA,oBAAsB;AAAO;AACH;AACZ;AACT;AAAmB;AAAQ,IAH9B,UAAwB,MAAyB,EAAnD;AAAE,QACE,IAAI,CAAC,kBAAkB,EAAE,CAAC;AAC9B,QAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;AACjC,QAAI,OAAO,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;AAC3D,KAAG,CAAH;AAAC;AAEoE;AAC/D;AAC2B;AAEjB;AAAmB;AAAQ,IAHzC,oBAAF,CAAA,SAAA,CAAA,cAAgB;AAAO;AAGd;AAAwB;AAAmB;AAAQ,IAH1D,UAAe,KAAqB,EAAtC;AAAE,QACS,IAAA,SAAX,GAAA,KAAA,CAAA,SAAoB,EAAE,OAAtB,GAAA,KAAA,CAAA,OAA6B,CAA7B;AAAC,QAEG,IAAI,CAAC,OAAO,KAAK,MAAM,IAAI,SAAS,KAAK,MAAM,KAAK,OAAO,KAAK,QAAQ,EAAE;AAC9E,YAAM,IAAI,CAAC,aAAa,EAAE,CAAC;AAC3B,SAAK;AACL,QACI,IAAI,OAAO,KAAK,SAAS,EAAE;AAC/B;AACM;AACM;AAET,YAFH,IAAY,SAAO,GAAG,IAAI,CAAC,QAAQ,CAAnC;AAAC,YAEK,IAAI,CAAC,OAAO,CAAC,GAAG;AAAM;AAE5B;AAAgB,YAFO,YAAvB;AAAE,gBACM,SAAO,CAAC,IAAI,EAAE,CAAC;AACvB,gBAAQ,SAAO,CAAC,QAAQ,EAAE,CAAC;AAC3B,aAAO,EAAC,CAAC;AACT,SAAK;AACL,KAAG,CAAH;AAAC;AAEuD;AAClD;AAEU;AAAmB;AAChC,IAHD,oBAAF,CAAA,SAAA,CAAA,KAAO;AAAO;AAEU;AACrB;AAAQ,IAHT,YAAF;AAAE,QACE,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;AAC1B,YAAM,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;AACvC,YAAM,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE,CAAC;AAC9C,SAAK;AACL,KAAG,CAAH;AAAC;AAE0D;AACrD;AAC8B;AAAmB;AAAQ,IAD7D,oBAAF,CAAA,SAAA,CAAA,IAAM;AAAO;AAC8B;AAAmB;AAAQ,IADpE,YAAF;AAAE;AACsE;AACI;AAC/D,QACT,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;AACpC,QAAI,OAAO,IAAI,CAAC,OAAO,CAAC;AACxB,KAAG,CAAH;AAAC;AAEqF;AAChF;AAMG;AAAmB;AAAQ,IANlC,oBAAF,CAAA,SAAA,CAAA,WAAa;AACX;AAKqB;AAAmB;AAAQ,IANhD,YAAF;AAAE,QACE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;AAC3B,QAAI,IAAI,CAAC,aAAa,EAAE,CAAC;AACzB,KAAG,CAAH;AAAC;AAEG;AAEJ;AACE;AACE;AAAQ;AACmD;AAM9D;AAAgB;AAAmB;AAAQ,IAPlC,oBAAV,CAAA,SAAA,CAAA,aAAuB;AACrB;AACF;AAKmB;AAAgB;AAAmB;AAAQ,IAP5D,YAAF;AAAE,QAAA,IAAF,KAAA,GAAA,IAAA,CAKG;AACH,QALI,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS;AAAM;AAC1D;AACf,QAFoE,YAAzE;AAAE,YACI,KAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;AAC1B,YAAM,KAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;AAC9B,SAAK,EAAC,CAAC;AACP,KAAG,CAAH;AAAC;AAEwF;AACnF;AACqD;AACjD;AAAmB;AAAQ,IAF3B,oBAAV,CAAA,SAAA,CAAA,qBAA+B;AAC7B;AACwB;AAAgB;AAEvC;AAAQ,IAJT,YAAF;AAAE;AAAyB,QAC3B,IAAU,OAAO,GAAgB,IAAI,CAAC,WAAW,CAAC,aAAa,CAA/D;AAAC;AAAyB,QAC1B,IAAU,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAvD;AAAC,QAEG,IAAI,YAAY,EAAE;AACtB,YAAM,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;AACvC;AACQ,gBAAA,YAAY,CAAC,OAAO;AAAM;AAAuC;AAE3D;AAAoB,gBAFL,UAAA,QAAQ,EAArC,EAAyC,OAAA,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAxE,EAAwE,EAAC,CAAC;AAC1E,aAAO;AAAC,iBAAK;AACb,gBAAQ,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AAC5C,aAAO;AACP,SAAK;AACL,QACI,IAAI,IAAI,CAAC,cAAc,CAAC,kBAAkB,KAAK,QAAQ,EAAE;AAC7D,YAAM,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;AACpD,SAAK;AACL,QACI,IAAI,IAAI,CAAC,cAAc,CAAC,gBAAgB,KAAK,KAAK,EAAE;AACxD,YAAM,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;AACjD,SAAK;AACL,KAAG,CAAH;AAAC;AAEoE;AAC/D;AACoC;AAC5B;AAAmB;AAAQ,IAF/B,oBAAV,CAAA,SAAA,CAAA,kBAA4B;AAC1B;AACyB;AAAgB;AAAmB;AAAQ,IAFpE,YAAF;AAAE,QACE,IAAI,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,EAAE;AAC1C,YAAM,MAAM,KAAK,CAAC,0EAA0E,CAAC,CAAC;AAC9F,SAAK;AACL,KAAG,CAAH,AAzIA;AAAC;yBAjBD,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW,CAAX,QAAA,EAAA,9DAmBgB;kBAnBhB,lBAmBiF;cAlB/E,QAAQ,EAAE,xBAmBa;AACrB,QApCJ,EAAA,IAAA,EAAE,iBAAF,EAAA;EAgBA,sBACE,MAAF,EAAU,CAAV,jCAjBE,QAFF,EAAA,IAAA,EAAE,iBAAF,EAAA;AAAC,KAHD,CAAA,EAAA,CAAA;AAAC,IAaD,oBAAA,CAAA,cAAA,GAAA;AAAE;AAI6B;6OAK/B,CAAA;;;;;;2HAOE,UAAF,EAAA,CAAA;UAAA,CAAA,aAAkD,CAAlD,sBACE,IAAF,EAAA,0BACA,aAAA,EAAA,OAAA,0BACM,OAAN,EAAA,yBAAA;cACI;IAAJ,EAAA,iBAAA;EACI,eAAJ,EAAA,wBAAA,sBACA;aACA,EAAA,EAAA,OACA;;;;;;;;;;;;;;;;;;;;;;;;oBApBqC;AAAC,IA2BtC,OAAA,oBAAA,CAAG;AAAC;AAAsB;AAAC;AAAI;AAAkC;AAGlC;AC9C/B,IAAA,iBAAA,kBAAA,YAAA;AAAE,IAAF,SAAA,iBAAA,GAAA;AAAE,KAY+B;6CAZjC,EAAA,IAAA,EAAC,QAAQ,EAAT,IAAA,EAAA,CAAU;aACR,OAAO,EAAE,0BACP,aAAa,0BACb,YAAY,0BACZ,YAAY;SACZ,eAAe;uBACf;YAAe;SAChB;EACD,OAAO,EAAE,CAAC;GAAoB,EAAE,eAAe,CAAC;WAChD,YAAY,EAAE,CAAC,oBAAoB,EAAE,cAAc,CAAC,sBACpD,eAAe,EAAE,CAAC,oBAAoB,EAAE,cAAc,CAAC,mBACxD,EAAD,EAAA;;;;;;;;;;;;;;;;;;;gDACK;AAAC,IAA0B,OAAhC,iBAAiC,CAAjC;AAAC,CAAgC,EAAjC,CAAA;AAAE;AAAC;AAAI;AACA;AAAqH;AAAI;AAAI;AAAkE;AAAa;ACEnN,IAAa,6BAA6B,GACtC,IAAI,cAAc,CAAoB,+BAA+B,EAAE;AAC3E,IAAM,UAAU,EAAE,MAAM;AACxB,IAAM,OAAO,EAAE,qCAAqC;AACpD,CAAK,CAAC,CAAN;AAAC;AAAI;AAES;AACN;AAAR,SAAgB,qCAAqC,GAArD;AAAE,IACA,OAAO,IAAI,iBAAiB,EAAE,CAAC;AACjC,CAAC;AACD;AACG;AACuD;AAE1D,IAAA,WAAA,kBAAA,YAAA;AAAE,IAuBA,SAAF,WAAA,CACc,QAAiB,EACjB,KAAoB,EACpB,SAAmB,EACnB,mBAAuC,EACf,eAA4B,EACb,cAAiC,EANtF;AAAE,QACY,IAAd,CAAA,QAAsB,GAAR,QAAQ,CAAS;AAAC,QAClB,IAAd,CAAA,KAAmB,GAAL,KAAK,CAAe;AAAC,QACrB,IAAd,CAAA,SAAuB,GAAT,SAAS,CAAU;AAAC,QACpB,IAAd,CAAA,mBAAiC,GAAnB,mBAAmB,CAAoB;AAAC,QAChB,IAAtC,CAAA,eAAqD,GAAf,eAAe,CAAa;AAAC,QACd,IAArD,CAAA,cAAmE,GAAd,cAAc,CAAmB;AAAC;AAGtF;AACY;AAGM;AAAqC;AAEpD,QA/BM,IAAV,CAAA,uBAAiC,GAA+B,IAAI,CAAC;AACrE,KAqB0F;AAC1F,IApBE,MAAF,CAAA,cAAA,CAAM,WAAN,CAAA,SAAA,EAAA,oBAAwB,EAAxB;AAAE;AACiB;AAAiB;AAC6B;AAG5D;AAAY,QALf,YAAF;AAAE;AAA6B,YAC/B,IAAU,MAAM,GAAG,IAAI,CAAC,eAAe,CAAvC;AAAC,YACG,OAAO,MAAM,GAAG,MAAM,CAAC,kBAAkB,GAAG,IAAI,CAAC,uBAAuB,CAAC;AAC7E,SAAG;AAEH;AAAiB;AAA4B;AACvC;AAAY,QADhB,UAAuB,KAAiC,EAA1D;AAAE,YACE,IAAI,IAAI,CAAC,eAAe,EAAE;AAC9B,gBAAM,IAAI,CAAC,eAAe,CAAC,kBAAkB,GAAG,KAAK,CAAC;AACtD,aAAK;AAAC,iBAAK;AACX,gBAAM,IAAI,CAAC,uBAAuB,GAAG,KAAK,CAAC;AAC3C,aAAK;AACL,SAAG;AAEH;AACW;AACN,KAZL,CAAA,CAAG;AACH;AACO;AAEE;AAAoC;AAAO;AAEd;AAKV;AACzB;AAAQ;AAEyB;AACnB;AAAO;AAAmB;AACV;AAGjC;AAAmB;AAAQ,IAMzB,WAAF,CAAA,SAAA,CAAA,iBAAmB;AAAO;AAET;AAAoC;AAAO;AAIzD;AAA0D;AAC5B;AAEpB;AAAQ,IATnB,UAAqB,SAA2B,EAAE,MAA0B,EAA9E;AAAE,QAEE,0BAAO,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,GAAsB;AAChE,KAAG,CAAH;AAAC;AAEG;AAEJ;AACE;AACE;AACE;AAEJ;AAAQ;AAAQ;AACmB;AACP;AAAO;AAIE;AACI;AACtC;AAAQ,IARX,WAAF,CAAA,SAAA,CAAA,gBAAkB;AAAO;AAExB;AAAoC;AACpC;AAG6C;AACI;AACtC;AAAQ,IARlB,UAAiB,QAA0B,EAAE,MAA0B,EAAzE;AAAE,QAEE,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AAC1C,KAAG,CAAH;AAAC;AAEG;AAEJ;AACE;AACE;AAEJ;AAAQ;AAAQ;AACX;AACwB;AAEG;AACU;AAAmB;AACxD,IANH,WAAF,CAAA,SAAA,CAAA,IAAM;AAAO;AACX;AACwB;AAEG;AACU;AAAmB;AACxD,IANA,UAAK,OAAe,EAAE,MAAmB,EAAE,MAA0B,EAAvE;AAAE,QAAsB,IAAxB,MAAA,KAAA,KAAA,CAAA,EAAwB,EAAA,MAAxB,GAAA,EAA2C,CAA3C,EAAA;AAAC;AAAyB,QAE1B,IAAU,OAAO,GAAjBC,QAAA,CAAA,EAAA,EAAwB,IAAI,CAAC,cAAc,EAAK,MAAM,CAAC,CAAvD;AAAC;AAEa;AACC,QACX,OAAO,CAAC,IAAI,GAAG,EAAC,OAAO,EAA3B,OAA2B,EAAE,MAAM,EAAnC,MAAmC,EAAC,CAAC;AACrC,QACI,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE;AACtC,YAAM,OAAO,CAAC,mBAAmB,GAAG,OAAO,CAAC;AAC5C,SAAK;AACL,QACI,OAAO,IAAI,CAAC,iBAAiB,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;AAC3D,KAAG,CAAH;AAAC;AAEG;AAEJ;AACE;AAAQ;AAEL;AAAmB;AAAQ,IAF9B,WAAF,CAAA,SAAA,CAAA,OAAS;AAAO;AAEL;AAAmB;AAAQ,IAFpC,YAAF;AAAE,QACE,IAAI,IAAI,CAAC,kBAAkB,EAAE;AACjC,YAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC;AACxC,SAAK;AACL,KAAG,CAAH;AAAC;AAEG;AACC;AAAQ,IADX,WAAF,CAAA,SAAA,CAAA,WAAa;AACX;AAAmB;AAAQ,IAD3B,YAAF;AAAE;AACqD,QACnD,IAAI,IAAI,CAAC,uBAAuB,EAAE;AACtC,YAAM,IAAI,CAAC,uBAAuB,CAAC,OAAO,EAAE,CAAC;AAC7C,SAAK;AACL,KAAG,CAAH;AAAC;AAEG;AAEJ;AACE;AAAQ;AACO;AAAgB;AAA6B;AAE9D;AAAmB;AAAQ,IAHjB,WAAV,CAAA,SAAA,CAAA,wBAAkC;AAAO;AACO;AAAgB;AAE1D;AAAyB;AAAmB;AAAQ,IAHxD,UAAiC,UAAsB,EACtB,MAAyB,EAD5D;AAAE;AAAyB,QAG3B,IAAU,YAAY,GAAG,MAAM,IAAI,MAAM,CAAC,gBAAgB,IAAI,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAA9F;AAAC;AAAyB,QAC1B,IAAU,QAAQ,GAAG,IAAI,cAAc,CAAC,YAAY,IAAI,IAAI,CAAC,SAAS,EAAE,IAAI,OAAO,CAAC;AACpF,YAAM,CAAC,iBAAiB,EAAE,MAAM,CAAC;AACjC,SAAK,CAAC,CAAC,CAAP;AAAC;AAEe,QAAhB,IAAU,eAAe,GACjB,IAAI,eAAe,CAAC,oBAAoB,EAAE,MAAM,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CADpF;AAAC;AAAyB,QAE1B,IAAU,YAAY,GAAuC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,CAA/F;AAAC,QACG,YAAY,CAAC,QAAQ,CAAC,cAAc,GAAG,MAAM,CAAC;AAClD,QAAI,OAAO,YAAY,CAAC,QAAQ,CAAC;AACjC,KAAG,CAAH;AAAC;AAEG;AAEJ;AACE;AAAQ;AAAuF;AAClF;AAAmB;AAEtB;AAA8B;AAAmB;AAAQ,IAH3D,WAAV,CAAA,SAAA,CAAA,OAAiB;AAAO;AACX;AAAgB;AAE7B;AAA0B;AAA8B;AAAmB;AAAQ,IAHjF,UAAmB,OAA0C,EAAE,UAA8B,EAA/F;AAAE;AAAyB,QAG3B,IAAU,MAAM,GAAhBA,QAAA,CAAA,EAAA,EAAuB,IAAI,iBAAiB,EAAE,EAAK,IAAI,CAAC,cAAc,EAAK,UAAU,CAAC,CAAtF;AAAC;AAAyB,QAC1B,IAAU,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAlD;AAAC;AAAyB,QAC1B,IAAU,SAAS,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAvE;AAAC;AAAyB,QAC1B,IAAU,WAAW,GAAG,IAAI,cAAc,CAA2B,SAAS,EAAE,UAAU,CAAC,CAA3F;AAAC,QAEG,IAAI,OAAO,YAAY,WAAW,EAAE;AACxC;AAA6B,YAA7B,IAAY,MAAM,GAAG,IAAI,cAAc,CAAC,OAAO,qBAAE,IAAI,uBAAG;AACxD,gBAAQ,SAAS,EAAE,MAAM,CAAC,IAAI;AAC9B,gBAAQ,WAAW,EAAnB,WAAmB;AACnB,aAAO,GAAQ,CAAf;AAAC,YAEK,WAAW,CAAC,QAAQ,GAAG,SAAS,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;AACpE,SAAK;AAAC,aAAK;AACX;AAA6B,YAA7B,IAAY,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,WAAW,CAAC,CAAhE;AAAC;AAA6B,YAC9B,IAAY,MAAM,GAAG,IAAI,eAAe,CAAC,OAAO,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAtE;AAAC;AAA6B,YAC9B,IAAY,UAAU,GAAG,SAAS,CAAC,qBAAqB,CAAI,MAAM,CAAC,CAAnE;AAAC;AAEuB,YAClB,WAAW,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;AACjD,SAAK;AACL;AAEG;AACI;AACI,QAAP,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,IAAI,CACxD,SAAS,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAClD,CAAC,SAAS;AAAM;AACC;AACJ;AAAY,QAFd,UAAAC,QAAK,EAArB;AAAE,YACI,IAAIA,QAAK,CAAC,OAAO,EAAE;AACzB,gBAAQ,UAAU,CAAC,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;AACzE,aAAO;AAAC,iBAAK;AACb,gBAAQ,UAAU,CAAC,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC;AAC5E,aAAO;AACP,SAAK,EAAC,CAAC;AACP,QACI,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;AAC/C,QAAI,IAAI,CAAC,kBAAkB,GAAG,WAAW,CAAC;AAC1C,QAAI,OAAO,IAAI,CAAC,kBAAkB,CAAC;AACnC,KAAG,CAAH;AAAC;AAEyD;AACpD;AAA0D;AAAgB;AAC5D;AAAyB;AAAmB;AAC1D,IAFI,WAAV,CAAA,SAAA,CAAA,gBAA0B;AAAO;AAChC;AAAgB;AAA8B;AACzC;AAAmB;AAAQ,IAF/B,UAAyB,WAAgC,EAAE,MAAyB,EAAtF;AAAE,QAAA,IAAF,KAAA,GAAA,IAAA,CAiCG;AACH;AAE+D,QAlC3D,WAAW,CAAC,cAAc,EAAE,CAAC,SAAS;AAAM;AAC5B;AAAY,QADW,YAA3C;AAAE;AAC2C,YACvC,IAAI,KAAI,CAAC,kBAAkB,IAAI,WAAW,EAAE;AAClD,gBAAQ,KAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;AACvC,aAAO;AACP,YACM,IAAI,MAAM,CAAC,mBAAmB,EAAE;AACtC,gBAAQ,KAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;AAC3B,aAAO;AACP,SAAK,EAAC,CAAC;AACP,QACI,IAAI,IAAI,CAAC,kBAAkB,EAAE;AACjC;AACM;AACM,YAAN,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,CAAC,SAAS;AAAM;AACtC;AAAgB,YADiB,YAAzD;AAAE,gBACM,WAAW,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC;AAC9C,aAAO,EAAC,CAAC;AACT,YAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC;AACxC,SAAK;AAAC,aAAK;AACX;AACM,YAAA,WAAW,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC;AAC5C,SAAK;AACL;AAEG,QAAC,IAAI,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,GAAG,CAAC,EAAE;AAChD,YAAM,WAAW,CAAC,WAAW,EAAE,CAAC,SAAS;AAAM;AAA2B;AAAgB,YAAhD,YAA1C,EAAgD,OAAA,WAAW,CAAC,aAAa,oBAAC,MAAM,CAAC,QAAQ,GAAE,CAA3F,EAA2F,EAAC,CAAC;AAC7F,SAAK;AACL,QACI,IAAI,MAAM,CAAC,mBAAmB,EAAE;AACpC,YAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,mBAAmB,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;AACzE,SAAK;AACL,KAAG,CAAH;AAAC;AAEG;AAEJ;AACE;AACE;AAAQ;AACE;AAAgB;AACe;AAE9B;AAAQ,IAJb,WAAV,CAAA,SAAA,CAAA,cAAwB;AAAO;AACE;AAC/B;AAEa;AAAmB;AAAQ,IAJxC,UAAuB,MAAyB,EAAlD;AAAE;AAAyB,QAC3B,IAAU,aAAa,GAAG,IAAI,aAAa,EAAE,CAA7C;AAAC,QACG,aAAa,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;AAC/C;AACwB,QAAxB,IAAQ,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,CAA5D;AAAC;AAAoC;AACrC,QACA,IAAU,KAAK,GAAG,MAAM,CAAC,SAAS,KAAK,KAAK,CAA5C;AAAC;AAAyB,QAC1B,IAAU,MAAM,IACV,MAAM,CAAC,kBAAkB,KAAK,MAAM;AAC1C,aAAO,MAAM,CAAC,kBAAkB,KAAK,OAAO,IAAI,CAAC,KAAK,CAAC;AACvD,aAAO,MAAM,CAAC,kBAAkB,KAAK,KAAK,IAAI,KAAK,CAAC,CAAC,CAArD;AAAC;AAAyB,QAC1B,IAAU,OAAO,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,kBAAkB,KAAK,QAAQ,CAArE;AAAC,QACG,IAAI,MAAM,EAAE;AAChB,YAAM,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACjC,SAAK;AAAC,aAAK,IAAI,OAAO,EAAE;AACxB,YAAM,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAClC,SAAK;AAAC,aAAK;AACX,YAAM,gBAAgB,CAAC,kBAAkB,EAAE,CAAC;AAC5C,SAAK;AACL;AACI,QAAA,IAAI,MAAM,CAAC,gBAAgB,KAAK,KAAK,EAAE;AAC3C,YAAM,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAChC,SAAK;AAAC,aAAK;AACX,YAAM,gBAAgB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AACnC,SAAK;AACL,QACI,aAAa,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;AACtD,QAAI,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;AAC/C,KAAG,CAAH;AAAC;AAEG;AAEJ;AACE;AACE;AACE;AAAQ;AAEQ;AAAgB;AAEtC;AAAuE;AAEvC;AAAmB;AAAQ,IANjD,WAAV,CAAA,SAAA,CAAA,eAAyB;AACvB;AACsC;AACxC;AACkB;AAAuE;AAEvC;AAAmB;AAAQ,IAN3E,UACI,MAAyB,EACzB,WAA8B,EAFpC;AAAE;AAAyB,QAI3B,IAAU,YAAY,GAAG,MAAM,IAAI,MAAM,CAAC,gBAAgB,IAAI,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAA9F;AAAC,QAEG,OAAO,IAAI,cAAc,CAAC,YAAY,IAAI,IAAI,CAAC,SAAS,EAAE,IAAI,OAAO,CAAW;AACpF,YAAM,CAAC,cAAc,EAAE,WAAW,CAAC;AACnC,YAAM,CAAC,kBAAkB,EAAE,MAAM,CAAC,IAAI,CAAC;AACvC,SAAK,CAAC,CAAC,CAAC;AACR,KAAG,CAAH,AAhPQ;AAAC;gBAAT,EAAA,IAAA,EAAC,UAAU,EAAX,IAAA,EAAA,CAAY,EAAC,UAAU,vDAAS;CAAP,iBAAiB,EAAC,EAA3C,EAAA,xBAC2C,QAtC3C,EAAA,IAAA,EAAQ,OAAO,EAAf;AAAE,QAFF,EAAA,IAAA,EAAQ,aAAa,EAArB;AAAE,QAUF,EAAA,IAAA,EAAE,QAAQ,EAAV;AAAE,QATF,EAAA,IAAA,EAAQ,kBAAkB,EAA1B;AAAE,QAkEF,EAAA,IAAA,EAAuD,WAAW,EAAlE,UAAA,EAAA,CAAA,EAAA,IAAA,EAAO,QAAQ,EAAf,EAAA,EAAA,IAAA,EAAmB,QAAQ,EAA3B,CAAA,EAAA;AAAE,QAjDF,EAAA,IAAA,EAA4B,iBAAiB,EAA7C,UAAA,EAAA,CAAA,EAAA,IAAA,EAkDO,MAAM,EAlDb,IAAA,EAAA,CAkDc,6BAA6B,EAlD3C,EAAA,CAAA,EAAA;AAAC;AAAU;;;;;;;;;;;;;kCAQK;AAAC,IAlCjB,OAAA,WAAA,CAAA;AAAC,CAgSA,EAAD,CAAA;AACA;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAC;AAAqO","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n"]}