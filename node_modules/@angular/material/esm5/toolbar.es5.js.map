{"version":3,"file":"toolbar.es5.js","sources":["../../../src/material/toolbar/toolbar.ts","../../../src/material/toolbar/toolbar-module.ts"],"names":["tslib_1.__extends"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nclass MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n"]}