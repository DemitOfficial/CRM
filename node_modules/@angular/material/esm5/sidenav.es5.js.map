{"version":3,"file":"sidenav.es5.js","sources":["../../../src/material/sidenav/drawer-animations.ts","../../../src/material/sidenav/drawer.ts","../../../src/material/sidenav/sidenav.ts","../../../src/material/sidenav/sidenav-module.ts"],"names":["tslib_1.__extends"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  HostListener,\n  HostBinding,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\n  // that can be inherited.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostBinding('@transform')\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.start', ['$event'])\n  _animationStartListener(event: AnimationEvent) {\n    this._animationStarted.next(event);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.done', ['$event'])\n  _animationDoneListener(event: AnimationEvent) {\n    this._animationEnd.next(event);\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent, {static: false}) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent, {static: false}) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this.updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    viewportRuler.change()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this.updateContentMargins());\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this.updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this.updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        const width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        const width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this.updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this.updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent, {static: false}) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n"]}