import * as tslib_1 from "tslib";
import { AfterViewInit, Directive, ElementRef, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output, Renderer2, SimpleChanges, OnChanges } from '@angular/core';
import { ControlContainer, FormControl, NgControl } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
let Ng2FlatpickrDirective = class Ng2FlatpickrDirective {
    constructor(parent, ngControl, element, renderer) {
        this.parent = parent;
        this.ngControl = ngControl;
        this.element = element;
        this.renderer = renderer;
        /**
         * onChange gets triggered when the user selects a date, or changes the time on a selected date.
         *
         * Default:  null
         */
        this.flatpickrOnChange = new EventEmitter();
        /**
         * onClose gets triggered when the calendar is closed.
         *
         * Default:  null
         */
        this.flatpickrOnClose = new EventEmitter();
        /**
         * onOpen gets triggered when the calendar is opened.
         *
         * Default:  null
         */
        this.flatpickrOnOpen = new EventEmitter();
        /**
         * onReady gets triggered once the calendar is in a ready state.
         *
         * Default:  null
         */
        this.flatpickrOnReady = new EventEmitter();
    }
    /** Allow double-clicking on the control to open/close it. */
    onClick() {
        this.flatpickr.toggle();
    }
    get control() {
        return this.parent ? this.parent.formDirective.getControl(this.ngControl) : null;
    }
    ngAfterViewInit() {
        /** We cannot initialize the flatpickr instance in ngOnInit(); it will
            randomize the date when the form control initializes. */
        let nativeElement = this.element.nativeElement;
        if (typeof nativeElement === 'undefined' || nativeElement === null) {
            throw 'Error: invalid input element specified';
        }
        if (this.flatpickrOptions.wrap) {
            this.renderer.setAttribute(this.element.nativeElement, 'data-input', '');
            nativeElement = nativeElement.parentNode;
        }
        this.flatpickr = nativeElement.flatpickr(this.flatpickrOptions);
    }
    ngOnChanges(changes) {
        if (this.flatpickr
            && this.flatpickrAltInput
            && changes.hasOwnProperty('placeholder')
            && changes['placeholder'].currentValue) {
            this.flatpickr.altInput.setAttribute('placeholder', changes['placeholder'].currentValue);
        }
    }
    ngOnDestroy() {
        if (this.flatpickr) {
            this.flatpickr.destroy();
        }
        if (this.formControlListener) {
            this.formControlListener.unsubscribe();
            this.formControlListener = undefined;
        }
        this.flatpickrOnChange = undefined;
        this.flatpickrOnClose = undefined;
        this.flatpickrOnOpen = undefined;
        this.flatpickrOnReady = undefined;
    }
    ngOnInit() {
        this.globalOnChange = this.flatpickrOptions.onChange;
        this.globalOnClose = this.flatpickrOptions.onClose;
        this.globalOnOpen = this.flatpickrOptions.onOpen;
        this.globalOnReady = this.flatpickrOptions.onReady;
        this.flatpickrOptions = {
            altFormat: this.getOption('altFormat'),
            altInput: this.getOption('altInput'),
            altInputClass: this.getOption('altInputClass'),
            allowInput: this.getOption('allowInput'),
            appendTo: this.getOption('appendTo'),
            clickOpens: this.getOption('clickOpens', true),
            dateFormat: this.getOption('dateFormat'),
            defaultDate: this.getOption('defaultDate'),
            disable: this.getOption('disable'),
            disableMobile: this.getOption('disableMobile'),
            enable: this.getOption('enable'),
            enableTime: this.getOption('enableTime'),
            enableSeconds: this.getOption('enableSeconds'),
            hourIncrement: this.getOption('hourIncrement'),
            inline: this.getOption('inline'),
            locale: this.getOption('locale'),
            maxDate: this.getOption('maxDate'),
            minDate: this.getOption('minDate'),
            minuteIncrement: this.getOption('minuteIncrement'),
            mode: this.getOption('mode'),
            nextArrow: this.getOption('nextArrow'),
            noCalendar: this.getOption('noCalendar'),
            onChange: this.eventOnChange.bind(this),
            onClose: this.eventOnClose.bind(this),
            onOpen: this.eventOnOpen.bind(this),
            onReady: this.eventOnReady.bind(this),
            parseDate: this.getOption('parseDate'),
            prevArrow: this.getOption('prevArrow'),
            shorthandCurrentMonth: this.getOption('shorthandCurrentMonth'),
            static: this.getOption('static'),
            time_24hr: this.getOption('time_24hr'),
            utc: this.getOption('utc'),
            weekNumbers: this.getOption('weekNumbers'),
            wrap: this.getOption('wrap', true),
        };
        // Remove unset properties
        Object.keys(this.flatpickrOptions).forEach((key) => {
            (this.flatpickrOptions[key] === undefined) &&
                delete this.flatpickrOptions[key];
        });
        if (this.control) {
            this.formControlListener = this.control.valueChanges
                .subscribe((value) => {
                if (!(value instanceof Date)) {
                    // Quietly update the value of the form control to be a
                    // Date object. This avoids any external subscribers
                    // from being notified a second time (once for the user
                    // initiated event, and once for our conversion to
                    // Date()).
                    this.control.setValue(new Date('' + value), {
                        onlySelf: true,
                        emitEvent: false,
                        emitModelToViewChange: false,
                        emitViewToModelChange: false
                    });
                }
            });
        }
    }
    /**
     * Fire off the event emitter for the directive element, and also for the
     * global onChange callback, if defined.
     */
    eventOnChange(selectedDates, dateStr, instance) {
        let event = {
            selectedDates: selectedDates,
            dateStr: dateStr,
            instance: instance
        };
        if (this.flatpickrOnChange) {
            this.flatpickrOnChange.emit(event);
        }
        if (this.globalOnChange) {
            this.globalOnChange(event);
        }
    }
    /**
     * Fire off the event emitter for the directive element, and also for the
     * global onClose callback, if defined.
     */
    eventOnClose(selectedDates, dateStr, instance) {
        let event = {
            selectedDates: selectedDates,
            dateStr: dateStr,
            instance: instance
        };
        if (this.flatpickrOnClose) {
            this.flatpickrOnClose.emit(event);
        }
        if (this.globalOnClose) {
            this.globalOnClose(event);
        }
    }
    /**
     * Fire off the event emitter for the directive element, and also for the
     * global onOpen callback, if defined.
     */
    eventOnOpen(selectedDates, dateStr, instance) {
        let event = {
            selectedDates: selectedDates,
            dateStr: dateStr,
            instance: instance
        };
        if (this.flatpickrOnOpen) {
            this.flatpickrOnOpen.emit(event);
        }
        if (this.globalOnOpen) {
            this.globalOnOpen(event);
        }
    }
    /**
     * Fire off the event emitter for the directive element, and also for the
     * global onReady callback, if defined.
     */
    eventOnReady(selectedDates, dateStr, instance) {
        let event = {
            selectedDates: selectedDates,
            dateStr: dateStr,
            instance: instance
        };
        if (this.flatpickrOnReady) {
            this.flatpickrOnReady.emit(event);
        }
        if (this.globalOnReady) {
            this.globalOnReady(event);
        }
    }
    /**
     * Return the configuration value for option {option}, or {defaultValue} if it
     * doesn't exist.
     */
    getOption(option, defaultValue) {
        let localName = 'flatpickr' + option.substring(0, 1).toUpperCase()
            + option.substring(1);
        if (typeof this[localName] !== 'undefined') {
            return this[localName];
        }
        else if (typeof this.flatpickrOptions[option] !== 'undefined') {
            return this.flatpickrOptions[option];
        }
        else {
            return defaultValue;
        }
    }
};
Ng2FlatpickrDirective.ɵfac = function Ng2FlatpickrDirective_Factory(t) { return new (t || Ng2FlatpickrDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ControlContainer), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
Ng2FlatpickrDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: Ng2FlatpickrDirective, selectors: [["", "flatpickr", ""]], hostBindings: function Ng2FlatpickrDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("dblclick", function Ng2FlatpickrDirective_dblclick_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { flatpickrOptions: ["flatpickr", "flatpickrOptions"], placeholder: "placeholder", flatpickrAltFormat: ["altFormat", "flatpickrAltFormat"], flatpickrAltInput: ["altInput", "flatpickrAltInput"], flatpickrAltInputClass: ["altInputClass", "flatpickrAltInputClass"], flatpickrAllowInput: ["allowInput", "flatpickrAllowInput"], flatpickrAppendTo: ["appendTo", "flatpickrAppendTo"], flatpickrClickOpens: ["clickOpens", "flatpickrClickOpens"], flatpickrDateFormat: ["dateFormat", "flatpickrDateFormat"], flatpickrDefaultDate: ["defaultDate", "flatpickrDefaultDate"], flatpickrDisable: ["disable", "flatpickrDisable"], flatpickrDisableMobile: ["disableMobile", "flatpickrDisableMobile"], flatpickrEnable: ["enable", "flatpickrEnable"], flatpickrEnableTime: ["enableTime", "flatpickrEnableTime"], flatpickrEnableSeconds: ["enableSeconds", "flatpickrEnableSeconds"], flatpickrHourIncrement: ["hourIncrement", "flatpickrHourIncrement"], flatpickrInline: ["inline", "flatpickrInline"], flatpickrLocale: ["locale", "flatpickrLocale"], flatpickrMaxDate: ["maxDate", "flatpickrMaxDate"], flatpickrMinDate: ["minDate", "flatpickrMinDate"], flatpickrMinuteIncrement: ["minuteIncrement", "flatpickrMinuteIncrement"], flatpickrMode: ["mode", "flatpickrMode"], flatpickrNextArrow: ["nextArrow", "flatpickrNextArrow"], flatpickrNoCalendar: ["noCalendar", "flatpickrNoCalendar"], flatpickrParseDate: ["parseDate", "flatpickrParseDate"], flatpickrPrevArrow: ["prevArrow", "flatpickrPrevArrow"], flatpickrShorthandCurrentMonth: ["shorthandCurrentMonth", "flatpickrShorthandCurrentMonth"], flatpickrStatic: ["static", "flatpickrStatic"], flatpickrTime_24hr: ["time_24hr", "flatpickrTime_24hr"], flatpickrUtc: ["utc", "flatpickrUtc"], flatpickrWeekNumbers: ["weekNumbers", "flatpickrWeekNumbers"], flatpickrWrap: ["wrap", "flatpickrWrap"] }, outputs: { flatpickrOnChange: "onChange", flatpickrOnClose: "onClose", flatpickrOnOpen: "onOpen", flatpickrOnReady: "onReady" }, exportAs: ["ng2-flatpickr"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });
Ng2FlatpickrDirective.ctorParameters = () => [
    { type: ControlContainer },
    { type: NgControl },
    { type: ElementRef },
    { type: Renderer2 }
];
tslib_1.__decorate([
    Input('flatpickr')
], Ng2FlatpickrDirective.prototype, "flatpickrOptions", void 0);
tslib_1.__decorate([
    Input('placeholder')
], Ng2FlatpickrDirective.prototype, "placeholder", void 0);
tslib_1.__decorate([
    Input('altFormat')
], Ng2FlatpickrDirective.prototype, "flatpickrAltFormat", void 0);
tslib_1.__decorate([
    Input('altInput')
], Ng2FlatpickrDirective.prototype, "flatpickrAltInput", void 0);
tslib_1.__decorate([
    Input('altInputClass')
], Ng2FlatpickrDirective.prototype, "flatpickrAltInputClass", void 0);
tslib_1.__decorate([
    Input('allowInput')
], Ng2FlatpickrDirective.prototype, "flatpickrAllowInput", void 0);
tslib_1.__decorate([
    Input('appendTo')
], Ng2FlatpickrDirective.prototype, "flatpickrAppendTo", void 0);
tslib_1.__decorate([
    Input('clickOpens')
], Ng2FlatpickrDirective.prototype, "flatpickrClickOpens", void 0);
tslib_1.__decorate([
    Input('dateFormat')
], Ng2FlatpickrDirective.prototype, "flatpickrDateFormat", void 0);
tslib_1.__decorate([
    Input('defaultDate')
], Ng2FlatpickrDirective.prototype, "flatpickrDefaultDate", void 0);
tslib_1.__decorate([
    Input('disable')
], Ng2FlatpickrDirective.prototype, "flatpickrDisable", void 0);
tslib_1.__decorate([
    Input('disableMobile')
], Ng2FlatpickrDirective.prototype, "flatpickrDisableMobile", void 0);
tslib_1.__decorate([
    Input('enable')
], Ng2FlatpickrDirective.prototype, "flatpickrEnable", void 0);
tslib_1.__decorate([
    Input('enableTime')
], Ng2FlatpickrDirective.prototype, "flatpickrEnableTime", void 0);
tslib_1.__decorate([
    Input('enableSeconds')
], Ng2FlatpickrDirective.prototype, "flatpickrEnableSeconds", void 0);
tslib_1.__decorate([
    Input('hourIncrement')
], Ng2FlatpickrDirective.prototype, "flatpickrHourIncrement", void 0);
tslib_1.__decorate([
    Input('inline')
], Ng2FlatpickrDirective.prototype, "flatpickrInline", void 0);
tslib_1.__decorate([
    Input('locale')
], Ng2FlatpickrDirective.prototype, "flatpickrLocale", void 0);
tslib_1.__decorate([
    Input('maxDate')
], Ng2FlatpickrDirective.prototype, "flatpickrMaxDate", void 0);
tslib_1.__decorate([
    Input('minDate')
], Ng2FlatpickrDirective.prototype, "flatpickrMinDate", void 0);
tslib_1.__decorate([
    Input('minuteIncrement')
], Ng2FlatpickrDirective.prototype, "flatpickrMinuteIncrement", void 0);
tslib_1.__decorate([
    Input('mode')
], Ng2FlatpickrDirective.prototype, "flatpickrMode", void 0);
tslib_1.__decorate([
    Input('nextArrow')
], Ng2FlatpickrDirective.prototype, "flatpickrNextArrow", void 0);
tslib_1.__decorate([
    Input('noCalendar')
], Ng2FlatpickrDirective.prototype, "flatpickrNoCalendar", void 0);
tslib_1.__decorate([
    Input('parseDate')
], Ng2FlatpickrDirective.prototype, "flatpickrParseDate", void 0);
tslib_1.__decorate([
    Input('prevArrow')
], Ng2FlatpickrDirective.prototype, "flatpickrPrevArrow", void 0);
tslib_1.__decorate([
    Input('shorthandCurrentMonth')
], Ng2FlatpickrDirective.prototype, "flatpickrShorthandCurrentMonth", void 0);
tslib_1.__decorate([
    Input('static')
], Ng2FlatpickrDirective.prototype, "flatpickrStatic", void 0);
tslib_1.__decorate([
    Input('time_24hr')
], Ng2FlatpickrDirective.prototype, "flatpickrTime_24hr", void 0);
tslib_1.__decorate([
    Input('utc')
], Ng2FlatpickrDirective.prototype, "flatpickrUtc", void 0);
tslib_1.__decorate([
    Input('weekNumbers')
], Ng2FlatpickrDirective.prototype, "flatpickrWeekNumbers", void 0);
tslib_1.__decorate([
    Input('wrap')
], Ng2FlatpickrDirective.prototype, "flatpickrWrap", void 0);
tslib_1.__decorate([
    Output('onChange')
], Ng2FlatpickrDirective.prototype, "flatpickrOnChange", void 0);
tslib_1.__decorate([
    Output('onClose')
], Ng2FlatpickrDirective.prototype, "flatpickrOnClose", void 0);
tslib_1.__decorate([
    Output('onOpen')
], Ng2FlatpickrDirective.prototype, "flatpickrOnOpen", void 0);
tslib_1.__decorate([
    Output('onReady')
], Ng2FlatpickrDirective.prototype, "flatpickrOnReady", void 0);
tslib_1.__decorate([
    HostListener('dblclick')
], Ng2FlatpickrDirective.prototype, "onClick", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Ng2FlatpickrDirective, [{
        type: Directive,
        args: [{ selector: '[flatpickr]', exportAs: 'ng2-flatpickr' }]
    }], function () { return [{ type: ɵngcc1.ControlContainer }, { type: ɵngcc1.NgControl }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { flatpickrOnChange: [{
            type: Output,
            args: ['onChange']
        }], flatpickrOnClose: [{
            type: Output,
            args: ['onClose']
        }], flatpickrOnOpen: [{
            type: Output,
            args: ['onOpen']
        }], flatpickrOnReady: [{
            type: Output,
            args: ['onReady']
        }], 
    /** Allow double-clicking on the control to open/close it. */
    onClick: [{
            type: HostListener,
            args: ['dblclick']
        }], flatpickrOptions: [{
            type: Input,
            args: ['flatpickr']
        }], placeholder: [{
            type: Input,
            args: ['placeholder']
        }], flatpickrAltFormat: [{
            type: Input,
            args: ['altFormat']
        }], flatpickrAltInput: [{
            type: Input,
            args: ['altInput']
        }], flatpickrAltInputClass: [{
            type: Input,
            args: ['altInputClass']
        }], flatpickrAllowInput: [{
            type: Input,
            args: ['allowInput']
        }], flatpickrAppendTo: [{
            type: Input,
            args: ['appendTo']
        }], flatpickrClickOpens: [{
            type: Input,
            args: ['clickOpens']
        }], flatpickrDateFormat: [{
            type: Input,
            args: ['dateFormat']
        }], flatpickrDefaultDate: [{
            type: Input,
            args: ['defaultDate']
        }], flatpickrDisable: [{
            type: Input,
            args: ['disable']
        }], flatpickrDisableMobile: [{
            type: Input,
            args: ['disableMobile']
        }], flatpickrEnable: [{
            type: Input,
            args: ['enable']
        }], flatpickrEnableTime: [{
            type: Input,
            args: ['enableTime']
        }], flatpickrEnableSeconds: [{
            type: Input,
            args: ['enableSeconds']
        }], flatpickrHourIncrement: [{
            type: Input,
            args: ['hourIncrement']
        }], flatpickrInline: [{
            type: Input,
            args: ['inline']
        }], flatpickrLocale: [{
            type: Input,
            args: ['locale']
        }], flatpickrMaxDate: [{
            type: Input,
            args: ['maxDate']
        }], flatpickrMinDate: [{
            type: Input,
            args: ['minDate']
        }], flatpickrMinuteIncrement: [{
            type: Input,
            args: ['minuteIncrement']
        }], flatpickrMode: [{
            type: Input,
            args: ['mode']
        }], flatpickrNextArrow: [{
            type: Input,
            args: ['nextArrow']
        }], flatpickrNoCalendar: [{
            type: Input,
            args: ['noCalendar']
        }], flatpickrParseDate: [{
            type: Input,
            args: ['parseDate']
        }], flatpickrPrevArrow: [{
            type: Input,
            args: ['prevArrow']
        }], flatpickrShorthandCurrentMonth: [{
            type: Input,
            args: ['shorthandCurrentMonth']
        }], flatpickrStatic: [{
            type: Input,
            args: ['static']
        }], flatpickrTime_24hr: [{
            type: Input,
            args: ['time_24hr']
        }], flatpickrUtc: [{
            type: Input,
            args: ['utc']
        }], flatpickrWeekNumbers: [{
            type: Input,
            args: ['weekNumbers']
        }], flatpickrWrap: [{
            type: Input,
            args: ['wrap']
        }] }); })();
export { Ng2FlatpickrDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,